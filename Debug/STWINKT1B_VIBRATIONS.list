
STWINKT1B_VIBRATIONS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010794  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000058c  08010958  08010958  00020958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010ee4  08010ee4  0003085c  2**0
                  CONTENTS
  4 .ARM          00000008  08010ee4  08010ee4  00020ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010eec  08010eec  0003085c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010eec  08010eec  00020eec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ef0  08010ef0  00020ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000368  20000000  08010ef4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .neai         000004f4  20000368  0801125c  00030368  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00003d3c  2000085c  08011750  0003085c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004598  08011750  00034598  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003085c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00027563  00000000  00000000  0003088c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f18  00000000  00000000  00057def  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ed0  00000000  00000000  0005bd08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001d38  00000000  00000000  0005dbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035723  00000000  00000000  0005f910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f39c  00000000  00000000  00095033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00130827  00000000  00000000  000b43cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      000000c9  00000000  00000000  001e4bf6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000099bc  00000000  00000000  001e4cc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000085c 	.word	0x2000085c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0801093c 	.word	0x0801093c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000860 	.word	0x20000860
 80001fc:	0801093c 	.word	0x0801093c

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2uiz>:
 8000bd8:	004a      	lsls	r2, r1, #1
 8000bda:	d211      	bcs.n	8000c00 <__aeabi_d2uiz+0x28>
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d211      	bcs.n	8000c06 <__aeabi_d2uiz+0x2e>
 8000be2:	d50d      	bpl.n	8000c00 <__aeabi_d2uiz+0x28>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d40e      	bmi.n	8000c0c <__aeabi_d2uiz+0x34>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	fa23 f002 	lsr.w	r0, r3, r2
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c0a:	d102      	bne.n	8000c12 <__aeabi_d2uiz+0x3a>
 8000c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c10:	4770      	bx	lr
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b9aa 	b.w	8001024 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f83c 	bl	8000d54 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_d2lz>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	2200      	movs	r2, #0
 8000cec:	2300      	movs	r3, #0
 8000cee:	4604      	mov	r4, r0
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	f7ff ff0b 	bl	8000b0c <__aeabi_dcmplt>
 8000cf6:	b928      	cbnz	r0, 8000d04 <__aeabi_d2lz+0x1c>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d00:	f000 b80a 	b.w	8000d18 <__aeabi_d2ulz>
 8000d04:	4620      	mov	r0, r4
 8000d06:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d0a:	f000 f805 	bl	8000d18 <__aeabi_d2ulz>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	bd38      	pop	{r3, r4, r5, pc}
 8000d16:	bf00      	nop

08000d18 <__aeabi_d2ulz>:
 8000d18:	b5d0      	push	{r4, r6, r7, lr}
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <__aeabi_d2ulz+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4606      	mov	r6, r0
 8000d20:	460f      	mov	r7, r1
 8000d22:	f7ff fc81 	bl	8000628 <__aeabi_dmul>
 8000d26:	f7ff ff57 	bl	8000bd8 <__aeabi_d2uiz>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	f7ff fc02 	bl	8000534 <__aeabi_ui2d>
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <__aeabi_d2ulz+0x38>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	f7ff fc78 	bl	8000628 <__aeabi_dmul>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	4639      	mov	r1, r7
 8000d40:	f7ff faba 	bl	80002b8 <__aeabi_dsub>
 8000d44:	f7ff ff48 	bl	8000bd8 <__aeabi_d2uiz>
 8000d48:	4621      	mov	r1, r4
 8000d4a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d4c:	3df00000 	.word	0x3df00000
 8000d50:	41f00000 	.word	0x41f00000

08000d54 <__udivmoddi4>:
 8000d54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d58:	9d08      	ldr	r5, [sp, #32]
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	468e      	mov	lr, r1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d14d      	bne.n	8000dfe <__udivmoddi4+0xaa>
 8000d62:	428a      	cmp	r2, r1
 8000d64:	4694      	mov	ip, r2
 8000d66:	d969      	bls.n	8000e3c <__udivmoddi4+0xe8>
 8000d68:	fab2 f282 	clz	r2, r2
 8000d6c:	b152      	cbz	r2, 8000d84 <__udivmoddi4+0x30>
 8000d6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d72:	f1c2 0120 	rsb	r1, r2, #32
 8000d76:	fa20 f101 	lsr.w	r1, r0, r1
 8000d7a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d7e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d82:	4094      	lsls	r4, r2
 8000d84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d88:	0c21      	lsrs	r1, r4, #16
 8000d8a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d8e:	fa1f f78c 	uxth.w	r7, ip
 8000d92:	fb08 e316 	mls	r3, r8, r6, lr
 8000d96:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d9a:	fb06 f107 	mul.w	r1, r6, r7
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x64>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000daa:	f080 811f 	bcs.w	8000fec <__udivmoddi4+0x298>
 8000dae:	4299      	cmp	r1, r3
 8000db0:	f240 811c 	bls.w	8000fec <__udivmoddi4+0x298>
 8000db4:	3e02      	subs	r6, #2
 8000db6:	4463      	add	r3, ip
 8000db8:	1a5b      	subs	r3, r3, r1
 8000dba:	b2a4      	uxth	r4, r4
 8000dbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dc8:	fb00 f707 	mul.w	r7, r0, r7
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x92>
 8000dd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd8:	f080 810a 	bcs.w	8000ff0 <__udivmoddi4+0x29c>
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	f240 8107 	bls.w	8000ff0 <__udivmoddi4+0x29c>
 8000de2:	4464      	add	r4, ip
 8000de4:	3802      	subs	r0, #2
 8000de6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dea:	1be4      	subs	r4, r4, r7
 8000dec:	2600      	movs	r6, #0
 8000dee:	b11d      	cbz	r5, 8000df8 <__udivmoddi4+0xa4>
 8000df0:	40d4      	lsrs	r4, r2
 8000df2:	2300      	movs	r3, #0
 8000df4:	e9c5 4300 	strd	r4, r3, [r5]
 8000df8:	4631      	mov	r1, r6
 8000dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d909      	bls.n	8000e16 <__udivmoddi4+0xc2>
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	f000 80ef 	beq.w	8000fe6 <__udivmoddi4+0x292>
 8000e08:	2600      	movs	r6, #0
 8000e0a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e0e:	4630      	mov	r0, r6
 8000e10:	4631      	mov	r1, r6
 8000e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e16:	fab3 f683 	clz	r6, r3
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	d14a      	bne.n	8000eb4 <__udivmoddi4+0x160>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d302      	bcc.n	8000e28 <__udivmoddi4+0xd4>
 8000e22:	4282      	cmp	r2, r0
 8000e24:	f200 80f9 	bhi.w	800101a <__udivmoddi4+0x2c6>
 8000e28:	1a84      	subs	r4, r0, r2
 8000e2a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e2e:	2001      	movs	r0, #1
 8000e30:	469e      	mov	lr, r3
 8000e32:	2d00      	cmp	r5, #0
 8000e34:	d0e0      	beq.n	8000df8 <__udivmoddi4+0xa4>
 8000e36:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e3a:	e7dd      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000e3c:	b902      	cbnz	r2, 8000e40 <__udivmoddi4+0xec>
 8000e3e:	deff      	udf	#255	; 0xff
 8000e40:	fab2 f282 	clz	r2, r2
 8000e44:	2a00      	cmp	r2, #0
 8000e46:	f040 8092 	bne.w	8000f6e <__udivmoddi4+0x21a>
 8000e4a:	eba1 010c 	sub.w	r1, r1, ip
 8000e4e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	2601      	movs	r6, #1
 8000e58:	0c20      	lsrs	r0, r4, #16
 8000e5a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e5e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e62:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e66:	fb0e f003 	mul.w	r0, lr, r3
 8000e6a:	4288      	cmp	r0, r1
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x12c>
 8000e6e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e72:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x12a>
 8000e78:	4288      	cmp	r0, r1
 8000e7a:	f200 80cb 	bhi.w	8001014 <__udivmoddi4+0x2c0>
 8000e7e:	4643      	mov	r3, r8
 8000e80:	1a09      	subs	r1, r1, r0
 8000e82:	b2a4      	uxth	r4, r4
 8000e84:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e88:	fb07 1110 	mls	r1, r7, r0, r1
 8000e8c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e90:	fb0e fe00 	mul.w	lr, lr, r0
 8000e94:	45a6      	cmp	lr, r4
 8000e96:	d908      	bls.n	8000eaa <__udivmoddi4+0x156>
 8000e98:	eb1c 0404 	adds.w	r4, ip, r4
 8000e9c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ea0:	d202      	bcs.n	8000ea8 <__udivmoddi4+0x154>
 8000ea2:	45a6      	cmp	lr, r4
 8000ea4:	f200 80bb 	bhi.w	800101e <__udivmoddi4+0x2ca>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	eba4 040e 	sub.w	r4, r4, lr
 8000eae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000eb2:	e79c      	b.n	8000dee <__udivmoddi4+0x9a>
 8000eb4:	f1c6 0720 	rsb	r7, r6, #32
 8000eb8:	40b3      	lsls	r3, r6
 8000eba:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ebe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ec2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ec6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eca:	431c      	orrs	r4, r3
 8000ecc:	40f9      	lsrs	r1, r7
 8000ece:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ed6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eda:	0c20      	lsrs	r0, r4, #16
 8000edc:	fa1f fe8c 	uxth.w	lr, ip
 8000ee0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ee4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ee8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eec:	4288      	cmp	r0, r1
 8000eee:	fa02 f206 	lsl.w	r2, r2, r6
 8000ef2:	d90b      	bls.n	8000f0c <__udivmoddi4+0x1b8>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000efc:	f080 8088 	bcs.w	8001010 <__udivmoddi4+0x2bc>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f240 8085 	bls.w	8001010 <__udivmoddi4+0x2bc>
 8000f06:	f1a8 0802 	sub.w	r8, r8, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	1a09      	subs	r1, r1, r0
 8000f0e:	b2a4      	uxth	r4, r4
 8000f10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f14:	fb09 1110 	mls	r1, r9, r0, r1
 8000f18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f20:	458e      	cmp	lr, r1
 8000f22:	d908      	bls.n	8000f36 <__udivmoddi4+0x1e2>
 8000f24:	eb1c 0101 	adds.w	r1, ip, r1
 8000f28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f2c:	d26c      	bcs.n	8001008 <__udivmoddi4+0x2b4>
 8000f2e:	458e      	cmp	lr, r1
 8000f30:	d96a      	bls.n	8001008 <__udivmoddi4+0x2b4>
 8000f32:	3802      	subs	r0, #2
 8000f34:	4461      	add	r1, ip
 8000f36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f3e:	eba1 010e 	sub.w	r1, r1, lr
 8000f42:	42a1      	cmp	r1, r4
 8000f44:	46c8      	mov	r8, r9
 8000f46:	46a6      	mov	lr, r4
 8000f48:	d356      	bcc.n	8000ff8 <__udivmoddi4+0x2a4>
 8000f4a:	d053      	beq.n	8000ff4 <__udivmoddi4+0x2a0>
 8000f4c:	b15d      	cbz	r5, 8000f66 <__udivmoddi4+0x212>
 8000f4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f52:	eb61 010e 	sbc.w	r1, r1, lr
 8000f56:	fa01 f707 	lsl.w	r7, r1, r7
 8000f5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f5e:	40f1      	lsrs	r1, r6
 8000f60:	431f      	orrs	r7, r3
 8000f62:	e9c5 7100 	strd	r7, r1, [r5]
 8000f66:	2600      	movs	r6, #0
 8000f68:	4631      	mov	r1, r6
 8000f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f6e:	f1c2 0320 	rsb	r3, r2, #32
 8000f72:	40d8      	lsrs	r0, r3
 8000f74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f78:	fa21 f303 	lsr.w	r3, r1, r3
 8000f7c:	4091      	lsls	r1, r2
 8000f7e:	4301      	orrs	r1, r0
 8000f80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f84:	fa1f fe8c 	uxth.w	lr, ip
 8000f88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f90:	0c0b      	lsrs	r3, r1, #16
 8000f92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f96:	fb00 f60e 	mul.w	r6, r0, lr
 8000f9a:	429e      	cmp	r6, r3
 8000f9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000fa0:	d908      	bls.n	8000fb4 <__udivmoddi4+0x260>
 8000fa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000faa:	d22f      	bcs.n	800100c <__udivmoddi4+0x2b8>
 8000fac:	429e      	cmp	r6, r3
 8000fae:	d92d      	bls.n	800100c <__udivmoddi4+0x2b8>
 8000fb0:	3802      	subs	r0, #2
 8000fb2:	4463      	add	r3, ip
 8000fb4:	1b9b      	subs	r3, r3, r6
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fbc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fc0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fc4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fc8:	428b      	cmp	r3, r1
 8000fca:	d908      	bls.n	8000fde <__udivmoddi4+0x28a>
 8000fcc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fd0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fd4:	d216      	bcs.n	8001004 <__udivmoddi4+0x2b0>
 8000fd6:	428b      	cmp	r3, r1
 8000fd8:	d914      	bls.n	8001004 <__udivmoddi4+0x2b0>
 8000fda:	3e02      	subs	r6, #2
 8000fdc:	4461      	add	r1, ip
 8000fde:	1ac9      	subs	r1, r1, r3
 8000fe0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fe4:	e738      	b.n	8000e58 <__udivmoddi4+0x104>
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e705      	b.n	8000df8 <__udivmoddi4+0xa4>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e3      	b.n	8000db8 <__udivmoddi4+0x64>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6f8      	b.n	8000de6 <__udivmoddi4+0x92>
 8000ff4:	454b      	cmp	r3, r9
 8000ff6:	d2a9      	bcs.n	8000f4c <__udivmoddi4+0x1f8>
 8000ff8:	ebb9 0802 	subs.w	r8, r9, r2
 8000ffc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001000:	3801      	subs	r0, #1
 8001002:	e7a3      	b.n	8000f4c <__udivmoddi4+0x1f8>
 8001004:	4646      	mov	r6, r8
 8001006:	e7ea      	b.n	8000fde <__udivmoddi4+0x28a>
 8001008:	4620      	mov	r0, r4
 800100a:	e794      	b.n	8000f36 <__udivmoddi4+0x1e2>
 800100c:	4640      	mov	r0, r8
 800100e:	e7d1      	b.n	8000fb4 <__udivmoddi4+0x260>
 8001010:	46d0      	mov	r8, sl
 8001012:	e77b      	b.n	8000f0c <__udivmoddi4+0x1b8>
 8001014:	3b02      	subs	r3, #2
 8001016:	4461      	add	r1, ip
 8001018:	e732      	b.n	8000e80 <__udivmoddi4+0x12c>
 800101a:	4630      	mov	r0, r6
 800101c:	e709      	b.n	8000e32 <__udivmoddi4+0xde>
 800101e:	4464      	add	r4, ip
 8001020:	3802      	subs	r0, #2
 8001022:	e742      	b.n	8000eaa <__udivmoddi4+0x156>

08001024 <__aeabi_idiv0>:
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b085      	sub	sp, #20
 800102c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 800102e:	4b4e      	ldr	r3, [pc, #312]	; (8001168 <main+0x140>)
 8001030:	4a4e      	ldr	r2, [pc, #312]	; (800116c <main+0x144>)
 8001032:	601a      	str	r2, [r3, #0]
  dev_ctx.read_reg = platform_read;
 8001034:	4b4c      	ldr	r3, [pc, #304]	; (8001168 <main+0x140>)
 8001036:	4a4e      	ldr	r2, [pc, #312]	; (8001170 <main+0x148>)
 8001038:	605a      	str	r2, [r3, #4]
  dev_ctx.handle = &SENSOR_BUS;
 800103a:	4b4b      	ldr	r3, [pc, #300]	; (8001168 <main+0x140>)
 800103c:	4a4d      	ldr	r2, [pc, #308]	; (8001174 <main+0x14c>)
 800103e:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001040:	f001 fba4 	bl	800278c <HAL_Init>

  /* USER CODE BEGIN Init */
  enum neai_state error_code = neai_anomalydetection_init();	// Anomaly Detection init
 8001044:	f00a fe92 	bl	800bd6c <neai_anomalydetection_init>
 8001048:	4603      	mov	r3, r0
 800104a:	70fb      	strb	r3, [r7, #3]
  if (error_code != NEAI_OK) {								// Checking NEAI error code
 800104c:	78fb      	ldrb	r3, [r7, #3]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d005      	beq.n	800105e <main+0x36>
	  printf("NEAI ERROR %d\r\n", error_code);
 8001052:	78fb      	ldrb	r3, [r7, #3]
 8001054:	4619      	mov	r1, r3
 8001056:	4848      	ldr	r0, [pc, #288]	; (8001178 <main+0x150>)
 8001058:	f00b fdc8 	bl	800cbec <iprintf>
 800105c:	e002      	b.n	8001064 <main+0x3c>
  } else {
	  printf("NEAI OK\r\n");
 800105e:	4847      	ldr	r0, [pc, #284]	; (800117c <main+0x154>)
 8001060:	f00b fe4a 	bl	800ccf8 <puts>
  }
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001064:	f000 f89c 	bl	80011a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001068:	f000 f976 	bl	8001358 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800106c:	f00a f85a 	bl	800b124 <MX_USB_DEVICE_Init>
  MX_SPI3_Init();
 8001070:	f000 f8e8 	bl	8001244 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001074:	f000 f924 	bl	80012c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Set SPI3 on TX/RX STMOD+ pins */
  HAL_GPIO_WritePin(GPIOG, SEL1_2_Pin, GPIO_PIN_SET);
 8001078:	2201      	movs	r2, #1
 800107a:	2101      	movs	r1, #1
 800107c:	4840      	ldr	r0, [pc, #256]	; (8001180 <main+0x158>)
 800107e:	f001 ff7b 	bl	8002f78 <HAL_GPIO_WritePin>

  /* Restore default configuration */
  ism330dhcx_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001082:	2101      	movs	r1, #1
 8001084:	4838      	ldr	r0, [pc, #224]	; (8001168 <main+0x140>)
 8001086:	f001 fa24 	bl	80024d2 <ism330dhcx_reset_set>
  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 800108a:	2064      	movs	r0, #100	; 0x64
 800108c:	f000 fcd8 	bl	8001a40 <platform_delay>

  do {
	  /* Restore default configuration */
      ism330dhcx_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8001090:	2101      	movs	r1, #1
 8001092:	4835      	ldr	r0, [pc, #212]	; (8001168 <main+0x140>)
 8001094:	f001 fa1d 	bl	80024d2 <ism330dhcx_reset_set>
      /* Wait sensor boot time */
      platform_delay(BOOT_TIME);
 8001098:	2064      	movs	r0, #100	; 0x64
 800109a:	f000 fcd1 	bl	8001a40 <platform_delay>
      /* Check device ID */
      ism330dhcx_device_id_get(&dev_ctx, &whoamI);
 800109e:	4939      	ldr	r1, [pc, #228]	; (8001184 <main+0x15c>)
 80010a0:	4831      	ldr	r0, [pc, #196]	; (8001168 <main+0x140>)
 80010a2:	f001 fa05 	bl	80024b0 <ism330dhcx_device_id_get>
  }
  while (whoamI != ISM330DHCX_ID);
 80010a6:	4b37      	ldr	r3, [pc, #220]	; (8001184 <main+0x15c>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b6b      	cmp	r3, #107	; 0x6b
 80010ac:	d1f0      	bne.n	8001090 <main+0x68>

  do {
	  /* Check sensor reset */
      ism330dhcx_reset_get(&dev_ctx, &rst);
 80010ae:	4936      	ldr	r1, [pc, #216]	; (8001188 <main+0x160>)
 80010b0:	482d      	ldr	r0, [pc, #180]	; (8001168 <main+0x140>)
 80010b2:	f001 fa34 	bl	800251e <ism330dhcx_reset_get>
  }
  while (rst);
 80010b6:	4b34      	ldr	r3, [pc, #208]	; (8001188 <main+0x160>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d1f7      	bne.n	80010ae <main+0x86>

  /* Start device configuration. */
  ism330dhcx_device_conf_set(&dev_ctx, PROPERTY_ENABLE);
 80010be:	2101      	movs	r1, #1
 80010c0:	4829      	ldr	r0, [pc, #164]	; (8001168 <main+0x140>)
 80010c2:	f001 f9a9 	bl	8002418 <ism330dhcx_device_conf_set>
  /* Enable Block Data Update */
  ism330dhcx_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 80010c6:	2101      	movs	r1, #1
 80010c8:	4827      	ldr	r0, [pc, #156]	; (8001168 <main+0x140>)
 80010ca:	f001 f91b 	bl	8002304 <ism330dhcx_block_data_update_set>
  /* Set Output Data Rate */
  ism330dhcx_xl_data_rate_set(&dev_ctx, ISM330DHCX_XL_ODR_833Hz);
 80010ce:	2107      	movs	r1, #7
 80010d0:	4825      	ldr	r0, [pc, #148]	; (8001168 <main+0x140>)
 80010d2:	f000 ffa7 	bl	8002024 <ism330dhcx_xl_data_rate_set>
  /* Set full scale */
  ism330dhcx_xl_full_scale_set(&dev_ctx, ISM330DHCX_2g);
 80010d6:	2100      	movs	r1, #0
 80010d8:	4823      	ldr	r0, [pc, #140]	; (8001168 <main+0x140>)
 80010da:	f000 ff7d 	bl	8001fd8 <ism330dhcx_xl_full_scale_set>
  /* Configure filtering chain(No aux interface)
   *
   * Accelerometer - LPF1 + LPF2 path
   */
  //ism330dhcx_xl_hp_path_on_out_set(&dev_ctx, ISM330DHCX_LP_ODR_DIV_100);
  ism330dhcx_xl_hp_path_on_out_set(&dev_ctx, ISM330DHCX_HP_PATH_DISABLE_ON_OUT);
 80010de:	2100      	movs	r1, #0
 80010e0:	4821      	ldr	r0, [pc, #132]	; (8001168 <main+0x140>)
 80010e2:	f001 fa35 	bl	8002550 <ism330dhcx_xl_hp_path_on_out_set>
  //ism330dhcx_xl_filter_lp2_set(&dev_ctx, PROPERTY_ENABLE);

  /* Fill accelerometer buffer */
  HAL_UART_TxCpltCallback(&huart2);
 80010e6:	4829      	ldr	r0, [pc, #164]	; (800118c <main+0x164>)
 80010e8:	f000 fcb6 	bl	8001a58 <HAL_UART_TxCpltCallback>
    		/* Print the whole buffer to the serial over usb_cdc */
    		tx_com((uint8_t *)input_user_buffer_uint8, strlen((char const *)input_user_buffer_uint8));
    	}
    	else {
    		/* Formatting the whole buffer to be sent through uart */
        	for(uint32_t buf_index = 0 ; buf_index < DATA_INPUT_USER * AXIS_NUMBER ; buf_index++) {
 80010ec:	2300      	movs	r3, #0
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	e022      	b.n	8001138 <main+0x110>
        		snprintf(input_user_buffer_uint8 + 7*buf_index, 7, "%.4f", input_user_buffer[buf_index]);
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	4613      	mov	r3, r2
 80010f6:	00db      	lsls	r3, r3, #3
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	4a25      	ldr	r2, [pc, #148]	; (8001190 <main+0x168>)
 80010fc:	189c      	adds	r4, r3, r2
 80010fe:	4a25      	ldr	r2, [pc, #148]	; (8001194 <main+0x16c>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa35 	bl	8000578 <__aeabi_f2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	e9cd 2300 	strd	r2, r3, [sp]
 8001116:	4a20      	ldr	r2, [pc, #128]	; (8001198 <main+0x170>)
 8001118:	2107      	movs	r1, #7
 800111a:	4620      	mov	r0, r4
 800111c:	f00b fdfa 	bl	800cd14 <sniprintf>
        		*(input_user_buffer_uint8 + 7*buf_index + 6) = ' ';
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	3306      	adds	r3, #6
 800112a:	4a19      	ldr	r2, [pc, #100]	; (8001190 <main+0x168>)
 800112c:	4413      	add	r3, r2
 800112e:	2220      	movs	r2, #32
 8001130:	701a      	strb	r2, [r3, #0]
        	for(uint32_t buf_index = 0 ; buf_index < DATA_INPUT_USER * AXIS_NUMBER ; buf_index++) {
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3301      	adds	r3, #1
 8001136:	607b      	str	r3, [r7, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800113e:	d3d8      	bcc.n	80010f2 <main+0xca>
        	}
        	*(input_user_buffer_uint8 + 7*(DATA_INPUT_USER * AXIS_NUMBER)) = '\n';
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <main+0x168>)
 8001142:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001146:	220a      	movs	r2, #10
 8001148:	f883 2500 	strb.w	r2, [r3, #1280]	; 0x500
        	/* Print the whole buffer to the serial */
        	HAL_UART_Transmit_IT(&huart2, (uint8_t *)input_user_buffer_uint8, sizeof(input_user_buffer_uint8));
 800114c:	f241 5201 	movw	r2, #5377	; 0x1501
 8001150:	490f      	ldr	r1, [pc, #60]	; (8001190 <main+0x168>)
 8001152:	480e      	ldr	r0, [pc, #56]	; (800118c <main+0x164>)
 8001154:	f005 fce4 	bl	8006b20 <HAL_UART_Transmit_IT>
    	}
		signals++;
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <main+0x174>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	3301      	adds	r3, #1
 800115e:	b2da      	uxtb	r2, r3
 8001160:	4b0e      	ldr	r3, [pc, #56]	; (800119c <main+0x174>)
 8001162:	701a      	strb	r2, [r3, #0]
    if (NEAI_MODE) {
 8001164:	e7c2      	b.n	80010ec <main+0xc4>
 8001166:	bf00      	nop
 8001168:	2000096c 	.word	0x2000096c
 800116c:	08001985 	.word	0x08001985
 8001170:	080019dd 	.word	0x080019dd
 8001174:	20000878 	.word	0x20000878
 8001178:	08010958 	.word	0x08010958
 800117c:	08010968 	.word	0x08010968
 8001180:	48001800 	.word	0x48001800
 8001184:	2000097e 	.word	0x2000097e
 8001188:	2000097f 	.word	0x2000097f
 800118c:	200008dc 	.word	0x200008dc
 8001190:	20001580 	.word	0x20001580
 8001194:	20000980 	.word	0x20000980
 8001198:	08010974 	.word	0x08010974
 800119c:	20002a81 	.word	0x20002a81

080011a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b096      	sub	sp, #88	; 0x58
 80011a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a6:	f107 0314 	add.w	r3, r7, #20
 80011aa:	2244      	movs	r2, #68	; 0x44
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f00a fe9a 	bl	800bee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b4:	463b      	mov	r3, r7
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
 80011c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80011c2:	2000      	movs	r0, #0
 80011c4:	f002 ffa4 	bl	8004110 <HAL_PWREx_ControlVoltageScaling>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80011ce:	f000 fca7 	bl	8001b20 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80011d2:	2322      	movs	r3, #34	; 0x22
 80011d4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e0:	2340      	movs	r3, #64	; 0x40
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e4:	2302      	movs	r3, #2
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e8:	2302      	movs	r3, #2
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 30;
 80011f0:	231e      	movs	r3, #30
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f4:	2302      	movs	r3, #2
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011f8:	2302      	movs	r3, #2
 80011fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4618      	mov	r0, r3
 8001206:	f003 f847 	bl	8004298 <HAL_RCC_OscConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001210:	f000 fc86 	bl	8001b20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001214:	230f      	movs	r3, #15
 8001216:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001218:	2303      	movs	r3, #3
 800121a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800121c:	2300      	movs	r3, #0
 800121e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001220:	2300      	movs	r3, #0
 8001222:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001228:	463b      	mov	r3, r7
 800122a:	2105      	movs	r1, #5
 800122c:	4618      	mov	r0, r3
 800122e:	f003 fc59 	bl	8004ae4 <HAL_RCC_ClockConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001238:	f000 fc72 	bl	8001b20 <Error_Handler>
  }
}
 800123c:	bf00      	nop
 800123e:	3758      	adds	r7, #88	; 0x58
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}

08001244 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <MX_SPI3_Init+0x74>)
 800124a:	4a1c      	ldr	r2, [pc, #112]	; (80012bc <MX_SPI3_Init+0x78>)
 800124c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_SPI3_Init+0x74>)
 8001250:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001254:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001256:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_SPI3_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800125c:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <MX_SPI3_Init+0x74>)
 800125e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001262:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001264:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <MX_SPI3_Init+0x74>)
 8001266:	2202      	movs	r2, #2
 8001268:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800126a:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <MX_SPI3_Init+0x74>)
 800126c:	2201      	movs	r2, #1
 800126e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_SPI3_Init+0x74>)
 8001272:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001276:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <MX_SPI3_Init+0x74>)
 800127a:	2218      	movs	r2, #24
 800127c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_SPI3_Init+0x74>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_SPI3_Init+0x74>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_SPI3_Init+0x74>)
 800128c:	2200      	movs	r2, #0
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_SPI3_Init+0x74>)
 8001292:	2207      	movs	r2, #7
 8001294:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_SPI3_Init+0x74>)
 8001298:	2200      	movs	r2, #0
 800129a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_SPI3_Init+0x74>)
 800129e:	2200      	movs	r2, #0
 80012a0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_SPI3_Init+0x74>)
 80012a4:	f004 fc44 	bl	8005b30 <HAL_SPI_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80012ae:	f000 fc37 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000878 	.word	0x20000878
 80012bc:	40003c00 	.word	0x40003c00

080012c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012c6:	4a23      	ldr	r2, [pc, #140]	; (8001354 <MX_USART2_UART_Init+0x94>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b21      	ldr	r3, [pc, #132]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f6:	4b16      	ldr	r3, [pc, #88]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <MX_USART2_UART_Init+0x90>)
 80012fe:	2200      	movs	r2, #0
 8001300:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001302:	4b13      	ldr	r3, [pc, #76]	; (8001350 <MX_USART2_UART_Init+0x90>)
 8001304:	2200      	movs	r2, #0
 8001306:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001308:	4811      	ldr	r0, [pc, #68]	; (8001350 <MX_USART2_UART_Init+0x90>)
 800130a:	f005 fb21 	bl	8006950 <HAL_UART_Init>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001314:	f000 fc04 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001318:	2100      	movs	r1, #0
 800131a:	480d      	ldr	r0, [pc, #52]	; (8001350 <MX_USART2_UART_Init+0x90>)
 800131c:	f006 ff29 	bl	8008172 <HAL_UARTEx_SetTxFifoThreshold>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001326:	f000 fbfb 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4808      	ldr	r0, [pc, #32]	; (8001350 <MX_USART2_UART_Init+0x90>)
 800132e:	f006 ff5e 	bl	80081ee <HAL_UARTEx_SetRxFifoThreshold>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001338:	f000 fbf2 	bl	8001b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800133c:	4804      	ldr	r0, [pc, #16]	; (8001350 <MX_USART2_UART_Init+0x90>)
 800133e:	f006 fedf 	bl	8008100 <HAL_UARTEx_DisableFifoMode>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001348:	f000 fbea 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	200008dc 	.word	0x200008dc
 8001354:	40004400 	.word	0x40004400

08001358 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b08e      	sub	sp, #56	; 0x38
 800135c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	605a      	str	r2, [r3, #4]
 8001368:	609a      	str	r2, [r3, #8]
 800136a:	60da      	str	r2, [r3, #12]
 800136c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800136e:	4bb8      	ldr	r3, [pc, #736]	; (8001650 <MX_GPIO_Init+0x2f8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4ab7      	ldr	r2, [pc, #732]	; (8001650 <MX_GPIO_Init+0x2f8>)
 8001374:	f043 0310 	orr.w	r3, r3, #16
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4bb5      	ldr	r3, [pc, #724]	; (8001650 <MX_GPIO_Init+0x2f8>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	623b      	str	r3, [r7, #32]
 8001384:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	4bb2      	ldr	r3, [pc, #712]	; (8001650 <MX_GPIO_Init+0x2f8>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138a:	4ab1      	ldr	r2, [pc, #708]	; (8001650 <MX_GPIO_Init+0x2f8>)
 800138c:	f043 0302 	orr.w	r3, r3, #2
 8001390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001392:	4baf      	ldr	r3, [pc, #700]	; (8001650 <MX_GPIO_Init+0x2f8>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001396:	f003 0302 	and.w	r3, r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
 800139c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800139e:	4bac      	ldr	r3, [pc, #688]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a2:	4aab      	ldr	r2, [pc, #684]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013aa:	4ba9      	ldr	r3, [pc, #676]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b2:	61bb      	str	r3, [r7, #24]
 80013b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013b6:	4ba6      	ldr	r3, [pc, #664]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ba:	4aa5      	ldr	r2, [pc, #660]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013bc:	f043 0304 	orr.w	r3, r3, #4
 80013c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c2:	4ba3      	ldr	r3, [pc, #652]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	f003 0304 	and.w	r3, r3, #4
 80013ca:	617b      	str	r3, [r7, #20]
 80013cc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ce:	4ba0      	ldr	r3, [pc, #640]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	4a9f      	ldr	r2, [pc, #636]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013da:	4b9d      	ldr	r3, [pc, #628]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	613b      	str	r3, [r7, #16]
 80013e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013e6:	4b9a      	ldr	r3, [pc, #616]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ea:	4a99      	ldr	r2, [pc, #612]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013ec:	f043 0308 	orr.w	r3, r3, #8
 80013f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013f2:	4b97      	ldr	r3, [pc, #604]	; (8001650 <MX_GPIO_Init+0x2f8>)
 80013f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80013fe:	4b94      	ldr	r3, [pc, #592]	; (8001650 <MX_GPIO_Init+0x2f8>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a93      	ldr	r2, [pc, #588]	; (8001650 <MX_GPIO_Init+0x2f8>)
 8001404:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b91      	ldr	r3, [pc, #580]	; (8001650 <MX_GPIO_Init+0x2f8>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 8001416:	f002 ff2f 	bl	8004278 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800141a:	4b8d      	ldr	r3, [pc, #564]	; (8001650 <MX_GPIO_Init+0x2f8>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a8c      	ldr	r2, [pc, #560]	; (8001650 <MX_GPIO_Init+0x2f8>)
 8001420:	f043 0320 	orr.w	r3, r3, #32
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b8a      	ldr	r3, [pc, #552]	; (8001650 <MX_GPIO_Init+0x2f8>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0320 	and.w	r3, r3, #32
 800142e:	607b      	str	r3, [r7, #4]
 8001430:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|DCDC_2_EN_Pin, GPIO_PIN_RESET);
 8001432:	2200      	movs	r2, #0
 8001434:	f242 0102 	movw	r1, #8194	; 0x2002
 8001438:	4886      	ldr	r0, [pc, #536]	; (8001654 <MX_GPIO_Init+0x2fc>)
 800143a:	f001 fd9d 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED2_Pin|WIFI_WAKEUP_Pin|EX_RESET_Pin, GPIO_PIN_RESET);
 800143e:	2200      	movs	r2, #0
 8001440:	f640 0181 	movw	r1, #2177	; 0x881
 8001444:	4884      	ldr	r0, [pc, #528]	; (8001658 <MX_GPIO_Init+0x300>)
 8001446:	f001 fd97 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_RST_GPIO_Port, BLE_RST_Pin, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001454:	f001 fd90 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WIFI_RST_GPIO_Port, WIFI_RST_Pin, GPIO_PIN_RESET);
 8001458:	2200      	movs	r2, #0
 800145a:	2140      	movs	r1, #64	; 0x40
 800145c:	487f      	ldr	r0, [pc, #508]	; (800165c <MX_GPIO_Init+0x304>)
 800145e:	f001 fd8b 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CS_WIFI_Pin|CS_ADWB_Pin|CS_DHC_Pin, GPIO_PIN_SET);
 8001462:	2201      	movs	r2, #1
 8001464:	f242 0128 	movw	r1, #8232	; 0x2028
 8001468:	487d      	ldr	r0, [pc, #500]	; (8001660 <MX_GPIO_Init+0x308>)
 800146a:	f001 fd85 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, C_EN_Pin|STSAFE_RESET_Pin|WIFI_BOOT0_Pin|SEL3_4_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 41aa 	mov.w	r1, #21760	; 0x5500
 8001474:	487a      	ldr	r0, [pc, #488]	; (8001660 <MX_GPIO_Init+0x308>)
 8001476:	f001 fd7f 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLE_SPI_CS_GPIO_Port, BLE_SPI_CS_Pin, GPIO_PIN_SET);
 800147a:	2201      	movs	r2, #1
 800147c:	2120      	movs	r1, #32
 800147e:	4879      	ldr	r0, [pc, #484]	; (8001664 <MX_GPIO_Init+0x30c>)
 8001480:	f001 fd7a 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_DH_GPIO_Port, CS_DH_Pin, GPIO_PIN_SET);
 8001484:	2201      	movs	r2, #1
 8001486:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148a:	4873      	ldr	r0, [pc, #460]	; (8001658 <MX_GPIO_Init+0x300>)
 800148c:	f001 fd74 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI2_MOSI_p2_Pin|PB11_Pin, GPIO_PIN_RESET);
 8001490:	2200      	movs	r2, #0
 8001492:	f44f 4108 	mov.w	r1, #34816	; 0x8800
 8001496:	4874      	ldr	r0, [pc, #464]	; (8001668 <MX_GPIO_Init+0x310>)
 8001498:	f001 fd6e 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEL1_2_GPIO_Port, SEL1_2_Pin, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2101      	movs	r1, #1
 80014a0:	4870      	ldr	r0, [pc, #448]	; (8001664 <MX_GPIO_Init+0x30c>)
 80014a2:	f001 fd69 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BOOT0_PE0_Pin BLE_TEST8_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0_Pin|BLE_TEST8_Pin;
 80014a6:	f240 4301 	movw	r3, #1025	; 0x401
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b8:	4619      	mov	r1, r3
 80014ba:	4866      	ldr	r0, [pc, #408]	; (8001654 <MX_GPIO_Init+0x2fc>)
 80014bc:	f001 fbca 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB9_Pin PB8_Pin PB14_Pin CHRGB0_Pin */
  GPIO_InitStruct.Pin = PB9_Pin|PB8_Pin|PB14_Pin|CHRGB0_Pin;
 80014c0:	f244 3301 	movw	r3, #17153	; 0x4301
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c6:	2303      	movs	r3, #3
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d2:	4619      	mov	r1, r3
 80014d4:	4864      	ldr	r0, [pc, #400]	; (8001668 <MX_GPIO_Init+0x310>)
 80014d6:	f001 fbbd 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT0_PE0H3_Pin */
  GPIO_InitStruct.Pin = BOOT0_PE0H3_Pin;
 80014da:	2308      	movs	r3, #8
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT0_PE0H3_GPIO_Port, &GPIO_InitStruct);
 80014e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ea:	4619      	mov	r1, r3
 80014ec:	485f      	ldr	r0, [pc, #380]	; (800166c <MX_GPIO_Init+0x314>)
 80014ee:	f001 fbb1 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDMMC_D3_Pin SDMMC_D2_Pin SDMMC_D1_Pin SDMMC_CK_Pin
                           SDMMC_D0_Pin */
  GPIO_InitStruct.Pin = SDMMC_D3_Pin|SDMMC_D2_Pin|SDMMC_D1_Pin|SDMMC_CK_Pin
 80014f2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
                          |SDMMC_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2302      	movs	r3, #2
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001500:	2303      	movs	r3, #3
 8001502:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001504:	230c      	movs	r3, #12
 8001506:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800150c:	4619      	mov	r1, r3
 800150e:	4853      	ldr	r0, [pc, #332]	; (800165c <MX_GPIO_Init+0x304>)
 8001510:	f001 fba0 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_TEST9_Pin WIFI_DRDY_Pin INT1_DHC_Pin INT_STT_Pin
                           INT1_ADWB_Pin */
  GPIO_InitStruct.Pin = BLE_TEST9_Pin|WIFI_DRDY_Pin|INT1_DHC_Pin|INT_STT_Pin
 8001514:	f64c 1308 	movw	r3, #51464	; 0xc908
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
                          |INT1_ADWB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800151a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800151e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	484a      	ldr	r0, [pc, #296]	; (8001654 <MX_GPIO_Init+0x2fc>)
 800152c:	f001 fb92 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CLK_Pin */
  GPIO_InitStruct.Pin = SPI2_CLK_Pin;
 8001530:	2302      	movs	r3, #2
 8001532:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001540:	2305      	movs	r3, #5
 8001542:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SPI2_CLK_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001548:	4619      	mov	r1, r3
 800154a:	4843      	ldr	r0, [pc, #268]	; (8001658 <MX_GPIO_Init+0x300>)
 800154c:	f001 fb82 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_PWM_Pin */
  GPIO_InitStruct.Pin = EX_PWM_Pin;
 8001550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001562:	2301      	movs	r3, #1
 8001564:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(EX_PWM_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f001 fb70 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SAI1_SCK_A_Pin SAI1_MCLK_A_Pin SAI1_FS_A_DFSDM_D3_Pin SAI1_SD_A_Pin
                           SAI1_SD_B_Pin */
  GPIO_InitStruct.Pin = SAI1_SCK_A_Pin|SAI1_MCLK_A_Pin|SAI1_FS_A_DFSDM_D3_Pin|SAI1_SD_A_Pin
 8001574:	23f4      	movs	r3, #244	; 0xf4
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
                          |SAI1_SD_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001584:	230d      	movs	r3, #13
 8001586:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001588:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158c:	4619      	mov	r1, r3
 800158e:	4831      	ldr	r0, [pc, #196]	; (8001654 <MX_GPIO_Init+0x2fc>)
 8001590:	f001 fb60 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin DCDC_2_EN_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|DCDC_2_EN_Pin;
 8001594:	f242 0302 	movw	r3, #8194	; 0x2002
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	4619      	mov	r1, r3
 80015ac:	4829      	ldr	r0, [pc, #164]	; (8001654 <MX_GPIO_Init+0x2fc>)
 80015ae:	f001 fb51 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin WIFI_WAKEUP_Pin CS_DH_Pin EX_RESET_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|WIFI_WAKEUP_Pin|CS_DH_Pin|EX_RESET_Pin;
 80015b2:	f648 0381 	movw	r3, #34945	; 0x8881
 80015b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b8:	2301      	movs	r3, #1
 80015ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c0:	2300      	movs	r3, #0
 80015c2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c8:	4619      	mov	r1, r3
 80015ca:	4823      	ldr	r0, [pc, #140]	; (8001658 <MX_GPIO_Init+0x300>)
 80015cc:	f001 fb42 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10_Pin PA9_Pin PA0_Pin DAC1_OUT1_Pin
                           PA1_Pin */
  GPIO_InitStruct.Pin = PA10_Pin|PA9_Pin|PA0_Pin|DAC1_OUT1_Pin
 80015d0:	f240 6313 	movw	r3, #1555	; 0x613
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |PA1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015d6:	2303      	movs	r3, #3
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e2:	4619      	mov	r1, r3
 80015e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e8:	f001 fb34 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN5_Pin DFSDM1_D7_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN5_Pin|DFSDM1_D7_Pin;
 80015ec:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80015f6:	2302      	movs	r3, #2
 80015f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80015fe:	2306      	movs	r3, #6
 8001600:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001602:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001606:	4619      	mov	r1, r3
 8001608:	4817      	ldr	r0, [pc, #92]	; (8001668 <MX_GPIO_Init+0x310>)
 800160a:	f001 fb23 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG12_Pin PG10_Pin PG9_Pin */
  GPIO_InitStruct.Pin = PG12_Pin|PG10_Pin|PG9_Pin;
 800160e:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
 8001612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001614:	2303      	movs	r3, #3
 8001616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800161c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001620:	4619      	mov	r1, r3
 8001622:	4810      	ldr	r0, [pc, #64]	; (8001664 <MX_GPIO_Init+0x30c>)
 8001624:	f001 fb16 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDMMC_CMD_Pin */
  GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8001628:	2304      	movs	r3, #4
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001638:	230c      	movs	r3, #12
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_GPIO_Init+0x300>)
 8001644:	f001 fb06 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_RST_Pin */
  GPIO_InitStruct.Pin = BLE_RST_Pin;
 8001648:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164c:	e010      	b.n	8001670 <MX_GPIO_Init+0x318>
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	48001000 	.word	0x48001000
 8001658:	48000c00 	.word	0x48000c00
 800165c:	48000800 	.word	0x48000800
 8001660:	48001400 	.word	0x48001400
 8001664:	48001800 	.word	0x48001800
 8001668:	48000400 	.word	0x48000400
 800166c:	48001c00 	.word	0x48001c00
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001672:	2301      	movs	r3, #1
 8001674:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800167a:	2300      	movs	r3, #0
 800167c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BLE_RST_GPIO_Port, &GPIO_InitStruct);
 800167e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001682:	4619      	mov	r1, r3
 8001684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001688:	f001 fae4 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : WIFI_RST_Pin */
  GPIO_InitStruct.Pin = WIFI_RST_Pin;
 800168c:	2340      	movs	r3, #64	; 0x40
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001690:	2301      	movs	r3, #1
 8001692:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	2300      	movs	r3, #0
 800169a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(WIFI_RST_GPIO_Port, &GPIO_InitStruct);
 800169c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a0:	4619      	mov	r1, r3
 80016a2:	48a7      	ldr	r0, [pc, #668]	; (8001940 <MX_GPIO_Init+0x5e8>)
 80016a4:	f001 fad6 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C2_SMBA_Pin I2C2_SDA_Pin I2C2_SDAF0_Pin */
  GPIO_InitStruct.Pin = I2C2_SMBA_Pin|I2C2_SDA_Pin|I2C2_SDAF0_Pin;
 80016a8:	2307      	movs	r3, #7
 80016aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ac:	2312      	movs	r3, #18
 80016ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b0:	2300      	movs	r3, #0
 80016b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016b4:	2303      	movs	r3, #3
 80016b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016b8:	2304      	movs	r3, #4
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c0:	4619      	mov	r1, r3
 80016c2:	48a0      	ldr	r0, [pc, #640]	; (8001944 <MX_GPIO_Init+0x5ec>)
 80016c4:	f001 fac6 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS_WIFI_Pin C_EN_Pin CS_ADWB_Pin STSAFE_RESET_Pin
                           WIFI_BOOT0_Pin SEL3_4_Pin */
  GPIO_InitStruct.Pin = CS_WIFI_Pin|C_EN_Pin|CS_ADWB_Pin|STSAFE_RESET_Pin
 80016c8:	f245 5328 	movw	r3, #21800	; 0x5528
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |WIFI_BOOT0_Pin|SEL3_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ce:	2301      	movs	r3, #1
 80016d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d6:	2300      	movs	r3, #0
 80016d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016de:	4619      	mov	r1, r3
 80016e0:	4898      	ldr	r0, [pc, #608]	; (8001944 <MX_GPIO_Init+0x5ec>)
 80016e2:	f001 fab7 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C3_SDA_Pin I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin|I2C3_SCL_Pin;
 80016e6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ec:	2312      	movs	r3, #18
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	2303      	movs	r3, #3
 80016f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80016f8:	2304      	movs	r3, #4
 80016fa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	4619      	mov	r1, r3
 8001702:	4891      	ldr	r0, [pc, #580]	; (8001948 <MX_GPIO_Init+0x5f0>)
 8001704:	f001 faa6 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW_SEL_Pin */
  GPIO_InitStruct.Pin = SW_SEL_Pin;
 8001708:	2340      	movs	r3, #64	; 0x40
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	2302      	movs	r3, #2
 800170e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001710:	2300      	movs	r3, #0
 8001712:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001714:	2302      	movs	r3, #2
 8001716:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001718:	2302      	movs	r3, #2
 800171a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(SW_SEL_GPIO_Port, &GPIO_InitStruct);
 800171c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001720:	4619      	mov	r1, r3
 8001722:	4888      	ldr	r0, [pc, #544]	; (8001944 <MX_GPIO_Init+0x5ec>)
 8001724:	f001 fa96 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_DHC_Pin PGOOD_Pin INT_M_Pin */
  GPIO_InitStruct.Pin = INT2_DHC_Pin|PGOOD_Pin|INT_M_Pin;
 8001728:	f44f 7324 	mov.w	r3, #656	; 0x290
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800172e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800173c:	4619      	mov	r1, r3
 800173e:	4881      	ldr	r0, [pc, #516]	; (8001944 <MX_GPIO_Init+0x5ec>)
 8001740:	f001 fa88 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_MISO_Pin SPI1_MOSI_Pin SPI1_CLK_Pin */
  GPIO_InitStruct.Pin = SPI1_MISO_Pin|SPI1_MOSI_Pin|SPI1_CLK_Pin;
 8001744:	231c      	movs	r3, #28
 8001746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001750:	2303      	movs	r3, #3
 8001752:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001754:	2305      	movs	r3, #5
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800175c:	4619      	mov	r1, r3
 800175e:	487a      	ldr	r0, [pc, #488]	; (8001948 <MX_GPIO_Init+0x5f0>)
 8001760:	f001 fa78 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : BLE_SPI_CS_Pin SEL1_2_Pin */
  GPIO_InitStruct.Pin = BLE_SPI_CS_Pin|SEL1_2_Pin;
 8001764:	2321      	movs	r3, #33	; 0x21
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001768:	2301      	movs	r3, #1
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001774:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001778:	4619      	mov	r1, r3
 800177a:	4873      	ldr	r0, [pc, #460]	; (8001948 <MX_GPIO_Init+0x5f0>)
 800177c:	f001 fa6a 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT_HTS_Pin BLE_INT_Pin */
  GPIO_InitStruct.Pin = INT_HTS_Pin|BLE_INT_Pin;
 8001780:	2342      	movs	r3, #66	; 0x42
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001784:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178a:	2300      	movs	r3, #0
 800178c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800178e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001792:	4619      	mov	r1, r3
 8001794:	486c      	ldr	r0, [pc, #432]	; (8001948 <MX_GPIO_Init+0x5f0>)
 8001796:	f001 fa5d 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2C4_SCL_Pin I2C4_SDA_Pin */
  GPIO_InitStruct.Pin = I2C4_SCL_Pin|I2C4_SDA_Pin;
 800179a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800179e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017a0:	2312      	movs	r3, #18
 80017a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017a4:	2300      	movs	r3, #0
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a8:	2303      	movs	r3, #3
 80017aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80017ac:	2304      	movs	r3, #4
 80017ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017b4:	4619      	mov	r1, r3
 80017b6:	4865      	ldr	r0, [pc, #404]	; (800194c <MX_GPIO_Init+0x5f4>)
 80017b8:	f001 fa4c 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADC1_IN1_Pin ADC1_IN2_Pin uC_ADC_BATT_Pin */
  GPIO_InitStruct.Pin = ADC1_IN1_Pin|ADC1_IN2_Pin|uC_ADC_BATT_Pin;
 80017bc:	2313      	movs	r3, #19
 80017be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017c0:	230b      	movs	r3, #11
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017cc:	4619      	mov	r1, r3
 80017ce:	485c      	ldr	r0, [pc, #368]	; (8001940 <MX_GPIO_Init+0x5e8>)
 80017d0:	f001 fa40 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MISO_Pin SPI2_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI2_MISO_Pin|SPI2_MOSI_Pin;
 80017d4:	230c      	movs	r3, #12
 80017d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017dc:	2300      	movs	r3, #0
 80017de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e0:	2303      	movs	r3, #3
 80017e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017e4:	2305      	movs	r3, #5
 80017e6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017ec:	4619      	mov	r1, r3
 80017ee:	4854      	ldr	r0, [pc, #336]	; (8001940 <MX_GPIO_Init+0x5e8>)
 80017f0:	f001 fa30 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT2_ADWB_Pin SD_DETECT_Pin */
  GPIO_InitStruct.Pin = INT2_ADWB_Pin|SD_DETECT_Pin;
 80017f4:	f241 0304 	movw	r3, #4100	; 0x1004
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fa:	2300      	movs	r3, #0
 80017fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001806:	4619      	mov	r1, r3
 8001808:	4851      	ldr	r0, [pc, #324]	; (8001950 <MX_GPIO_Init+0x5f8>)
 800180a:	f001 fa23 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 800180e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 800181c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001820:	4619      	mov	r1, r3
 8001822:	4848      	ldr	r0, [pc, #288]	; (8001944 <MX_GPIO_Init+0x5ec>)
 8001824:	f001 fa16 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_PWR_Pin */
  GPIO_InitStruct.Pin = BUTTON_PWR_Pin;
 8001828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800182c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800182e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001832:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BUTTON_PWR_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800183c:	4619      	mov	r1, r3
 800183e:	4843      	ldr	r0, [pc, #268]	; (800194c <MX_GPIO_Init+0x5f4>)
 8001840:	f001 fa08 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RX_Pin USART3_TX_Pin */
  GPIO_InitStruct.Pin = USART3_RX_Pin|USART3_TX_Pin;
 8001844:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001856:	2307      	movs	r3, #7
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800185a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800185e:	4619      	mov	r1, r3
 8001860:	483a      	ldr	r0, [pc, #232]	; (800194c <MX_GPIO_Init+0x5f4>)
 8001862:	f001 f9f7 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART3_RTS_Pin USART3_CTS_Pin */
  GPIO_InitStruct.Pin = USART3_RTS_Pin|USART3_CTS_Pin;
 8001866:	f242 0302 	movw	r3, #8194	; 0x2002
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	2302      	movs	r3, #2
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001874:	2303      	movs	r3, #3
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001878:	2307      	movs	r3, #7
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001880:	4619      	mov	r1, r3
 8001882:	4833      	ldr	r0, [pc, #204]	; (8001950 <MX_GPIO_Init+0x5f8>)
 8001884:	f001 f9e6 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_DHC_Pin */
  GPIO_InitStruct.Pin = CS_DHC_Pin;
 8001888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188e:	2301      	movs	r3, #1
 8001890:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001896:	2302      	movs	r3, #2
 8001898:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(CS_DHC_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	4619      	mov	r1, r3
 80018a0:	4828      	ldr	r0, [pc, #160]	; (8001944 <MX_GPIO_Init+0x5ec>)
 80018a2:	f001 f9d7 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_CKOUT_Pin;
 80018a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018b0:	2302      	movs	r3, #2
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80018b8:	2306      	movs	r3, #6
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(DFSDM1_CKOUT_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018c0:	4619      	mov	r1, r3
 80018c2:	4824      	ldr	r0, [pc, #144]	; (8001954 <MX_GPIO_Init+0x5fc>)
 80018c4:	f001 f9c6 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI2_MOSI_p2_Pin PB11_Pin */
  GPIO_InitStruct.Pin = SPI2_MOSI_p2_Pin|PB11_Pin;
 80018c8:	f44f 4308 	mov.w	r3, #34816	; 0x8800
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ce:	2301      	movs	r3, #1
 80018d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018de:	4619      	mov	r1, r3
 80018e0:	481b      	ldr	r0, [pc, #108]	; (8001950 <MX_GPIO_Init+0x5f8>)
 80018e2:	f001 f9b7 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : INT2_DH_Pin */
  GPIO_InitStruct.Pin = INT2_DH_Pin;
 80018e6:	2304      	movs	r3, #4
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(INT2_DH_GPIO_Port, &GPIO_InitStruct);
 80018f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f8:	4619      	mov	r1, r3
 80018fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fe:	f001 f9a9 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : EX_ADC_Pin */
  GPIO_InitStruct.Pin = EX_ADC_Pin;
 8001902:	2320      	movs	r3, #32
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001906:	230b      	movs	r3, #11
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190a:	2300      	movs	r3, #0
 800190c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EX_ADC_GPIO_Port, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001918:	f001 f99c 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE12_Pin */
  GPIO_InitStruct.Pin = PE12_Pin;
 800191c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001920:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001922:	2303      	movs	r3, #3
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PE12_GPIO_Port, &GPIO_InitStruct);
 800192a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800192e:	4619      	mov	r1, r3
 8001930:	4808      	ldr	r0, [pc, #32]	; (8001954 <MX_GPIO_Init+0x5fc>)
 8001932:	f001 f98f 	bl	8002c54 <HAL_GPIO_Init>

}
 8001936:	bf00      	nop
 8001938:	3738      	adds	r7, #56	; 0x38
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	48000800 	.word	0x48000800
 8001944:	48001400 	.word	0x48001400
 8001948:	48001800 	.word	0x48001800
 800194c:	48000c00 	.word	0x48000c00
 8001950:	48000400 	.word	0x48000400
 8001954:	48001000 	.word	0x48001000

08001958 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* ----------- Redirecting stdout to UART2 -------------- */
int __io_putchar(int ch)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	b2db      	uxtb	r3, r3
 8001964:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 8001966:	f107 010c 	add.w	r1, r7, #12
 800196a:	230a      	movs	r3, #10
 800196c:	2201      	movs	r2, #1
 800196e:	4804      	ldr	r0, [pc, #16]	; (8001980 <__io_putchar+0x28>)
 8001970:	f005 f83e 	bl	80069f0 <HAL_UART_Transmit>
 return ch;
 8001974:	687b      	ldr	r3, [r7, #4]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200008dc 	.word	0x200008dc

08001984 <platform_write>:
 * @param  len       number of consecutive register to write
 *
 */
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	461a      	mov	r2, r3
 8001990:	460b      	mov	r3, r1
 8001992:	72fb      	strb	r3, [r7, #11]
 8001994:	4613      	mov	r3, r2
 8001996:	813b      	strh	r3, [r7, #8]
  HAL_GPIO_WritePin(CS_DHC_GPIO_Port, CS_DHC_Pin, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800199e:	480e      	ldr	r0, [pc, #56]	; (80019d8 <platform_write+0x54>)
 80019a0:	f001 faea 	bl	8002f78 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80019a4:	f107 010b 	add.w	r1, r7, #11
 80019a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ac:	2201      	movs	r2, #1
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f004 f961 	bl	8005c76 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 80019b4:	893a      	ldrh	r2, [r7, #8]
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	6879      	ldr	r1, [r7, #4]
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f004 f95a 	bl	8005c76 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(CS_DHC_GPIO_Port, CS_DHC_Pin, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019c8:	4803      	ldr	r0, [pc, #12]	; (80019d8 <platform_write+0x54>)
 80019ca:	f001 fad5 	bl	8002f78 <HAL_GPIO_WritePin>
  return 0;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	48001400 	.word	0x48001400

080019dc <platform_read>:
 * @param  len       number of consecutive register to read
 *
 */
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	607a      	str	r2, [r7, #4]
 80019e6:	461a      	mov	r2, r3
 80019e8:	460b      	mov	r3, r1
 80019ea:	72fb      	strb	r3, [r7, #11]
 80019ec:	4613      	mov	r3, r2
 80019ee:	813b      	strh	r3, [r7, #8]
  reg |= 0x80;
 80019f0:	7afb      	ldrb	r3, [r7, #11]
 80019f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	72fb      	strb	r3, [r7, #11]
  HAL_GPIO_WritePin(CS_DHC_GPIO_Port, CS_DHC_Pin, GPIO_PIN_RESET);
 80019fa:	2200      	movs	r2, #0
 80019fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a00:	480e      	ldr	r0, [pc, #56]	; (8001a3c <platform_read+0x60>)
 8001a02:	f001 fab9 	bl	8002f78 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8001a06:	f107 010b 	add.w	r1, r7, #11
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	2201      	movs	r2, #1
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f004 f930 	bl	8005c76 <HAL_SPI_Transmit>
  HAL_SPI_Receive(handle, bufp, len, 1000);
 8001a16:	893a      	ldrh	r2, [r7, #8]
 8001a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f004 fa97 	bl	8005f52 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(CS_DHC_GPIO_Port, CS_DHC_Pin, GPIO_PIN_SET);
 8001a24:	2201      	movs	r2, #1
 8001a26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a2a:	4804      	ldr	r0, [pc, #16]	; (8001a3c <platform_read+0x60>)
 8001a2c:	f001 faa4 	bl	8002f78 <HAL_GPIO_WritePin>
  return 0;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3710      	adds	r7, #16
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	48001400 	.word	0x48001400

08001a40 <platform_delay>:
 *
 * @param  ms        delay in ms
 *
 */
static void platform_delay(uint32_t ms)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 ff13 	bl	8002874 <HAL_Delay>
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a58:	b590      	push	{r4, r7, lr}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) {
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4a2b      	ldr	r2, [pc, #172]	; (8001b10 <HAL_UART_TxCpltCallback+0xb8>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d14f      	bne.n	8001b08 <HAL_UART_TxCpltCallback+0xb0>
		uint8_t reg;
		for (uint16_t samples = 0 ; samples < DATA_INPUT_USER; samples++) {
 8001a68:	2300      	movs	r3, #0
 8001a6a:	81fb      	strh	r3, [r7, #14]
 8001a6c:	e049      	b.n	8001b02 <HAL_UART_TxCpltCallback+0xaa>
			do {
				// Read output only if new xl value is available
				ism330dhcx_xl_flag_data_ready_get(&dev_ctx, &reg);
 8001a6e:	f107 030d 	add.w	r3, r7, #13
 8001a72:	4619      	mov	r1, r3
 8001a74:	4827      	ldr	r0, [pc, #156]	; (8001b14 <HAL_UART_TxCpltCallback+0xbc>)
 8001a76:	f000 fc6b 	bl	8002350 <ism330dhcx_xl_flag_data_ready_get>
			}
			while(!reg);
 8001a7a:	7b7b      	ldrb	r3, [r7, #13]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f6      	beq.n	8001a6e <HAL_UART_TxCpltCallback+0x16>
			// When data ready, read acceleration field data
			memset(data_raw_acceleration, 0x00, 3 * sizeof(int16_t));
 8001a80:	2206      	movs	r2, #6
 8001a82:	2100      	movs	r1, #0
 8001a84:	4824      	ldr	r0, [pc, #144]	; (8001b18 <HAL_UART_TxCpltCallback+0xc0>)
 8001a86:	f00a fa2f 	bl	800bee8 <memset>
			ism330dhcx_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 8001a8a:	4923      	ldr	r1, [pc, #140]	; (8001b18 <HAL_UART_TxCpltCallback+0xc0>)
 8001a8c:	4821      	ldr	r0, [pc, #132]	; (8001b14 <HAL_UART_TxCpltCallback+0xbc>)
 8001a8e:	f000 fc78 	bl	8002382 <ism330dhcx_acceleration_raw_get>
			// Fill buffer with accelerometer x, y & z values
			input_user_buffer[AXIS_NUMBER * samples] = ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[0]);
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_UART_TxCpltCallback+0xc0>)
 8001a94:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a98:	89fa      	ldrh	r2, [r7, #14]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	189c      	adds	r4, r3, r2
 8001aa0:	4608      	mov	r0, r1
 8001aa2:	f000 fa81 	bl	8001fa8 <ism330dhcx_from_fs2g_to_mg>
 8001aa6:	eef0 7a40 	vmov.f32	s15, s0
 8001aaa:	4a1c      	ldr	r2, [pc, #112]	; (8001b1c <HAL_UART_TxCpltCallback+0xc4>)
 8001aac:	00a3      	lsls	r3, r4, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	edc3 7a00 	vstr	s15, [r3]
			input_user_buffer[(AXIS_NUMBER * samples) + 1] = ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[1]);
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <HAL_UART_TxCpltCallback+0xc0>)
 8001ab6:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 8001aba:	89fa      	ldrh	r2, [r7, #14]
 8001abc:	4613      	mov	r3, r2
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4413      	add	r3, r2
 8001ac2:	1c5c      	adds	r4, r3, #1
 8001ac4:	4608      	mov	r0, r1
 8001ac6:	f000 fa6f 	bl	8001fa8 <ism330dhcx_from_fs2g_to_mg>
 8001aca:	eef0 7a40 	vmov.f32	s15, s0
 8001ace:	4a13      	ldr	r2, [pc, #76]	; (8001b1c <HAL_UART_TxCpltCallback+0xc4>)
 8001ad0:	00a3      	lsls	r3, r4, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	edc3 7a00 	vstr	s15, [r3]
			input_user_buffer[(AXIS_NUMBER * samples) + 2] = ism330dhcx_from_fs2g_to_mg(data_raw_acceleration[2]);
 8001ad8:	4b0f      	ldr	r3, [pc, #60]	; (8001b18 <HAL_UART_TxCpltCallback+0xc0>)
 8001ada:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8001ade:	89fa      	ldrh	r2, [r7, #14]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	4413      	add	r3, r2
 8001ae6:	1c9c      	adds	r4, r3, #2
 8001ae8:	4608      	mov	r0, r1
 8001aea:	f000 fa5d 	bl	8001fa8 <ism330dhcx_from_fs2g_to_mg>
 8001aee:	eef0 7a40 	vmov.f32	s15, s0
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_UART_TxCpltCallback+0xc4>)
 8001af4:	00a3      	lsls	r3, r4, #2
 8001af6:	4413      	add	r3, r2
 8001af8:	edc3 7a00 	vstr	s15, [r3]
		for (uint16_t samples = 0 ; samples < DATA_INPUT_USER; samples++) {
 8001afc:	89fb      	ldrh	r3, [r7, #14]
 8001afe:	3301      	adds	r3, #1
 8001b00:	81fb      	strh	r3, [r7, #14]
 8001b02:	89fb      	ldrh	r3, [r7, #14]
 8001b04:	2bff      	cmp	r3, #255	; 0xff
 8001b06:	d9b2      	bls.n	8001a6e <HAL_UART_TxCpltCallback+0x16>
		}
	}
}
 8001b08:	bf00      	nop
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd90      	pop	{r4, r7, pc}
 8001b10:	200008dc 	.word	0x200008dc
 8001b14:	2000096c 	.word	0x2000096c
 8001b18:	20000978 	.word	0x20000978
 8001b1c:	20000980 	.word	0x20000980

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	e7fe      	b.n	8001b28 <Error_Handler+0x8>
	...

08001b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b32:	4b0f      	ldr	r3, [pc, #60]	; (8001b70 <HAL_MspInit+0x44>)
 8001b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b36:	4a0e      	ldr	r2, [pc, #56]	; (8001b70 <HAL_MspInit+0x44>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8001b3e:	4b0c      	ldr	r3, [pc, #48]	; (8001b70 <HAL_MspInit+0x44>)
 8001b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	607b      	str	r3, [r7, #4]
 8001b48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b4a:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <HAL_MspInit+0x44>)
 8001b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4e:	4a08      	ldr	r2, [pc, #32]	; (8001b70 <HAL_MspInit+0x44>)
 8001b50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b54:	6593      	str	r3, [r2, #88]	; 0x58
 8001b56:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <HAL_MspInit+0x44>)
 8001b58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5e:	603b      	str	r3, [r7, #0]
 8001b60:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	40021000 	.word	0x40021000

08001b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a17      	ldr	r2, [pc, #92]	; (8001bf0 <HAL_SPI_MspInit+0x7c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d127      	bne.n	8001be6 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	4a16      	ldr	r2, [pc, #88]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001b9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ba2:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001baa:	613b      	str	r3, [r7, #16]
 8001bac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001bb4:	f043 0302 	orr.w	r3, r3, #2
 8001bb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_SPI_MspInit+0x80>)
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = SPI3_MISO_Pin|SPI3_MOSI_Pin|SPI3_CLK_Pin;
 8001bc6:	2338      	movs	r3, #56	; 0x38
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bd6:	2306      	movs	r3, #6
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_SPI_MspInit+0x84>)
 8001be2:	f001 f837 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40003c00 	.word	0x40003c00
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	48000400 	.word	0x48000400

08001bfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b0b0      	sub	sp, #192	; 0xc0
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c14:	f107 0310 	add.w	r3, r7, #16
 8001c18:	229c      	movs	r2, #156	; 0x9c
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f00a f963 	bl	800bee8 <memset>
  if(huart->Instance==USART2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a25      	ldr	r2, [pc, #148]	; (8001cbc <HAL_UART_MspInit+0xc0>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d142      	bne.n	8001cb2 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f003 fa01 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c44:	f7ff ff6c 	bl	8001b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <HAL_UART_MspInit+0xc4>)
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	4a1c      	ldr	r2, [pc, #112]	; (8001cc0 <HAL_UART_MspInit+0xc4>)
 8001c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c52:	6593      	str	r3, [r2, #88]	; 0x58
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_UART_MspInit+0xc4>)
 8001c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c5c:	60fb      	str	r3, [r7, #12]
 8001c5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c60:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <HAL_UART_MspInit+0xc4>)
 8001c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c64:	4a16      	ldr	r2, [pc, #88]	; (8001cc0 <HAL_UART_MspInit+0xc4>)
 8001c66:	f043 0308 	orr.w	r3, r3, #8
 8001c6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c6c:	4b14      	ldr	r3, [pc, #80]	; (8001cc0 <HAL_UART_MspInit+0xc4>)
 8001c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	60bb      	str	r3, [r7, #8]
 8001c76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PD6     ------> USART2_RX
    PD4     ------> USART2_RTS
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = USART2_RX_Pin|USART2_RTS_Pin|USART2_TX_Pin;
 8001c78:	2370      	movs	r3, #112	; 0x70
 8001c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c90:	2307      	movs	r3, #7
 8001c92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c96:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4809      	ldr	r0, [pc, #36]	; (8001cc4 <HAL_UART_MspInit+0xc8>)
 8001c9e:	f000 ffd9 	bl	8002c54 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2026      	movs	r0, #38	; 0x26
 8001ca8:	f000 fee3 	bl	8002a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cac:	2026      	movs	r0, #38	; 0x26
 8001cae:	f000 fefc 	bl	8002aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001cb2:	bf00      	nop
 8001cb4:	37c0      	adds	r7, #192	; 0xc0
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40004400 	.word	0x40004400
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	48000c00 	.word	0x48000c00

08001cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <NMI_Handler+0x4>

08001cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <HardFault_Handler+0x4>

08001cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <MemManage_Handler+0x4>

08001cda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cde:	e7fe      	b.n	8001cde <BusFault_Handler+0x4>

08001ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ce4:	e7fe      	b.n	8001ce4 <UsageFault_Handler+0x4>

08001ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d02:	b480      	push	{r7}
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d06:	bf00      	nop
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d14:	f000 fd8e 	bl	8002834 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d18:	bf00      	nop
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d20:	4802      	ldr	r0, [pc, #8]	; (8001d2c <USART2_IRQHandler+0x10>)
 8001d22:	f004 ffa5 	bl	8006c70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200008dc 	.word	0x200008dc

08001d30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <OTG_FS_IRQHandler+0x10>)
 8001d36:	f001 fa8a 	bl	800324e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20003f60 	.word	0x20003f60

08001d44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
	return 1;
 8001d48:	2301      	movs	r3, #1
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_kill>:

int _kill(int pid, int sig)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b082      	sub	sp, #8
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d5e:	f00a f88b 	bl	800be78 <__errno>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2216      	movs	r2, #22
 8001d66:	601a      	str	r2, [r3, #0]
	return -1;
 8001d68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <_exit>:

void _exit (int status)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f7ff ffe7 	bl	8001d54 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001d86:	e7fe      	b.n	8001d86 <_exit+0x12>

08001d88 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d94:	2300      	movs	r3, #0
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	e00a      	b.n	8001db0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d9a:	f3af 8000 	nop.w
 8001d9e:	4601      	mov	r1, r0
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	1c5a      	adds	r2, r3, #1
 8001da4:	60ba      	str	r2, [r7, #8]
 8001da6:	b2ca      	uxtb	r2, r1
 8001da8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	3301      	adds	r3, #1
 8001dae:	617b      	str	r3, [r7, #20]
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	dbf0      	blt.n	8001d9a <_read+0x12>
	}

return len;
 8001db8:	687b      	ldr	r3, [r7, #4]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3718      	adds	r7, #24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	60f8      	str	r0, [r7, #12]
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dce:	2300      	movs	r3, #0
 8001dd0:	617b      	str	r3, [r7, #20]
 8001dd2:	e009      	b.n	8001de8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	1c5a      	adds	r2, r3, #1
 8001dd8:	60ba      	str	r2, [r7, #8]
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff fdbb 	bl	8001958 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	3301      	adds	r3, #1
 8001de6:	617b      	str	r3, [r7, #20]
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	dbf1      	blt.n	8001dd4 <_write+0x12>
	}
	return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <_close>:

int _close(int file)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e22:	605a      	str	r2, [r3, #4]
	return 0;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	370c      	adds	r7, #12
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e30:	4770      	bx	lr

08001e32 <_isatty>:

int _isatty(int file)
{
 8001e32:	b480      	push	{r7}
 8001e34:	b083      	sub	sp, #12
 8001e36:	af00      	add	r7, sp, #0
 8001e38:	6078      	str	r0, [r7, #4]
	return 1;
 8001e3a:	2301      	movs	r3, #1
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
	return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3714      	adds	r7, #20
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d207      	bcs.n	8001ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e94:	f009 fff0 	bl	800be78 <__errno>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	220c      	movs	r2, #12
 8001e9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e009      	b.n	8001eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_sbrk+0x64>)
 8001eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	200a0000 	.word	0x200a0000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	20002a84 	.word	0x20002a84
 8001ecc:	20004598 	.word	0x20004598

08001ed0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001ed4:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <SystemInit+0x20>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	4a05      	ldr	r2, [pc, #20]	; (8001ef0 <SystemInit+0x20>)
 8001edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	e000ed00 	.word	0xe000ed00

08001ef4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ef4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ef8:	f7ff ffea 	bl	8001ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001efc:	480c      	ldr	r0, [pc, #48]	; (8001f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8001efe:	490d      	ldr	r1, [pc, #52]	; (8001f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f00:	4a0d      	ldr	r2, [pc, #52]	; (8001f38 <LoopForever+0xe>)
  movs r3, #0
 8001f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f04:	e002      	b.n	8001f0c <LoopCopyDataInit>

08001f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f0a:	3304      	adds	r3, #4

08001f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f10:	d3f9      	bcc.n	8001f06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f14:	4c0a      	ldr	r4, [pc, #40]	; (8001f40 <LoopForever+0x16>)
  movs r3, #0
 8001f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f18:	e001      	b.n	8001f1e <LoopFillZerobss>

08001f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f1c:	3204      	adds	r2, #4

08001f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f20:	d3fb      	bcc.n	8001f1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f22:	f009 ffaf 	bl	800be84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f26:	f7ff f87f 	bl	8001028 <main>

08001f2a <LoopForever>:

LoopForever:
    b LoopForever
 8001f2a:	e7fe      	b.n	8001f2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f2c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f34:	20000368 	.word	0x20000368
  ldr r2, =_sidata
 8001f38:	08010ef4 	.word	0x08010ef4
  ldr r2, =_sbss
 8001f3c:	2000085c 	.word	0x2000085c
  ldr r4, =_ebss
 8001f40:	20004598 	.word	0x20004598

08001f44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f44:	e7fe      	b.n	8001f44 <ADC1_IRQHandler>

08001f46 <ism330dhcx_read_reg>:
  *
  */
int32_t ism330dhcx_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                            uint8_t *data,
                            uint16_t len)
{
 8001f46:	b590      	push	{r4, r7, lr}
 8001f48:	b087      	sub	sp, #28
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	60f8      	str	r0, [r7, #12]
 8001f4e:	607a      	str	r2, [r7, #4]
 8001f50:	461a      	mov	r2, r3
 8001f52:	460b      	mov	r3, r1
 8001f54:	72fb      	strb	r3, [r7, #11]
 8001f56:	4613      	mov	r3, r2
 8001f58:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	685c      	ldr	r4, [r3, #4]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6898      	ldr	r0, [r3, #8]
 8001f62:	893b      	ldrh	r3, [r7, #8]
 8001f64:	7af9      	ldrb	r1, [r7, #11]
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	47a0      	blx	r4
 8001f6a:	6178      	str	r0, [r7, #20]

  return ret;
 8001f6c:	697b      	ldr	r3, [r7, #20]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	371c      	adds	r7, #28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}

08001f76 <ism330dhcx_write_reg>:
  *
  */
int32_t ism330dhcx_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                             uint8_t *data,
                             uint16_t len)
{
 8001f76:	b590      	push	{r4, r7, lr}
 8001f78:	b087      	sub	sp, #28
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	60f8      	str	r0, [r7, #12]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	461a      	mov	r2, r3
 8001f82:	460b      	mov	r3, r1
 8001f84:	72fb      	strb	r3, [r7, #11]
 8001f86:	4613      	mov	r3, r2
 8001f88:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681c      	ldr	r4, [r3, #0]
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6898      	ldr	r0, [r3, #8]
 8001f92:	893b      	ldrh	r3, [r7, #8]
 8001f94:	7af9      	ldrb	r1, [r7, #11]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	47a0      	blx	r4
 8001f9a:	6178      	str	r0, [r7, #20]

  return ret;
 8001f9c:	697b      	ldr	r3, [r7, #20]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	371c      	adds	r7, #28
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd90      	pop	{r4, r7, pc}
	...

08001fa8 <ism330dhcx_from_fs2g_to_mg>:
  * @{
  *
  */

float_t ism330dhcx_from_fs2g_to_mg(int16_t lsb)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	4603      	mov	r3, r0
 8001fb0:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8001fb2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fb6:	ee07 3a90 	vmov	s15, r3
 8001fba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fbe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8001fd4 <ism330dhcx_from_fs2g_to_mg+0x2c>
 8001fc2:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8001fc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	3d79db23 	.word	0x3d79db23

08001fd8 <ism330dhcx_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_full_scale_set(stmdev_ctx_t *ctx,
                                     ism330dhcx_fs_xl_t val)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 8001fe4:	f107 0208 	add.w	r2, r7, #8
 8001fe8:	2301      	movs	r3, #1
 8001fea:	2110      	movs	r1, #16
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f7ff ffaa 	bl	8001f46 <ism330dhcx_read_reg>
 8001ff2:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);

  if (ret == 0)
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d10f      	bne.n	800201a <ism330dhcx_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8001ffa:	78fb      	ldrb	r3, [r7, #3]
 8001ffc:	f003 0303 	and.w	r3, r3, #3
 8002000:	b2da      	uxtb	r2, r3
 8002002:	7a3b      	ldrb	r3, [r7, #8]
 8002004:	f362 0383 	bfi	r3, r2, #2, #2
 8002008:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 800200a:	f107 0208 	add.w	r2, r7, #8
 800200e:	2301      	movs	r3, #1
 8002010:	2110      	movs	r1, #16
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f7ff ffaf 	bl	8001f76 <ism330dhcx_write_reg>
 8002018:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 800201a:	68fb      	ldr	r3, [r7, #12]
}
 800201c:	4618      	mov	r0, r3
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <ism330dhcx_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_data_rate_set(stmdev_ctx_t *ctx,
                                    ism330dhcx_odr_xl_t val)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_odr_xl_t odr_xl =  val;
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	75fb      	strb	r3, [r7, #23]
  uint8_t mlc_enable;
  ism330dhcx_mlc_odr_t mlc_odr;
  ism330dhcx_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  /* Check the Finite State Machine data rate constraints */
  ret =  ism330dhcx_fsm_enable_get(ctx, &fsm_enable);
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	4619      	mov	r1, r3
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fac0 	bl	80025c0 <ism330dhcx_fsm_enable_get>
 8002040:	6138      	str	r0, [r7, #16]

  if (ret == 0)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	2b00      	cmp	r3, #0
 8002046:	f040 80c4 	bne.w	80021d2 <ism330dhcx_xl_data_rate_set+0x1ae>
  {
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800204a:	7b3b      	ldrb	r3, [r7, #12]
 800204c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002050:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002052:	7b3b      	ldrb	r3, [r7, #12]
 8002054:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002058:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 800205a:	4313      	orrs	r3, r2
 800205c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 800205e:	7b3b      	ldrb	r3, [r7, #12]
 8002060:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002064:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm2_en  |
 8002066:	4313      	orrs	r3, r2
 8002068:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800206a:	7b3b      	ldrb	r3, [r7, #12]
 800206c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002070:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm3_en  |
 8002072:	4313      	orrs	r3, r2
 8002074:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 8002076:	7b3b      	ldrb	r3, [r7, #12]
 8002078:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800207c:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm4_en  |
 800207e:	4313      	orrs	r3, r2
 8002080:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002082:	7b3b      	ldrb	r3, [r7, #12]
 8002084:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002088:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm5_en  |
 800208a:	4313      	orrs	r3, r2
 800208c:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 800208e:	7b3b      	ldrb	r3, [r7, #12]
 8002090:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002094:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm6_en  |
 8002096:	4313      	orrs	r3, r2
 8002098:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 800209a:	7b3b      	ldrb	r3, [r7, #12]
 800209c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80020a0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm7_en  |
 80020a2:	4313      	orrs	r3, r2
 80020a4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80020a6:	7b7b      	ldrb	r3, [r7, #13]
 80020a8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80020ac:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_a.fsm8_en  |
 80020ae:	4313      	orrs	r3, r2
 80020b0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80020b2:	7b7b      	ldrb	r3, [r7, #13]
 80020b4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80020b8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm9_en  |
 80020ba:	4313      	orrs	r3, r2
 80020bc:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80020be:	7b7b      	ldrb	r3, [r7, #13]
 80020c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80020c4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm10_en |
 80020c6:	4313      	orrs	r3, r2
 80020c8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80020ca:	7b7b      	ldrb	r3, [r7, #13]
 80020cc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80020d0:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm11_en |
 80020d2:	4313      	orrs	r3, r2
 80020d4:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80020d6:	7b7b      	ldrb	r3, [r7, #13]
 80020d8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80020dc:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm12_en |
 80020de:	4313      	orrs	r3, r2
 80020e0:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80020e2:	7b7b      	ldrb	r3, [r7, #13]
 80020e4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80020e8:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm13_en |
 80020ea:	4313      	orrs	r3, r2
 80020ec:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 80020ee:	7b7b      	ldrb	r3, [r7, #13]
 80020f0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80020f4:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm14_en |
 80020f6:	4313      	orrs	r3, r2
 80020f8:	b2da      	uxtb	r2, r3
         fsm_enable.fsm_enable_b.fsm16_en) == PROPERTY_ENABLE)
 80020fa:	7b7b      	ldrb	r3, [r7, #13]
 80020fc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002100:	b2db      	uxtb	r3, r3
         fsm_enable.fsm_enable_b.fsm15_en |
 8002102:	4313      	orrs	r3, r2
 8002104:	b2db      	uxtb	r3, r3
    if ((fsm_enable.fsm_enable_a.fsm1_en  |
 8002106:	2b01      	cmp	r3, #1
 8002108:	d163      	bne.n	80021d2 <ism330dhcx_xl_data_rate_set+0x1ae>
    {
      ret =  ism330dhcx_fsm_data_rate_get(ctx, &fsm_odr);
 800210a:	f107 030b 	add.w	r3, r7, #11
 800210e:	4619      	mov	r1, r3
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 fa81 	bl	8002618 <ism330dhcx_fsm_data_rate_get>
 8002116:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d159      	bne.n	80021d2 <ism330dhcx_xl_data_rate_set+0x1ae>
      {
        switch (fsm_odr)
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d853      	bhi.n	80021cc <ism330dhcx_xl_data_rate_set+0x1a8>
 8002124:	a201      	add	r2, pc, #4	; (adr r2, 800212c <ism330dhcx_xl_data_rate_set+0x108>)
 8002126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800212a:	bf00      	nop
 800212c:	0800213d 	.word	0x0800213d
 8002130:	0800214f 	.word	0x0800214f
 8002134:	0800216d 	.word	0x0800216d
 8002138:	08002197 	.word	0x08002197
        {
          case ISM330DHCX_ODR_FSM_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800213c:	78fb      	ldrb	r3, [r7, #3]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d102      	bne.n	8002148 <ism330dhcx_xl_data_rate_set+0x124>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 8002142:	2301      	movs	r3, #1
 8002144:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002146:	e045      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002148:	78fb      	ldrb	r3, [r7, #3]
 800214a:	75fb      	strb	r3, [r7, #23]
            break;
 800214c:	e042      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800214e:	78fb      	ldrb	r3, [r7, #3]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <ism330dhcx_xl_data_rate_set+0x136>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002154:	2302      	movs	r3, #2
 8002156:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002158:	e03c      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d102      	bne.n	8002166 <ism330dhcx_xl_data_rate_set+0x142>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002160:	2302      	movs	r3, #2
 8002162:	75fb      	strb	r3, [r7, #23]
            break;
 8002164:	e036      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	75fb      	strb	r3, [r7, #23]
            break;
 800216a:	e033      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800216c:	78fb      	ldrb	r3, [r7, #3]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <ism330dhcx_xl_data_rate_set+0x154>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002172:	2303      	movs	r3, #3
 8002174:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002176:	e02d      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8002178:	78fb      	ldrb	r3, [r7, #3]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d102      	bne.n	8002184 <ism330dhcx_xl_data_rate_set+0x160>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800217e:	2303      	movs	r3, #3
 8002180:	75fb      	strb	r3, [r7, #23]
            break;
 8002182:	e027      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8002184:	78fb      	ldrb	r3, [r7, #3]
 8002186:	2b02      	cmp	r3, #2
 8002188:	d102      	bne.n	8002190 <ism330dhcx_xl_data_rate_set+0x16c>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800218a:	2303      	movs	r3, #3
 800218c:	75fb      	strb	r3, [r7, #23]
            break;
 800218e:	e021      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8002190:	78fb      	ldrb	r3, [r7, #3]
 8002192:	75fb      	strb	r3, [r7, #23]
            break;
 8002194:	e01e      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>

          case ISM330DHCX_ODR_FSM_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002196:	78fb      	ldrb	r3, [r7, #3]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d102      	bne.n	80021a2 <ism330dhcx_xl_data_rate_set+0x17e>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800219c:	2304      	movs	r3, #4
 800219e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 80021a0:	e018      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d102      	bne.n	80021ae <ism330dhcx_xl_data_rate_set+0x18a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80021a8:	2304      	movs	r3, #4
 80021aa:	75fb      	strb	r3, [r7, #23]
            break;
 80021ac:	e012      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 80021ae:	78fb      	ldrb	r3, [r7, #3]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d102      	bne.n	80021ba <ism330dhcx_xl_data_rate_set+0x196>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80021b4:	2304      	movs	r3, #4
 80021b6:	75fb      	strb	r3, [r7, #23]
            break;
 80021b8:	e00c      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d102      	bne.n	80021c6 <ism330dhcx_xl_data_rate_set+0x1a2>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80021c0:	2304      	movs	r3, #4
 80021c2:	75fb      	strb	r3, [r7, #23]
            break;
 80021c4:	e006      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
              odr_xl = val;
 80021c6:	78fb      	ldrb	r3, [r7, #3]
 80021c8:	75fb      	strb	r3, [r7, #23]
            break;
 80021ca:	e003      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>

          default:
            odr_xl = val;
 80021cc:	78fb      	ldrb	r3, [r7, #3]
 80021ce:	75fb      	strb	r3, [r7, #23]
            break;
 80021d0:	e000      	b.n	80021d4 <ism330dhcx_xl_data_rate_set+0x1b0>
        }
      }
 80021d2:	bf00      	nop
    }
  }

  /* Check the Machine Learning Core data rate constraints */
  mlc_enable = PROPERTY_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	72bb      	strb	r3, [r7, #10]

  if (ret == 0)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d16d      	bne.n	80022ba <ism330dhcx_xl_data_rate_set+0x296>
  {
    ret =  ism330dhcx_mlc_get(ctx, &mlc_enable);
 80021de:	f107 030a 	add.w	r3, r7, #10
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 fa5f 	bl	80026a8 <ism330dhcx_mlc_get>
 80021ea:	6138      	str	r0, [r7, #16]

    if (mlc_enable == PROPERTY_ENABLE)
 80021ec:	7abb      	ldrb	r3, [r7, #10]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d163      	bne.n	80022ba <ism330dhcx_xl_data_rate_set+0x296>
    {
      ret =  ism330dhcx_mlc_data_rate_get(ctx, &mlc_odr);
 80021f2:	f107 0309 	add.w	r3, r7, #9
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fa7f 	bl	80026fc <ism330dhcx_mlc_data_rate_get>
 80021fe:	6138      	str	r0, [r7, #16]

      if (ret == 0)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d159      	bne.n	80022ba <ism330dhcx_xl_data_rate_set+0x296>
      {
        switch (mlc_odr)
 8002206:	7a7b      	ldrb	r3, [r7, #9]
 8002208:	2b03      	cmp	r3, #3
 800220a:	d853      	bhi.n	80022b4 <ism330dhcx_xl_data_rate_set+0x290>
 800220c:	a201      	add	r2, pc, #4	; (adr r2, 8002214 <ism330dhcx_xl_data_rate_set+0x1f0>)
 800220e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002212:	bf00      	nop
 8002214:	08002225 	.word	0x08002225
 8002218:	08002237 	.word	0x08002237
 800221c:	08002255 	.word	0x08002255
 8002220:	0800227f 	.word	0x0800227f
        {
          case ISM330DHCX_ODR_PRGS_12Hz5:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <ism330dhcx_xl_data_rate_set+0x20c>
            {
              odr_xl = ISM330DHCX_XL_ODR_12Hz5;
 800222a:	2301      	movs	r3, #1
 800222c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800222e:	e045      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8002230:	78fb      	ldrb	r3, [r7, #3]
 8002232:	75fb      	strb	r3, [r7, #23]
            break;
 8002234:	e042      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_26Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002236:	78fb      	ldrb	r3, [r7, #3]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d102      	bne.n	8002242 <ism330dhcx_xl_data_rate_set+0x21e>
            {
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 800223c:	2302      	movs	r3, #2
 800223e:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002240:	e03c      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8002242:	78fb      	ldrb	r3, [r7, #3]
 8002244:	2b01      	cmp	r3, #1
 8002246:	d102      	bne.n	800224e <ism330dhcx_xl_data_rate_set+0x22a>
              odr_xl = ISM330DHCX_XL_ODR_26Hz;
 8002248:	2302      	movs	r3, #2
 800224a:	75fb      	strb	r3, [r7, #23]
            break;
 800224c:	e036      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	75fb      	strb	r3, [r7, #23]
            break;
 8002252:	e033      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_52Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 8002254:	78fb      	ldrb	r3, [r7, #3]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d102      	bne.n	8002260 <ism330dhcx_xl_data_rate_set+0x23c>
            {
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 800225a:	2303      	movs	r3, #3
 800225c:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 800225e:	e02d      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d102      	bne.n	800226c <ism330dhcx_xl_data_rate_set+0x248>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002266:	2303      	movs	r3, #3
 8002268:	75fb      	strb	r3, [r7, #23]
            break;
 800226a:	e027      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d102      	bne.n	8002278 <ism330dhcx_xl_data_rate_set+0x254>
              odr_xl = ISM330DHCX_XL_ODR_52Hz;
 8002272:	2303      	movs	r3, #3
 8002274:	75fb      	strb	r3, [r7, #23]
            break;
 8002276:	e021      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 8002278:	78fb      	ldrb	r3, [r7, #3]
 800227a:	75fb      	strb	r3, [r7, #23]
            break;
 800227c:	e01e      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>

          case ISM330DHCX_ODR_PRGS_104Hz:
            if (val == ISM330DHCX_XL_ODR_OFF)
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d102      	bne.n	800228a <ism330dhcx_xl_data_rate_set+0x266>
            {
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002284:	2304      	movs	r3, #4
 8002286:	75fb      	strb	r3, [r7, #23]
            else
            {
              odr_xl = val;
            }

            break;
 8002288:	e018      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_12Hz5)
 800228a:	78fb      	ldrb	r3, [r7, #3]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d102      	bne.n	8002296 <ism330dhcx_xl_data_rate_set+0x272>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 8002290:	2304      	movs	r3, #4
 8002292:	75fb      	strb	r3, [r7, #23]
            break;
 8002294:	e012      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_26Hz)
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	2b02      	cmp	r3, #2
 800229a:	d102      	bne.n	80022a2 <ism330dhcx_xl_data_rate_set+0x27e>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 800229c:	2304      	movs	r3, #4
 800229e:	75fb      	strb	r3, [r7, #23]
            break;
 80022a0:	e00c      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
            else if (val == ISM330DHCX_XL_ODR_52Hz)
 80022a2:	78fb      	ldrb	r3, [r7, #3]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d102      	bne.n	80022ae <ism330dhcx_xl_data_rate_set+0x28a>
              odr_xl = ISM330DHCX_XL_ODR_104Hz;
 80022a8:	2304      	movs	r3, #4
 80022aa:	75fb      	strb	r3, [r7, #23]
            break;
 80022ac:	e006      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
              odr_xl = val;
 80022ae:	78fb      	ldrb	r3, [r7, #3]
 80022b0:	75fb      	strb	r3, [r7, #23]
            break;
 80022b2:	e003      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>

          default:
            odr_xl = val;
 80022b4:	78fb      	ldrb	r3, [r7, #3]
 80022b6:	75fb      	strb	r3, [r7, #23]
            break;
 80022b8:	e000      	b.n	80022bc <ism330dhcx_xl_data_rate_set+0x298>
        }
      }
 80022ba:	bf00      	nop
    }
  }

  if (ret == 0)
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <ism330dhcx_xl_data_rate_set+0x2ae>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL1_XL,
 80022c2:	f107 0208 	add.w	r2, r7, #8
 80022c6:	2301      	movs	r3, #1
 80022c8:	2110      	movs	r1, #16
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7ff fe3b 	bl	8001f46 <ism330dhcx_read_reg>
 80022d0:	6138      	str	r0, [r7, #16]
                              (uint8_t *)&ctrl1_xl, 1);
  }

  if (ret == 0)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d10f      	bne.n	80022f8 <ism330dhcx_xl_data_rate_set+0x2d4>
  {
    ctrl1_xl.odr_xl = (uint8_t)odr_xl;
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	b2da      	uxtb	r2, r3
 80022e0:	7a3b      	ldrb	r3, [r7, #8]
 80022e2:	f362 1307 	bfi	r3, r2, #4, #4
 80022e6:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL1_XL,
 80022e8:	f107 0208 	add.w	r2, r7, #8
 80022ec:	2301      	movs	r3, #1
 80022ee:	2110      	movs	r1, #16
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff fe40 	bl	8001f76 <ism330dhcx_write_reg>
 80022f6:	6138      	str	r0, [r7, #16]
                               (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 80022f8:	693b      	ldr	r3, [r7, #16]
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop

08002304 <ism330dhcx_block_data_update_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_block_data_update_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	460b      	mov	r3, r1
 800230e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8002310:	f107 0208 	add.w	r2, r7, #8
 8002314:	2301      	movs	r3, #1
 8002316:	2112      	movs	r1, #18
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff fe14 	bl	8001f46 <ism330dhcx_read_reg>
 800231e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10f      	bne.n	8002346 <ism330dhcx_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	f003 0301 	and.w	r3, r3, #1
 800232c:	b2da      	uxtb	r2, r3
 800232e:	7a3b      	ldrb	r3, [r7, #8]
 8002330:	f362 1386 	bfi	r3, r2, #6, #1
 8002334:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8002336:	f107 0208 	add.w	r2, r7, #8
 800233a:	2301      	movs	r3, #1
 800233c:	2112      	movs	r1, #18
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fe19 	bl	8001f76 <ism330dhcx_write_reg>
 8002344:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}

08002350 <ism330dhcx_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  ism330dhcx_status_reg_t status_reg;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_STATUS_REG,
 800235a:	f107 0208 	add.w	r2, r7, #8
 800235e:	2301      	movs	r3, #1
 8002360:	211e      	movs	r1, #30
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fdef 	bl	8001f46 <ism330dhcx_read_reg>
 8002368:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 800236a:	7a3b      	ldrb	r3, [r7, #8]
 800236c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	461a      	mov	r2, r3
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	701a      	strb	r2, [r3, #0]

  return ret;
 8002378:	68fb      	ldr	r3, [r7, #12]
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <ism330dhcx_acceleration_raw_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_acceleration_raw_get(stmdev_ctx_t *ctx,
                                        int16_t *val)
{
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_OUTX_L_A, buff, 6);
 800238c:	f107 020c 	add.w	r2, r7, #12
 8002390:	2306      	movs	r3, #6
 8002392:	2128      	movs	r1, #40	; 0x28
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff fdd6 	bl	8001f46 <ism330dhcx_read_reg>
 800239a:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 800239c:	7b7b      	ldrb	r3, [r7, #13]
 800239e:	b21a      	sxth	r2, r3
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023aa:	b29b      	uxth	r3, r3
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	7b3b      	ldrb	r3, [r7, #12]
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	4413      	add	r3, r2
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	b21a      	sxth	r2, r3
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80023be:	7bfa      	ldrb	r2, [r7, #15]
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	3302      	adds	r3, #2
 80023c4:	b212      	sxth	r2, r2
 80023c6:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	3302      	adds	r3, #2
 80023cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	021b      	lsls	r3, r3, #8
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	7bbb      	ldrb	r3, [r7, #14]
 80023d8:	b29b      	uxth	r3, r3
 80023da:	4413      	add	r3, r2
 80023dc:	b29a      	uxth	r2, r3
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3302      	adds	r3, #2
 80023e2:	b212      	sxth	r2, r2
 80023e4:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80023e6:	7c7a      	ldrb	r2, [r7, #17]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	3304      	adds	r3, #4
 80023ec:	b212      	sxth	r2, r2
 80023ee:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	3304      	adds	r3, #4
 80023f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80023f8:	b29b      	uxth	r3, r3
 80023fa:	021b      	lsls	r3, r3, #8
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	7c3b      	ldrb	r3, [r7, #16]
 8002400:	b29b      	uxth	r3, r3
 8002402:	4413      	add	r3, r2
 8002404:	b29a      	uxth	r2, r3
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	3304      	adds	r3, #4
 800240a:	b212      	sxth	r2, r2
 800240c:	801a      	strh	r2, [r3, #0]

  return ret;
 800240e:	697b      	ldr	r3, [r7, #20]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <ism330dhcx_device_conf_set>:
  * @param  val    Change the values of device_conf in reg CTRL9_XL
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_conf_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	460b      	mov	r3, r1
 8002422:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl9_xl_t ctrl9_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL9_XL,
 8002424:	f107 0208 	add.w	r2, r7, #8
 8002428:	2301      	movs	r3, #1
 800242a:	2118      	movs	r1, #24
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7ff fd8a 	bl	8001f46 <ism330dhcx_read_reg>
 8002432:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl9_xl, 1);

  if (ret == 0)
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d10f      	bne.n	800245a <ism330dhcx_device_conf_set+0x42>
  {
    ctrl9_xl.device_conf = (uint8_t)val;
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	b2da      	uxtb	r2, r3
 8002442:	7a3b      	ldrb	r3, [r7, #8]
 8002444:	f362 0341 	bfi	r3, r2, #1, #1
 8002448:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL9_XL,
 800244a:	f107 0208 	add.w	r2, r7, #8
 800244e:	2301      	movs	r3, #1
 8002450:	2118      	movs	r1, #24
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f7ff fd8f 	bl	8001f76 <ism330dhcx_write_reg>
 8002458:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl9_xl, 1);
  }

  return ret;
 800245a:	68fb      	ldr	r3, [r7, #12]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <ism330dhcx_mem_bank_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_mem_bank_set(stmdev_ctx_t *ctx,
                                ism330dhcx_reg_access_t val)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_func_cfg_access_t func_cfg_access;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8002470:	f107 0208 	add.w	r2, r7, #8
 8002474:	2301      	movs	r3, #1
 8002476:	2101      	movs	r1, #1
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff fd64 	bl	8001f46 <ism330dhcx_read_reg>
 800247e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&func_cfg_access, 1);

  if (ret == 0)
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10f      	bne.n	80024a6 <ism330dhcx_mem_bank_set+0x42>
  {
    func_cfg_access.reg_access = (uint8_t)val;
 8002486:	78fb      	ldrb	r3, [r7, #3]
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	b2da      	uxtb	r2, r3
 800248e:	7a3b      	ldrb	r3, [r7, #8]
 8002490:	f362 1387 	bfi	r3, r2, #6, #2
 8002494:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_FUNC_CFG_ACCESS,
 8002496:	f107 0208 	add.w	r2, r7, #8
 800249a:	2301      	movs	r3, #1
 800249c:	2101      	movs	r1, #1
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f7ff fd69 	bl	8001f76 <ism330dhcx_write_reg>
 80024a4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&func_cfg_access, 1);
  }

  return ret;
 80024a6:	68fb      	ldr	r3, [r7, #12]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <ism330dhcx_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_WHO_AM_I, buff, 1);
 80024ba:	2301      	movs	r3, #1
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	210f      	movs	r1, #15
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	f7ff fd40 	bl	8001f46 <ism330dhcx_read_reg>
 80024c6:	60f8      	str	r0, [r7, #12]

  return ret;
 80024c8:	68fb      	ldr	r3, [r7, #12]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <ism330dhcx_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 80024de:	f107 0208 	add.w	r2, r7, #8
 80024e2:	2301      	movs	r3, #1
 80024e4:	2112      	movs	r1, #18
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f7ff fd2d 	bl	8001f46 <ism330dhcx_read_reg>
 80024ec:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);

  if (ret == 0)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10f      	bne.n	8002514 <ism330dhcx_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 80024f4:	78fb      	ldrb	r3, [r7, #3]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	7a3b      	ldrb	r3, [r7, #8]
 80024fe:	f362 0300 	bfi	r3, r2, #0, #1
 8002502:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL3_C,
 8002504:	f107 0208 	add.w	r2, r7, #8
 8002508:	2301      	movs	r3, #1
 800250a:	2112      	movs	r1, #18
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fd32 	bl	8001f76 <ism330dhcx_write_reg>
 8002512:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl3_c, 1);
  }

  return ret;
 8002514:	68fb      	ldr	r3, [r7, #12]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3710      	adds	r7, #16
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <ism330dhcx_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b084      	sub	sp, #16
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
 8002526:	6039      	str	r1, [r7, #0]
  ism330dhcx_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL3_C,
 8002528:	f107 0208 	add.w	r2, r7, #8
 800252c:	2301      	movs	r3, #1
 800252e:	2112      	movs	r1, #18
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff fd08 	bl	8001f46 <ism330dhcx_read_reg>
 8002536:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
 8002538:	7a3b      	ldrb	r3, [r7, #8]
 800253a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800253e:	b2db      	uxtb	r3, r3
 8002540:	461a      	mov	r2, r3
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	701a      	strb	r2, [r3, #0]

  return ret;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	4618      	mov	r0, r3
 800254a:	3710      	adds	r7, #16
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <ism330dhcx_xl_hp_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_xl_hp_path_on_out_set(stmdev_ctx_t *ctx,
                                         ism330dhcx_hp_slope_xl_en_t val)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  ism330dhcx_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = ism330dhcx_read_reg(ctx, ISM330DHCX_CTRL8_XL,
 800255c:	f107 0208 	add.w	r2, r7, #8
 8002560:	2301      	movs	r3, #1
 8002562:	2117      	movs	r1, #23
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff fcee 	bl	8001f46 <ism330dhcx_read_reg>
 800256a:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl8_xl, 1);

  if (ret == 0)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d121      	bne.n	80025b6 <ism330dhcx_xl_hp_path_on_out_set+0x66>
  {
    ctrl8_xl.hp_slope_xl_en = (((uint8_t)val & 0x10U) >> 4);
 8002572:	78fb      	ldrb	r3, [r7, #3]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	b2da      	uxtb	r2, r3
 800257c:	7a3b      	ldrb	r3, [r7, #8]
 800257e:	f362 0382 	bfi	r3, r2, #2, #1
 8002582:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hp_ref_mode_xl = (((uint8_t)val & 0x20U) >> 5);
 8002584:	78fb      	ldrb	r3, [r7, #3]
 8002586:	095b      	lsrs	r3, r3, #5
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	b2da      	uxtb	r2, r3
 800258e:	7a3b      	ldrb	r3, [r7, #8]
 8002590:	f362 1304 	bfi	r3, r2, #4, #1
 8002594:	723b      	strb	r3, [r7, #8]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	b2da      	uxtb	r2, r3
 800259e:	7a3b      	ldrb	r3, [r7, #8]
 80025a0:	f362 1347 	bfi	r3, r2, #5, #3
 80025a4:	723b      	strb	r3, [r7, #8]
    ret = ism330dhcx_write_reg(ctx, ISM330DHCX_CTRL8_XL,
 80025a6:	f107 0208 	add.w	r2, r7, #8
 80025aa:	2301      	movs	r3, #1
 80025ac:	2117      	movs	r1, #23
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7ff fce1 	bl	8001f76 <ism330dhcx_write_reg>
 80025b4:	60f8      	str	r0, [r7, #12]
                               (uint8_t *)&ctrl8_xl, 1);
  }

  return ret;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <ism330dhcx_fsm_enable_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_enable_get(stmdev_ctx_t *ctx,
                                  ism330dhcx_emb_fsm_enable_t *val)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80025ca:	2102      	movs	r1, #2
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f7ff ff49 	bl	8002464 <ism330dhcx_mem_bank_set>
 80025d2:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d106      	bne.n	80025e8 <ism330dhcx_fsm_enable_get+0x28>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
                              (uint8_t *)&val->fsm_enable_a, 1);
 80025da:	683a      	ldr	r2, [r7, #0]
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_A,
 80025dc:	2301      	movs	r3, #1
 80025de:	2146      	movs	r1, #70	; 0x46
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f7ff fcb0 	bl	8001f46 <ism330dhcx_read_reg>
 80025e6:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d107      	bne.n	80025fe <ism330dhcx_fsm_enable_get+0x3e>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
                              (uint8_t *)&val->fsm_enable_b, 1);
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	1c5a      	adds	r2, r3, #1
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_FSM_ENABLE_B,
 80025f2:	2301      	movs	r3, #1
 80025f4:	2147      	movs	r1, #71	; 0x47
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff fca5 	bl	8001f46 <ism330dhcx_read_reg>
 80025fc:	60f8      	str	r0, [r7, #12]
  }

  if (ret == 0)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d104      	bne.n	800260e <ism330dhcx_fsm_enable_get+0x4e>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002604:	2100      	movs	r1, #0
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f7ff ff2c 	bl	8002464 <ism330dhcx_mem_bank_set>
 800260c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800260e:	68fb      	ldr	r3, [r7, #12]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3710      	adds	r7, #16
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <ism330dhcx_fsm_data_rate_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t ism330dhcx_fsm_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_fsm_odr_t *val)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_b_t emb_func_odr_cfg_b;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002622:	2102      	movs	r1, #2
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff1d 	bl	8002464 <ism330dhcx_mem_bank_set>
 800262a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d107      	bne.n	8002642 <ism330dhcx_fsm_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_B,
 8002632:	f107 0208 	add.w	r2, r7, #8
 8002636:	2301      	movs	r3, #1
 8002638:	215f      	movs	r1, #95	; 0x5f
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff fc83 	bl	8001f46 <ism330dhcx_read_reg>
 8002640:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&emb_func_odr_cfg_b, 1);
  }

  if (ret == 0)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <ism330dhcx_fsm_data_rate_get+0x3a>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002648:	2100      	movs	r1, #0
 800264a:	6878      	ldr	r0, [r7, #4]
 800264c:	f7ff ff0a 	bl	8002464 <ism330dhcx_mem_bank_set>
 8002650:	60f8      	str	r0, [r7, #12]
  }

  switch (emb_func_odr_cfg_b.fsm_odr)
 8002652:	7a3b      	ldrb	r3, [r7, #8]
 8002654:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	2b03      	cmp	r3, #3
 800265c:	d81a      	bhi.n	8002694 <ism330dhcx_fsm_data_rate_get+0x7c>
 800265e:	a201      	add	r2, pc, #4	; (adr r2, 8002664 <ism330dhcx_fsm_data_rate_get+0x4c>)
 8002660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002664:	08002675 	.word	0x08002675
 8002668:	0800267d 	.word	0x0800267d
 800266c:	08002685 	.word	0x08002685
 8002670:	0800268d 	.word	0x0800268d
  {
    case ISM330DHCX_ODR_FSM_12Hz5:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
      break;
 800267a:	e00f      	b.n	800269c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_26Hz:
      *val = ISM330DHCX_ODR_FSM_26Hz;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	2201      	movs	r2, #1
 8002680:	701a      	strb	r2, [r3, #0]
      break;
 8002682:	e00b      	b.n	800269c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_52Hz:
      *val = ISM330DHCX_ODR_FSM_52Hz;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	2202      	movs	r2, #2
 8002688:	701a      	strb	r2, [r3, #0]
      break;
 800268a:	e007      	b.n	800269c <ism330dhcx_fsm_data_rate_get+0x84>

    case ISM330DHCX_ODR_FSM_104Hz:
      *val = ISM330DHCX_ODR_FSM_104Hz;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	2203      	movs	r2, #3
 8002690:	701a      	strb	r2, [r3, #0]
      break;
 8002692:	e003      	b.n	800269c <ism330dhcx_fsm_data_rate_get+0x84>

    default:
      *val = ISM330DHCX_ODR_FSM_12Hz5;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	2200      	movs	r2, #0
 8002698:	701a      	strb	r2, [r3, #0]
      break;
 800269a:	bf00      	nop
  }

  return ret;
 800269c:	68fb      	ldr	r3, [r7, #12]
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop

080026a8 <ism330dhcx_mlc_get>:
  * @param  val      Get the values of mlc_en in
  *                  reg EMB_FUNC_EN_B
  *
  */
int32_t ism330dhcx_mlc_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_en_b_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 80026b2:	2102      	movs	r1, #2
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff fed5 	bl	8002464 <ism330dhcx_mem_bank_set>
 80026ba:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d107      	bne.n	80026d2 <ism330dhcx_mlc_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_EN_B,
 80026c2:	f107 0208 	add.w	r2, r7, #8
 80026c6:	2301      	movs	r3, #1
 80026c8:	2105      	movs	r1, #5
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f7ff fc3b 	bl	8001f46 <ism330dhcx_read_reg>
 80026d0:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10b      	bne.n	80026f0 <ism330dhcx_mlc_get+0x48>
  {
    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 80026d8:	2100      	movs	r1, #0
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff fec2 	bl	8002464 <ism330dhcx_mem_bank_set>
 80026e0:	60f8      	str	r0, [r7, #12]
    *val  = reg.mlc_en;
 80026e2:	7a3b      	ldrb	r3, [r7, #8]
 80026e4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
	...

080026fc <ism330dhcx_mlc_data_rate_get>:
  *                  reg EMB_FUNC_ODR_CFG_C
  *
  */
int32_t ism330dhcx_mlc_data_rate_get(stmdev_ctx_t *ctx,
                                     ism330dhcx_mlc_odr_t *val)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
  ism330dhcx_emb_func_odr_cfg_c_t reg;
  int32_t ret;
  ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_EMBEDDED_FUNC_BANK);
 8002706:	2102      	movs	r1, #2
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f7ff feab 	bl	8002464 <ism330dhcx_mem_bank_set>
 800270e:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d107      	bne.n	8002726 <ism330dhcx_mlc_data_rate_get+0x2a>
  {
    ret = ism330dhcx_read_reg(ctx, ISM330DHCX_EMB_FUNC_ODR_CFG_C,
 8002716:	f107 0208 	add.w	r2, r7, #8
 800271a:	2301      	movs	r3, #1
 800271c:	2160      	movs	r1, #96	; 0x60
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff fc11 	bl	8001f46 <ism330dhcx_read_reg>
 8002724:	60f8      	str	r0, [r7, #12]
                              (uint8_t *)&reg, 1);
  }

  if (ret == 0)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d12a      	bne.n	8002782 <ism330dhcx_mlc_data_rate_get+0x86>
  {
    switch (reg.mlc_odr)
 800272c:	7a3b      	ldrb	r3, [r7, #8]
 800272e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b03      	cmp	r3, #3
 8002736:	d81b      	bhi.n	8002770 <ism330dhcx_mlc_data_rate_get+0x74>
 8002738:	a201      	add	r2, pc, #4	; (adr r2, 8002740 <ism330dhcx_mlc_data_rate_get+0x44>)
 800273a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800273e:	bf00      	nop
 8002740:	08002751 	.word	0x08002751
 8002744:	08002759 	.word	0x08002759
 8002748:	08002761 	.word	0x08002761
 800274c:	08002769 	.word	0x08002769
    {
      case ISM330DHCX_ODR_PRGS_12Hz5:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
        break;
 8002756:	e00f      	b.n	8002778 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_26Hz:
        *val = ISM330DHCX_ODR_PRGS_26Hz;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	701a      	strb	r2, [r3, #0]
        break;
 800275e:	e00b      	b.n	8002778 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_52Hz:
        *val = ISM330DHCX_ODR_PRGS_52Hz;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	2202      	movs	r2, #2
 8002764:	701a      	strb	r2, [r3, #0]
        break;
 8002766:	e007      	b.n	8002778 <ism330dhcx_mlc_data_rate_get+0x7c>

      case ISM330DHCX_ODR_PRGS_104Hz:
        *val = ISM330DHCX_ODR_PRGS_104Hz;
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	2203      	movs	r2, #3
 800276c:	701a      	strb	r2, [r3, #0]
        break;
 800276e:	e003      	b.n	8002778 <ism330dhcx_mlc_data_rate_get+0x7c>

      default:
        *val = ISM330DHCX_ODR_PRGS_12Hz5;
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
        break;
 8002776:	bf00      	nop
    }

    ret = ism330dhcx_mem_bank_set(ctx, ISM330DHCX_USER_BANK);
 8002778:	2100      	movs	r1, #0
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff fe72 	bl	8002464 <ism330dhcx_mem_bank_set>
 8002780:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002796:	2003      	movs	r0, #3
 8002798:	f000 f960 	bl	8002a5c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800279c:	2000      	movs	r0, #0
 800279e:	f000 f80d 	bl	80027bc <HAL_InitTick>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d002      	beq.n	80027ae <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80027a8:	2301      	movs	r3, #1
 80027aa:	71fb      	strb	r3, [r7, #7]
 80027ac:	e001      	b.n	80027b2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027ae:	f7ff f9bd 	bl	8001b2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027b2:	79fb      	ldrb	r3, [r7, #7]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3708      	adds	r7, #8
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027c4:	2300      	movs	r3, #0
 80027c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027c8:	4b17      	ldr	r3, [pc, #92]	; (8002828 <HAL_InitTick+0x6c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d023      	beq.n	8002818 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027d0:	4b16      	ldr	r3, [pc, #88]	; (800282c <HAL_InitTick+0x70>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b14      	ldr	r3, [pc, #80]	; (8002828 <HAL_InitTick+0x6c>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	4619      	mov	r1, r3
 80027da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027de:	fbb3 f3f1 	udiv	r3, r3, r1
 80027e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e6:	4618      	mov	r0, r3
 80027e8:	f000 f96d 	bl	8002ac6 <HAL_SYSTICK_Config>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b0f      	cmp	r3, #15
 80027f6:	d809      	bhi.n	800280c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027f8:	2200      	movs	r2, #0
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002800:	f000 f937 	bl	8002a72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002804:	4a0a      	ldr	r2, [pc, #40]	; (8002830 <HAL_InitTick+0x74>)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6013      	str	r3, [r2, #0]
 800280a:	e007      	b.n	800281c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
 8002810:	e004      	b.n	800281c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	73fb      	strb	r3, [r7, #15]
 8002816:	e001      	b.n	800281c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800281c:	7bfb      	ldrb	r3, [r7, #15]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3710      	adds	r7, #16
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000008 	.word	0x20000008
 800282c:	20000000 	.word	0x20000000
 8002830:	20000004 	.word	0x20000004

08002834 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002834:	b480      	push	{r7}
 8002836:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002838:	4b06      	ldr	r3, [pc, #24]	; (8002854 <HAL_IncTick+0x20>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	461a      	mov	r2, r3
 800283e:	4b06      	ldr	r3, [pc, #24]	; (8002858 <HAL_IncTick+0x24>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	4a04      	ldr	r2, [pc, #16]	; (8002858 <HAL_IncTick+0x24>)
 8002846:	6013      	str	r3, [r2, #0]
}
 8002848:	bf00      	nop
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000008 	.word	0x20000008
 8002858:	20002a88 	.word	0x20002a88

0800285c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800285c:	b480      	push	{r7}
 800285e:	af00      	add	r7, sp, #0
  return uwTick;
 8002860:	4b03      	ldr	r3, [pc, #12]	; (8002870 <HAL_GetTick+0x14>)
 8002862:	681b      	ldr	r3, [r3, #0]
}
 8002864:	4618      	mov	r0, r3
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20002a88 	.word	0x20002a88

08002874 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b084      	sub	sp, #16
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff ffee 	bl	800285c <HAL_GetTick>
 8002880:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f1b3 3fff 	cmp.w	r3, #4294967295
 800288c:	d005      	beq.n	800289a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_Delay+0x44>)
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	461a      	mov	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800289a:	bf00      	nop
 800289c:	f7ff ffde 	bl	800285c <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d8f7      	bhi.n	800289c <HAL_Delay+0x28>
  {
  }
}
 80028ac:	bf00      	nop
 80028ae:	bf00      	nop
 80028b0:	3710      	adds	r7, #16
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000008 	.word	0x20000008

080028bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f003 0307 	and.w	r3, r3, #7
 80028ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028d8:	4013      	ands	r3, r2
 80028da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__NVIC_SetPriorityGrouping+0x44>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00

08002904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002908:	4b04      	ldr	r3, [pc, #16]	; (800291c <__NVIC_GetPriorityGrouping+0x18>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	f003 0307 	and.w	r3, r3, #7
}
 8002912:	4618      	mov	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	4603      	mov	r3, r0
 8002928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292e:	2b00      	cmp	r3, #0
 8002930:	db0b      	blt.n	800294a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002932:	79fb      	ldrb	r3, [r7, #7]
 8002934:	f003 021f 	and.w	r2, r3, #31
 8002938:	4907      	ldr	r1, [pc, #28]	; (8002958 <__NVIC_EnableIRQ+0x38>)
 800293a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2001      	movs	r0, #1
 8002942:	fa00 f202 	lsl.w	r2, r0, r2
 8002946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800294a:	bf00      	nop
 800294c:	370c      	adds	r7, #12
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	e000e100 	.word	0xe000e100

0800295c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	6039      	str	r1, [r7, #0]
 8002966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	db0a      	blt.n	8002986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	b2da      	uxtb	r2, r3
 8002974:	490c      	ldr	r1, [pc, #48]	; (80029a8 <__NVIC_SetPriority+0x4c>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	0112      	lsls	r2, r2, #4
 800297c:	b2d2      	uxtb	r2, r2
 800297e:	440b      	add	r3, r1
 8002980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002984:	e00a      	b.n	800299c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	b2da      	uxtb	r2, r3
 800298a:	4908      	ldr	r1, [pc, #32]	; (80029ac <__NVIC_SetPriority+0x50>)
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	3b04      	subs	r3, #4
 8002994:	0112      	lsls	r2, r2, #4
 8002996:	b2d2      	uxtb	r2, r2
 8002998:	440b      	add	r3, r1
 800299a:	761a      	strb	r2, [r3, #24]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000e100 	.word	0xe000e100
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b089      	sub	sp, #36	; 0x24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	f1c3 0307 	rsb	r3, r3, #7
 80029ca:	2b04      	cmp	r3, #4
 80029cc:	bf28      	it	cs
 80029ce:	2304      	movcs	r3, #4
 80029d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	3304      	adds	r3, #4
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d902      	bls.n	80029e0 <NVIC_EncodePriority+0x30>
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	3b03      	subs	r3, #3
 80029de:	e000      	b.n	80029e2 <NVIC_EncodePriority+0x32>
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e4:	f04f 32ff 	mov.w	r2, #4294967295
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	401a      	ands	r2, r3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029f8:	f04f 31ff 	mov.w	r1, #4294967295
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002a02:	43d9      	mvns	r1, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a08:	4313      	orrs	r3, r2
         );
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3724      	adds	r7, #36	; 0x24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a28:	d301      	bcc.n	8002a2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e00f      	b.n	8002a4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <SysTick_Config+0x40>)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a36:	210f      	movs	r1, #15
 8002a38:	f04f 30ff 	mov.w	r0, #4294967295
 8002a3c:	f7ff ff8e 	bl	800295c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <SysTick_Config+0x40>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a46:	4b04      	ldr	r3, [pc, #16]	; (8002a58 <SysTick_Config+0x40>)
 8002a48:	2207      	movs	r2, #7
 8002a4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	e000e010 	.word	0xe000e010

08002a5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	f7ff ff29 	bl	80028bc <__NVIC_SetPriorityGrouping>
}
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b086      	sub	sp, #24
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	4603      	mov	r3, r0
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
 8002a7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002a84:	f7ff ff3e 	bl	8002904 <__NVIC_GetPriorityGrouping>
 8002a88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	68b9      	ldr	r1, [r7, #8]
 8002a8e:	6978      	ldr	r0, [r7, #20]
 8002a90:	f7ff ff8e 	bl	80029b0 <NVIC_EncodePriority>
 8002a94:	4602      	mov	r2, r0
 8002a96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff ff5d 	bl	800295c <__NVIC_SetPriority>
}
 8002aa2:	bf00      	nop
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f7ff ff31 	bl	8002920 <__NVIC_EnableIRQ>
}
 8002abe:	bf00      	nop
 8002ac0:	3708      	adds	r7, #8
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b082      	sub	sp, #8
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7ff ffa2 	bl	8002a18 <SysTick_Config>
 8002ad4:	4603      	mov	r3, r0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d008      	beq.n	8002b08 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2204      	movs	r2, #4
 8002afa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e040      	b.n	8002b8a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 020e 	bic.w	r2, r2, #14
 8002b16:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b22:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b26:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f022 0201 	bic.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3c:	f003 021c 	and.w	r2, r3, #28
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	2101      	movs	r1, #1
 8002b46:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002b54:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d00c      	beq.n	8002b78 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002b76:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3714      	adds	r7, #20
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b96:	b580      	push	{r7, lr}
 8002b98:	b084      	sub	sp, #16
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d005      	beq.n	8002bba <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2204      	movs	r2, #4
 8002bb2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
 8002bb8:	e047      	b.n	8002c4a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 020e 	bic.w	r2, r2, #14
 8002bc8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f022 0201 	bic.w	r2, r2, #1
 8002bd8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002be4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002be8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bee:	f003 021c 	and.w	r2, r3, #28
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bfc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c06:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00c      	beq.n	8002c2a <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	687a      	ldr	r2, [r7, #4]
 8002c26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002c28:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	4798      	blx	r3
    }
  }
  return status;
 8002c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b087      	sub	sp, #28
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c62:	e166      	b.n	8002f32 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8158 	beq.w	8002f2c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d005      	beq.n	8002c94 <HAL_GPIO_Init+0x40>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d130      	bne.n	8002cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	43db      	mvns	r3, r3
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cca:	2201      	movs	r2, #1
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	f003 0201 	and.w	r2, r3, #1
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d017      	beq.n	8002d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43db      	mvns	r3, r3
 8002d14:	693a      	ldr	r2, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	f003 0303 	and.w	r3, r3, #3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d123      	bne.n	8002d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	08da      	lsrs	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3208      	adds	r2, #8
 8002d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	6939      	ldr	r1, [r7, #16]
 8002d82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	43db      	mvns	r3, r3
 8002d98:	693a      	ldr	r2, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f003 0203 	and.w	r2, r3, #3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	f000 80b2 	beq.w	8002f2c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc8:	4b61      	ldr	r3, [pc, #388]	; (8002f50 <HAL_GPIO_Init+0x2fc>)
 8002dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dcc:	4a60      	ldr	r2, [pc, #384]	; (8002f50 <HAL_GPIO_Init+0x2fc>)
 8002dce:	f043 0301 	orr.w	r3, r3, #1
 8002dd2:	6613      	str	r3, [r2, #96]	; 0x60
 8002dd4:	4b5e      	ldr	r3, [pc, #376]	; (8002f50 <HAL_GPIO_Init+0x2fc>)
 8002dd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	60bb      	str	r3, [r7, #8]
 8002dde:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002de0:	4a5c      	ldr	r2, [pc, #368]	; (8002f54 <HAL_GPIO_Init+0x300>)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	089b      	lsrs	r3, r3, #2
 8002de6:	3302      	adds	r3, #2
 8002de8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dec:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	009b      	lsls	r3, r3, #2
 8002df6:	220f      	movs	r2, #15
 8002df8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfc:	43db      	mvns	r3, r3
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002e0a:	d02b      	beq.n	8002e64 <HAL_GPIO_Init+0x210>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a52      	ldr	r2, [pc, #328]	; (8002f58 <HAL_GPIO_Init+0x304>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d025      	beq.n	8002e60 <HAL_GPIO_Init+0x20c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a51      	ldr	r2, [pc, #324]	; (8002f5c <HAL_GPIO_Init+0x308>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d01f      	beq.n	8002e5c <HAL_GPIO_Init+0x208>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	4a50      	ldr	r2, [pc, #320]	; (8002f60 <HAL_GPIO_Init+0x30c>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d019      	beq.n	8002e58 <HAL_GPIO_Init+0x204>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	4a4f      	ldr	r2, [pc, #316]	; (8002f64 <HAL_GPIO_Init+0x310>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d013      	beq.n	8002e54 <HAL_GPIO_Init+0x200>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a4e      	ldr	r2, [pc, #312]	; (8002f68 <HAL_GPIO_Init+0x314>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00d      	beq.n	8002e50 <HAL_GPIO_Init+0x1fc>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a4d      	ldr	r2, [pc, #308]	; (8002f6c <HAL_GPIO_Init+0x318>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d007      	beq.n	8002e4c <HAL_GPIO_Init+0x1f8>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a4c      	ldr	r2, [pc, #304]	; (8002f70 <HAL_GPIO_Init+0x31c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d101      	bne.n	8002e48 <HAL_GPIO_Init+0x1f4>
 8002e44:	2307      	movs	r3, #7
 8002e46:	e00e      	b.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e48:	2308      	movs	r3, #8
 8002e4a:	e00c      	b.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e4c:	2306      	movs	r3, #6
 8002e4e:	e00a      	b.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e50:	2305      	movs	r3, #5
 8002e52:	e008      	b.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e54:	2304      	movs	r3, #4
 8002e56:	e006      	b.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e004      	b.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e002      	b.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e60:	2301      	movs	r3, #1
 8002e62:	e000      	b.n	8002e66 <HAL_GPIO_Init+0x212>
 8002e64:	2300      	movs	r3, #0
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	f002 0203 	and.w	r2, r2, #3
 8002e6c:	0092      	lsls	r2, r2, #2
 8002e6e:	4093      	lsls	r3, r2
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002e76:	4937      	ldr	r1, [pc, #220]	; (8002f54 <HAL_GPIO_Init+0x300>)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e84:	4b3b      	ldr	r3, [pc, #236]	; (8002f74 <HAL_GPIO_Init+0x320>)
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	43db      	mvns	r3, r3
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	4013      	ands	r3, r2
 8002e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d003      	beq.n	8002ea8 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ea8:	4a32      	ldr	r2, [pc, #200]	; (8002f74 <HAL_GPIO_Init+0x320>)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002eae:	4b31      	ldr	r3, [pc, #196]	; (8002f74 <HAL_GPIO_Init+0x320>)
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	4013      	ands	r3, r2
 8002ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ed2:	4a28      	ldr	r2, [pc, #160]	; (8002f74 <HAL_GPIO_Init+0x320>)
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ed8:	4b26      	ldr	r3, [pc, #152]	; (8002f74 <HAL_GPIO_Init+0x320>)
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	693a      	ldr	r2, [r7, #16]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d003      	beq.n	8002efc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002efc:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <HAL_GPIO_Init+0x320>)
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002f02:	4b1c      	ldr	r3, [pc, #112]	; (8002f74 <HAL_GPIO_Init+0x320>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	43db      	mvns	r3, r3
 8002f0c:	693a      	ldr	r2, [r7, #16]
 8002f0e:	4013      	ands	r3, r2
 8002f10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002f26:	4a13      	ldr	r2, [pc, #76]	; (8002f74 <HAL_GPIO_Init+0x320>)
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	3301      	adds	r3, #1
 8002f30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	fa22 f303 	lsr.w	r3, r2, r3
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f47f ae91 	bne.w	8002c64 <HAL_GPIO_Init+0x10>
  }
}
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40010000 	.word	0x40010000
 8002f58:	48000400 	.word	0x48000400
 8002f5c:	48000800 	.word	0x48000800
 8002f60:	48000c00 	.word	0x48000c00
 8002f64:	48001000 	.word	0x48001000
 8002f68:	48001400 	.word	0x48001400
 8002f6c:	48001800 	.word	0x48001800
 8002f70:	48001c00 	.word	0x48001c00
 8002f74:	40010400 	.word	0x40010400

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f94:	e002      	b.n	8002f9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f96:	887a      	ldrh	r2, [r7, #2]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002f9c:	bf00      	nop
 8002f9e:	370c      	adds	r7, #12
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002faa:	b08f      	sub	sp, #60	; 0x3c
 8002fac:	af0a      	add	r7, sp, #40	; 0x28
 8002fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e116      	b.n	80031e8 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d106      	bne.n	8002fda <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fd4:	6878      	ldr	r0, [r7, #4]
 8002fd6:	f008 fa97 	bl	800b508 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2203      	movs	r2, #3
 8002fde:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d102      	bne.n	8002ff4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f005 fa5e 	bl	80084ba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	687e      	ldr	r6, [r7, #4]
 8003006:	466d      	mov	r5, sp
 8003008:	f106 0410 	add.w	r4, r6, #16
 800300c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800300e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003014:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003018:	e885 0003 	stmia.w	r5, {r0, r1}
 800301c:	1d33      	adds	r3, r6, #4
 800301e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003020:	6838      	ldr	r0, [r7, #0]
 8003022:	f005 f971 	bl	8008308 <USB_CoreInit>
 8003026:	4603      	mov	r3, r0
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0d7      	b.n	80031e8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2100      	movs	r1, #0
 800303e:	4618      	mov	r0, r3
 8003040:	f005 fa4c 	bl	80084dc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e04a      	b.n	80030e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800304a:	7bfa      	ldrb	r2, [r7, #15]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	333d      	adds	r3, #61	; 0x3d
 800305a:	2201      	movs	r2, #1
 800305c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	333c      	adds	r3, #60	; 0x3c
 800306e:	7bfa      	ldrb	r2, [r7, #15]
 8003070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	b298      	uxth	r0, r3
 8003078:	6879      	ldr	r1, [r7, #4]
 800307a:	4613      	mov	r3, r2
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	1a9b      	subs	r3, r3, r2
 8003080:	009b      	lsls	r3, r3, #2
 8003082:	440b      	add	r3, r1
 8003084:	3342      	adds	r3, #66	; 0x42
 8003086:	4602      	mov	r2, r0
 8003088:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	333f      	adds	r3, #63	; 0x3f
 800309a:	2200      	movs	r2, #0
 800309c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3344      	adds	r3, #68	; 0x44
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3348      	adds	r3, #72	; 0x48
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	1a9b      	subs	r3, r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	3350      	adds	r3, #80	; 0x50
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030da:	7bfb      	ldrb	r3, [r7, #15]
 80030dc:	3301      	adds	r3, #1
 80030de:	73fb      	strb	r3, [r7, #15]
 80030e0:	7bfa      	ldrb	r2, [r7, #15]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d3af      	bcc.n	800304a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	73fb      	strb	r3, [r7, #15]
 80030ee:	e044      	b.n	800317a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80030f0:	7bfa      	ldrb	r2, [r7, #15]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003106:	7bfa      	ldrb	r2, [r7, #15]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003118:	7bfa      	ldrb	r2, [r7, #15]
 800311a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800311c:	7bfa      	ldrb	r2, [r7, #15]
 800311e:	6879      	ldr	r1, [r7, #4]
 8003120:	4613      	mov	r3, r2
 8003122:	00db      	lsls	r3, r3, #3
 8003124:	1a9b      	subs	r3, r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003132:	7bfa      	ldrb	r2, [r7, #15]
 8003134:	6879      	ldr	r1, [r7, #4]
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003144:	2200      	movs	r2, #0
 8003146:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003148:	7bfa      	ldrb	r2, [r7, #15]
 800314a:	6879      	ldr	r1, [r7, #4]
 800314c:	4613      	mov	r3, r2
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	1a9b      	subs	r3, r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800315a:	2200      	movs	r2, #0
 800315c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800315e:	7bfa      	ldrb	r2, [r7, #15]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	4613      	mov	r3, r2
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	1a9b      	subs	r3, r3, r2
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	440b      	add	r3, r1
 800316c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003170:	2200      	movs	r2, #0
 8003172:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003174:	7bfb      	ldrb	r3, [r7, #15]
 8003176:	3301      	adds	r3, #1
 8003178:	73fb      	strb	r3, [r7, #15]
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	d3b5      	bcc.n	80030f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	687e      	ldr	r6, [r7, #4]
 800318c:	466d      	mov	r5, sp
 800318e:	f106 0410 	add.w	r4, r6, #16
 8003192:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003194:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800319e:	e885 0003 	stmia.w	r5, {r0, r1}
 80031a2:	1d33      	adds	r3, r6, #4
 80031a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031a6:	6838      	ldr	r0, [r7, #0]
 80031a8:	f005 f9e4 	bl	8008574 <USB_DevInit>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d005      	beq.n	80031be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2202      	movs	r2, #2
 80031b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e014      	b.n	80031e8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d102      	bne.n	80031dc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 ff56 	bl	8004088 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f006 f9b6 	bl	8009552 <USB_DevDisconnect>

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3714      	adds	r7, #20
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_PCD_Start+0x1c>
 8003208:	2302      	movs	r3, #2
 800320a:	e01c      	b.n	8003246 <HAL_PCD_Start+0x56>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	2b01      	cmp	r3, #1
 800321a:	d105      	bne.n	8003228 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4618      	mov	r0, r3
 800322e:	f005 f933 	bl	8008498 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f006 f96a 	bl	8009510 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}

0800324e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800324e:	b590      	push	{r4, r7, lr}
 8003250:	b08d      	sub	sp, #52	; 0x34
 8003252:	af00      	add	r7, sp, #0
 8003254:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f006 fa28 	bl	80096ba <USB_GetMode>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	f040 8384 	bne.w	800397a <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4618      	mov	r0, r3
 8003278:	f006 f98c 	bl	8009594 <USB_ReadInterrupts>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 837a 	beq.w	8003978 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f006 f983 	bl	8009594 <USB_ReadInterrupts>
 800328e:	4603      	mov	r3, r0
 8003290:	f003 0302 	and.w	r3, r3, #2
 8003294:	2b02      	cmp	r3, #2
 8003296:	d107      	bne.n	80032a8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f002 0202 	and.w	r2, r2, #2
 80032a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f006 f971 	bl	8009594 <USB_ReadInterrupts>
 80032b2:	4603      	mov	r3, r0
 80032b4:	f003 0310 	and.w	r3, r3, #16
 80032b8:	2b10      	cmp	r3, #16
 80032ba:	d161      	bne.n	8003380 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0210 	bic.w	r2, r2, #16
 80032ca:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80032cc:	6a3b      	ldr	r3, [r7, #32]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	f003 020f 	and.w	r2, r3, #15
 80032d8:	4613      	mov	r3, r2
 80032da:	00db      	lsls	r3, r3, #3
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032e4:	687a      	ldr	r2, [r7, #4]
 80032e6:	4413      	add	r3, r2
 80032e8:	3304      	adds	r3, #4
 80032ea:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	0c5b      	lsrs	r3, r3, #17
 80032f0:	f003 030f 	and.w	r3, r3, #15
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d124      	bne.n	8003342 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80032fe:	4013      	ands	r3, r2
 8003300:	2b00      	cmp	r3, #0
 8003302:	d035      	beq.n	8003370 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	091b      	lsrs	r3, r3, #4
 800330c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800330e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003312:	b29b      	uxth	r3, r3
 8003314:	461a      	mov	r2, r3
 8003316:	6a38      	ldr	r0, [r7, #32]
 8003318:	f005 ffa8 	bl	800926c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	68da      	ldr	r2, [r3, #12]
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003328:	441a      	add	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	699a      	ldr	r2, [r3, #24]
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	091b      	lsrs	r3, r3, #4
 8003336:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800333a:	441a      	add	r2, r3
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	619a      	str	r2, [r3, #24]
 8003340:	e016      	b.n	8003370 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003342:	69bb      	ldr	r3, [r7, #24]
 8003344:	0c5b      	lsrs	r3, r3, #17
 8003346:	f003 030f 	and.w	r3, r3, #15
 800334a:	2b06      	cmp	r3, #6
 800334c:	d110      	bne.n	8003370 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003354:	2208      	movs	r2, #8
 8003356:	4619      	mov	r1, r3
 8003358:	6a38      	ldr	r0, [r7, #32]
 800335a:	f005 ff87 	bl	800926c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	091b      	lsrs	r3, r3, #4
 8003366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800336a:	441a      	add	r2, r3
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0210 	orr.w	r2, r2, #16
 800337e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f006 f905 	bl	8009594 <USB_ReadInterrupts>
 800338a:	4603      	mov	r3, r0
 800338c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003390:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003394:	d16e      	bne.n	8003474 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4618      	mov	r0, r3
 80033a0:	f006 f90b 	bl	80095ba <USB_ReadDevAllOutEpInterrupt>
 80033a4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80033a6:	e062      	b.n	800346e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80033a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d057      	beq.n	8003462 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f006 f930 	bl	8009622 <USB_ReadDevOutEPInterrupt>
 80033c2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00c      	beq.n	80033e8 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	015a      	lsls	r2, r3, #5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	4413      	add	r3, r2
 80033d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033da:	461a      	mov	r2, r3
 80033dc:	2301      	movs	r3, #1
 80033de:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80033e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fd76 	bl	8003ed4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00c      	beq.n	800340c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	015a      	lsls	r2, r3, #5
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	4413      	add	r3, r2
 80033fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033fe:	461a      	mov	r2, r3
 8003400:	2308      	movs	r3, #8
 8003402:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 fdb2 	bl	8003f70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d008      	beq.n	8003428 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	015a      	lsls	r2, r3, #5
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	4413      	add	r3, r2
 800341e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003422:	461a      	mov	r2, r3
 8003424:	2310      	movs	r3, #16
 8003426:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	4413      	add	r3, r2
 800343a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800343e:	461a      	mov	r2, r3
 8003440:	2320      	movs	r3, #32
 8003442:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d009      	beq.n	8003462 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	015a      	lsls	r2, r3, #5
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	4413      	add	r3, r2
 8003456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800345a:	461a      	mov	r2, r3
 800345c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003460:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	3301      	adds	r3, #1
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800346e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003470:	2b00      	cmp	r3, #0
 8003472:	d199      	bne.n	80033a8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f006 f88b 	bl	8009594 <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003484:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003488:	f040 808c 	bne.w	80035a4 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f006 f8ac 	bl	80095ee <USB_ReadDevAllInEpInterrupt>
 8003496:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800349c:	e07e      	b.n	800359c <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800349e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d073      	beq.n	8003590 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	4611      	mov	r1, r2
 80034b2:	4618      	mov	r0, r3
 80034b4:	f006 f8d3 	bl	800965e <USB_ReadDevInEPInterrupt>
 80034b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80034c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	2201      	movs	r2, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80034d2:	69fb      	ldr	r3, [r7, #28]
 80034d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	43db      	mvns	r3, r3
 80034de:	69f9      	ldr	r1, [r7, #28]
 80034e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034e4:	4013      	ands	r3, r2
 80034e6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80034e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034f4:	461a      	mov	r2, r3
 80034f6:	2301      	movs	r3, #1
 80034f8:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80034fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	4619      	mov	r1, r3
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f008 f8b0 	bl	800b666 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d008      	beq.n	8003522 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003512:	015a      	lsls	r2, r3, #5
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	4413      	add	r3, r2
 8003518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800351c:	461a      	mov	r2, r3
 800351e:	2308      	movs	r3, #8
 8003520:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	f003 0310 	and.w	r3, r3, #16
 8003528:	2b00      	cmp	r3, #0
 800352a:	d008      	beq.n	800353e <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800352c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352e:	015a      	lsls	r2, r3, #5
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	4413      	add	r3, r2
 8003534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003538:	461a      	mov	r2, r3
 800353a:	2310      	movs	r3, #16
 800353c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b00      	cmp	r3, #0
 8003546:	d008      	beq.n	800355a <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	4413      	add	r3, r2
 8003550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003554:	461a      	mov	r2, r3
 8003556:	2340      	movs	r3, #64	; 0x40
 8003558:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00c      	beq.n	800357e <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003566:	6a38      	ldr	r0, [r7, #32]
 8003568:	f005 f950 	bl	800880c <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	015a      	lsls	r2, r3, #5
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	4413      	add	r3, r2
 8003574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003578:	461a      	mov	r2, r3
 800357a:	2302      	movs	r3, #2
 800357c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003588:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fc1a 	bl	8003dc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003592:	3301      	adds	r3, #1
 8003594:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003598:	085b      	lsrs	r3, r3, #1
 800359a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	2b00      	cmp	r3, #0
 80035a0:	f47f af7d 	bne.w	800349e <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f005 fff3 	bl	8009594 <USB_ReadInterrupts>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035b8:	d122      	bne.n	8003600 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80035c8:	f023 0301 	bic.w	r3, r3, #1
 80035cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d108      	bne.n	80035ea <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80035e0:	2100      	movs	r1, #0
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f008 fb56 	bl	800bc94 <HAL_PCDEx_LPM_Callback>
 80035e8:	e002      	b.n	80035f0 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f008 f8a8 	bl	800b740 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	695a      	ldr	r2, [r3, #20]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80035fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f005 ffc5 	bl	8009594 <USB_ReadInterrupts>
 800360a:	4603      	mov	r3, r0
 800360c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003614:	d112      	bne.n	800363c <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	2b01      	cmp	r3, #1
 8003624:	d102      	bne.n	800362c <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f008 f864 	bl	800b6f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	695a      	ldr	r2, [r3, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800363a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f005 ffa7 	bl	8009594 <USB_ReadInterrupts>
 8003646:	4603      	mov	r3, r0
 8003648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800364c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003650:	d121      	bne.n	8003696 <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695a      	ldr	r2, [r3, #20]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003660:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d111      	bne.n	8003690 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800367a:	089b      	lsrs	r3, r3, #2
 800367c:	f003 020f 	and.w	r2, r3, #15
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003686:	2101      	movs	r1, #1
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f008 fb03 	bl	800bc94 <HAL_PCDEx_LPM_Callback>
 800368e:	e002      	b.n	8003696 <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f008 f82f 	bl	800b6f4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f005 ff7a 	bl	8009594 <USB_ReadInterrupts>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036aa:	f040 80b5 	bne.w	8003818 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036bc:	f023 0301 	bic.w	r3, r3, #1
 80036c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2110      	movs	r1, #16
 80036c8:	4618      	mov	r0, r3
 80036ca:	f005 f89f 	bl	800880c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036ce:	2300      	movs	r3, #0
 80036d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036d2:	e046      	b.n	8003762 <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80036d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	69fb      	ldr	r3, [r7, #28]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036e0:	461a      	mov	r2, r3
 80036e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80036e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80036e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003706:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	461a      	mov	r2, r3
 8003716:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800371a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800371c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800372c:	0151      	lsls	r1, r2, #5
 800372e:	69fa      	ldr	r2, [r7, #28]
 8003730:	440a      	add	r2, r1
 8003732:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003736:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800373a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800373c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373e:	015a      	lsls	r2, r3, #5
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	4413      	add	r3, r2
 8003744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800374c:	0151      	lsls	r1, r2, #5
 800374e:	69fa      	ldr	r2, [r7, #28]
 8003750:	440a      	add	r2, r1
 8003752:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003756:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800375a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800375c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375e:	3301      	adds	r3, #1
 8003760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003768:	429a      	cmp	r2, r3
 800376a:	d3b3      	bcc.n	80036d4 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003772:	69db      	ldr	r3, [r3, #28]
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800377a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800377e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003784:	2b00      	cmp	r3, #0
 8003786:	d016      	beq.n	80037b6 <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003792:	69fa      	ldr	r2, [r7, #28]
 8003794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003798:	f043 030b 	orr.w	r3, r3, #11
 800379c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037ae:	f043 030b 	orr.w	r3, r3, #11
 80037b2:	6453      	str	r3, [r2, #68]	; 0x44
 80037b4:	e015      	b.n	80037e2 <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	69fa      	ldr	r2, [r7, #28]
 80037c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037c8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80037cc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d4:	691b      	ldr	r3, [r3, #16]
 80037d6:	69fa      	ldr	r2, [r7, #28]
 80037d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037dc:	f043 030b 	orr.w	r3, r3, #11
 80037e0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037f0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80037f4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f005 ff8a 	bl	800971c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003816:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4618      	mov	r0, r3
 800381e:	f005 feb9 	bl	8009594 <USB_ReadInterrupts>
 8003822:	4603      	mov	r3, r0
 8003824:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800382c:	d124      	bne.n	8003878 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f005 ff4f 	bl	80096d6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f005 f85e 	bl	80088fe <USB_GetDevSpeed>
 8003842:	4603      	mov	r3, r0
 8003844:	461a      	mov	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681c      	ldr	r4, [r3, #0]
 800384e:	f001 faff 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8003852:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003858:	b2db      	uxtb	r3, r3
 800385a:	461a      	mov	r2, r3
 800385c:	4620      	mov	r0, r4
 800385e:	f004 fd7f 	bl	8008360 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f007 ff27 	bl	800b6b6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	695a      	ldr	r2, [r3, #20]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003876:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4618      	mov	r0, r3
 800387e:	f005 fe89 	bl	8009594 <USB_ReadInterrupts>
 8003882:	4603      	mov	r3, r0
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b08      	cmp	r3, #8
 800388a:	d10a      	bne.n	80038a2 <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f007 ff04 	bl	800b69a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	695a      	ldr	r2, [r3, #20]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f002 0208 	and.w	r2, r2, #8
 80038a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f005 fe74 	bl	8009594 <USB_ReadInterrupts>
 80038ac:	4603      	mov	r3, r0
 80038ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038b6:	d10f      	bne.n	80038d8 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038b8:	2300      	movs	r3, #0
 80038ba:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	4619      	mov	r1, r3
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f007 ff76 	bl	800b7b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695a      	ldr	r2, [r3, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80038d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f005 fe59 	bl	8009594 <USB_ReadInterrupts>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80038ec:	d10f      	bne.n	800390e <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	4619      	mov	r1, r3
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f007 ff49 	bl	800b790 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695a      	ldr	r2, [r3, #20]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800390c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f005 fe3e 	bl	8009594 <USB_ReadInterrupts>
 8003918:	4603      	mov	r3, r0
 800391a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800391e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003922:	d10a      	bne.n	800393a <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f007 ff57 	bl	800b7d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	695a      	ldr	r2, [r3, #20]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003938:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4618      	mov	r0, r3
 8003940:	f005 fe28 	bl	8009594 <USB_ReadInterrupts>
 8003944:	4603      	mov	r3, r0
 8003946:	f003 0304 	and.w	r3, r3, #4
 800394a:	2b04      	cmp	r3, #4
 800394c:	d115      	bne.n	800397a <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	f003 0304 	and.w	r3, r3, #4
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f007 ff47 	bl	800b7f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6859      	ldr	r1, [r3, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	e000      	b.n	800397a <HAL_PCD_IRQHandler+0x72c>
      return;
 8003978:	bf00      	nop
    }
  }
}
 800397a:	3734      	adds	r7, #52	; 0x34
 800397c:	46bd      	mov	sp, r7
 800397e:	bd90      	pop	{r4, r7, pc}

08003980 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	460b      	mov	r3, r1
 800398a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003992:	2b01      	cmp	r3, #1
 8003994:	d101      	bne.n	800399a <HAL_PCD_SetAddress+0x1a>
 8003996:	2302      	movs	r3, #2
 8003998:	e013      	b.n	80039c2 <HAL_PCD_SetAddress+0x42>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f005 fd86 	bl	80094c4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	4608      	mov	r0, r1
 80039d4:	4611      	mov	r1, r2
 80039d6:	461a      	mov	r2, r3
 80039d8:	4603      	mov	r3, r0
 80039da:	70fb      	strb	r3, [r7, #3]
 80039dc:	460b      	mov	r3, r1
 80039de:	803b      	strh	r3, [r7, #0]
 80039e0:	4613      	mov	r3, r2
 80039e2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80039e4:	2300      	movs	r3, #0
 80039e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80039e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	da0f      	bge.n	8003a10 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 020f 	and.w	r2, r3, #15
 80039f6:	4613      	mov	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	3338      	adds	r3, #56	; 0x38
 8003a00:	687a      	ldr	r2, [r7, #4]
 8003a02:	4413      	add	r3, r2
 8003a04:	3304      	adds	r3, #4
 8003a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	705a      	strb	r2, [r3, #1]
 8003a0e:	e00f      	b.n	8003a30 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a10:	78fb      	ldrb	r3, [r7, #3]
 8003a12:	f003 020f 	and.w	r2, r3, #15
 8003a16:	4613      	mov	r3, r2
 8003a18:	00db      	lsls	r3, r3, #3
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	4413      	add	r3, r2
 8003a26:	3304      	adds	r3, #4
 8003a28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	f003 030f 	and.w	r3, r3, #15
 8003a36:	b2da      	uxtb	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003a3c:	883a      	ldrh	r2, [r7, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	78ba      	ldrb	r2, [r7, #2]
 8003a46:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	785b      	ldrb	r3, [r3, #1]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003a5a:	78bb      	ldrb	r3, [r7, #2]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d102      	bne.n	8003a66 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2200      	movs	r2, #0
 8003a64:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_PCD_EP_Open+0xaa>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e00e      	b.n	8003a92 <HAL_PCD_EP_Open+0xc8>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68f9      	ldr	r1, [r7, #12]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f004 ff5a 	bl	800893c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003a90:	7afb      	ldrb	r3, [r7, #11]
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3710      	adds	r7, #16
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}

08003a9a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a9a:	b580      	push	{r7, lr}
 8003a9c:	b084      	sub	sp, #16
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	da0f      	bge.n	8003ace <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aae:	78fb      	ldrb	r3, [r7, #3]
 8003ab0:	f003 020f 	and.w	r2, r3, #15
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	00db      	lsls	r3, r3, #3
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	3338      	adds	r3, #56	; 0x38
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3304      	adds	r3, #4
 8003ac4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	705a      	strb	r2, [r3, #1]
 8003acc:	e00f      	b.n	8003aee <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	f003 020f 	and.w	r2, r3, #15
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	1a9b      	subs	r3, r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ae0:	687a      	ldr	r2, [r7, #4]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	3304      	adds	r3, #4
 8003ae6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2200      	movs	r2, #0
 8003aec:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003aee:	78fb      	ldrb	r3, [r7, #3]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	b2da      	uxtb	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d101      	bne.n	8003b08 <HAL_PCD_EP_Close+0x6e>
 8003b04:	2302      	movs	r3, #2
 8003b06:	e00e      	b.n	8003b26 <HAL_PCD_EP_Close+0x8c>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68f9      	ldr	r1, [r7, #12]
 8003b16:	4618      	mov	r0, r3
 8003b18:	f004 ff98 	bl	8008a4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003b24:	2300      	movs	r3, #0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3710      	adds	r7, #16
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}

08003b2e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b086      	sub	sp, #24
 8003b32:	af00      	add	r7, sp, #0
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	607a      	str	r2, [r7, #4]
 8003b38:	603b      	str	r3, [r7, #0]
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b3e:	7afb      	ldrb	r3, [r7, #11]
 8003b40:	f003 020f 	and.w	r2, r3, #15
 8003b44:	4613      	mov	r3, r2
 8003b46:	00db      	lsls	r3, r3, #3
 8003b48:	1a9b      	subs	r3, r3, r2
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b50:	68fa      	ldr	r2, [r7, #12]
 8003b52:	4413      	add	r3, r2
 8003b54:	3304      	adds	r3, #4
 8003b56:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	2200      	movs	r2, #0
 8003b68:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b70:	7afb      	ldrb	r3, [r7, #11]
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	b2da      	uxtb	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003b7c:	7afb      	ldrb	r3, [r7, #11]
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d106      	bne.n	8003b94 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6979      	ldr	r1, [r7, #20]
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f005 fa15 	bl	8008fbc <USB_EP0StartXfer>
 8003b92:	e005      	b.n	8003ba0 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6979      	ldr	r1, [r7, #20]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f005 f832 	bl	8008c04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ba0:	2300      	movs	r3, #0
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3718      	adds	r7, #24
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bd80      	pop	{r7, pc}

08003baa <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	f003 020f 	and.w	r2, r3, #15
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	00db      	lsls	r3, r3, #3
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003bcc:	681b      	ldr	r3, [r3, #0]
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	370c      	adds	r7, #12
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr

08003bda <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b086      	sub	sp, #24
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	60f8      	str	r0, [r7, #12]
 8003be2:	607a      	str	r2, [r7, #4]
 8003be4:	603b      	str	r3, [r7, #0]
 8003be6:	460b      	mov	r3, r1
 8003be8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003bea:	7afb      	ldrb	r3, [r7, #11]
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	00db      	lsls	r3, r3, #3
 8003bf4:	1a9b      	subs	r3, r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	3338      	adds	r3, #56	; 0x38
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	3304      	adds	r3, #4
 8003c00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	2200      	movs	r2, #0
 8003c12:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	2201      	movs	r2, #1
 8003c18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c1a:	7afb      	ldrb	r3, [r7, #11]
 8003c1c:	f003 030f 	and.w	r3, r3, #15
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003c26:	7afb      	ldrb	r3, [r7, #11]
 8003c28:	f003 030f 	and.w	r3, r3, #15
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d106      	bne.n	8003c3e <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6979      	ldr	r1, [r7, #20]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f005 f9c0 	bl	8008fbc <USB_EP0StartXfer>
 8003c3c:	e005      	b.n	8003c4a <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6979      	ldr	r1, [r7, #20]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f004 ffdd 	bl	8008c04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003c4a:	2300      	movs	r3, #0
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	3718      	adds	r7, #24
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}

08003c54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b084      	sub	sp, #16
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003c60:	78fb      	ldrb	r3, [r7, #3]
 8003c62:	f003 020f 	and.w	r2, r3, #15
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d901      	bls.n	8003c72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e04e      	b.n	8003d10 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	da0f      	bge.n	8003c9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c7a:	78fb      	ldrb	r3, [r7, #3]
 8003c7c:	f003 020f 	and.w	r2, r3, #15
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	3338      	adds	r3, #56	; 0x38
 8003c8a:	687a      	ldr	r2, [r7, #4]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	3304      	adds	r3, #4
 8003c90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	705a      	strb	r2, [r3, #1]
 8003c98:	e00d      	b.n	8003cb6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003c9a:	78fa      	ldrb	r2, [r7, #3]
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	00db      	lsls	r3, r3, #3
 8003ca0:	1a9b      	subs	r3, r3, r2
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	4413      	add	r3, r2
 8003cac:	3304      	adds	r3, #4
 8003cae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cbc:	78fb      	ldrb	r3, [r7, #3]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_PCD_EP_SetStall+0x82>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e01c      	b.n	8003d10 <HAL_PCD_EP_SetStall+0xbc>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68f9      	ldr	r1, [r7, #12]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f005 fb19 	bl	800931c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cea:	78fb      	ldrb	r3, [r7, #3]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d108      	bne.n	8003d06 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f005 fd0b 	bl	800971c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d0e:	2300      	movs	r3, #0
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	460b      	mov	r3, r1
 8003d22:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003d24:	78fb      	ldrb	r3, [r7, #3]
 8003d26:	f003 020f 	and.w	r2, r3, #15
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d901      	bls.n	8003d36 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e042      	b.n	8003dbc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003d36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	da0f      	bge.n	8003d5e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d3e:	78fb      	ldrb	r3, [r7, #3]
 8003d40:	f003 020f 	and.w	r2, r3, #15
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	3338      	adds	r3, #56	; 0x38
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	4413      	add	r3, r2
 8003d52:	3304      	adds	r3, #4
 8003d54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2201      	movs	r2, #1
 8003d5a:	705a      	strb	r2, [r3, #1]
 8003d5c:	e00f      	b.n	8003d7e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d5e:	78fb      	ldrb	r3, [r7, #3]
 8003d60:	f003 020f 	and.w	r2, r3, #15
 8003d64:	4613      	mov	r3, r2
 8003d66:	00db      	lsls	r3, r3, #3
 8003d68:	1a9b      	subs	r3, r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	4413      	add	r3, r2
 8003d74:	3304      	adds	r3, #4
 8003d76:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	f003 030f 	and.w	r3, r3, #15
 8003d8a:	b2da      	uxtb	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_PCD_EP_ClrStall+0x86>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e00e      	b.n	8003dbc <HAL_PCD_EP_ClrStall+0xa4>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	68f9      	ldr	r1, [r7, #12]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f005 fb23 	bl	80093f8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b088      	sub	sp, #32
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	00db      	lsls	r3, r3, #3
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	3338      	adds	r3, #56	; 0x38
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	4413      	add	r3, r2
 8003de8:	3304      	adds	r3, #4
 8003dea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	699a      	ldr	r2, [r3, #24]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d901      	bls.n	8003dfc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e067      	b.n	8003ecc <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	695a      	ldr	r2, [r3, #20]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	69fa      	ldr	r2, [r7, #28]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	d902      	bls.n	8003e18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	3303      	adds	r3, #3
 8003e1c:	089b      	lsrs	r3, r3, #2
 8003e1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e20:	e026      	b.n	8003e70 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	699b      	ldr	r3, [r3, #24]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d902      	bls.n	8003e3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	3303      	adds	r3, #3
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	68d9      	ldr	r1, [r3, #12]
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	b2da      	uxtb	r2, r3
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	b29b      	uxth	r3, r3
 8003e52:	6978      	ldr	r0, [r7, #20]
 8003e54:	f005 f9d0 	bl	80091f8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	68da      	ldr	r2, [r3, #12]
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	441a      	add	r2, r3
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	699a      	ldr	r2, [r3, #24]
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	441a      	add	r2, r3
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d809      	bhi.n	8003e9a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	699a      	ldr	r2, [r3, #24]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d203      	bcs.n	8003e9a <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d1c3      	bne.n	8003e22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	695a      	ldr	r2, [r3, #20]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d811      	bhi.n	8003eca <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f003 030f 	and.w	r3, r3, #15
 8003eac:	2201      	movs	r2, #1
 8003eae:	fa02 f303 	lsl.w	r3, r2, r3
 8003eb2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	43db      	mvns	r3, r3
 8003ec0:	6939      	ldr	r1, [r7, #16]
 8003ec2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3720      	adds	r7, #32
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b086      	sub	sp, #24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
 8003edc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	333c      	adds	r3, #60	; 0x3c
 8003eec:	3304      	adds	r3, #4
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4a19      	ldr	r2, [pc, #100]	; (8003f6c <PCD_EP_OutXfrComplete_int+0x98>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d124      	bne.n	8003f54 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00a      	beq.n	8003f2a <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f20:	461a      	mov	r2, r3
 8003f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f26:	6093      	str	r3, [r2, #8]
 8003f28:	e01a      	b.n	8003f60 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	f003 0320 	and.w	r3, r3, #32
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d008      	beq.n	8003f46 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	015a      	lsls	r2, r3, #5
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	4413      	add	r3, r2
 8003f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f40:	461a      	mov	r2, r3
 8003f42:	2320      	movs	r3, #32
 8003f44:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	4619      	mov	r1, r3
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f007 fb6f 	bl	800b630 <HAL_PCD_DataOutStageCallback>
 8003f52:	e005      	b.n	8003f60 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	b2db      	uxtb	r3, r3
 8003f58:	4619      	mov	r1, r3
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f007 fb68 	bl	800b630 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	4f54310a 	.word	0x4f54310a

08003f70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	333c      	adds	r3, #60	; 0x3c
 8003f88:	3304      	adds	r3, #4
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	015a      	lsls	r2, r3, #5
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4413      	add	r3, r2
 8003f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a0c      	ldr	r2, [pc, #48]	; (8003fd4 <PCD_EP_OutSetupPacket_int+0x64>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d90e      	bls.n	8003fc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d009      	beq.n	8003fc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f007 fb21 	bl	800b60c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	4f54300a 	.word	0x4f54300a

08003fd8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	70fb      	strb	r3, [r7, #3]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ff0:	78fb      	ldrb	r3, [r7, #3]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d107      	bne.n	8004006 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ff6:	883b      	ldrh	r3, [r7, #0]
 8003ff8:	0419      	lsls	r1, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	430a      	orrs	r2, r1
 8004002:	629a      	str	r2, [r3, #40]	; 0x28
 8004004:	e028      	b.n	8004058 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800400c:	0c1b      	lsrs	r3, r3, #16
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	4413      	add	r3, r2
 8004012:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004014:	2300      	movs	r3, #0
 8004016:	73fb      	strb	r3, [r7, #15]
 8004018:	e00d      	b.n	8004036 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	7bfb      	ldrb	r3, [r7, #15]
 8004020:	3340      	adds	r3, #64	; 0x40
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	4413      	add	r3, r2
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	0c1b      	lsrs	r3, r3, #16
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	4413      	add	r3, r2
 800402e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004030:	7bfb      	ldrb	r3, [r7, #15]
 8004032:	3301      	adds	r3, #1
 8004034:	73fb      	strb	r3, [r7, #15]
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	78fb      	ldrb	r3, [r7, #3]
 800403a:	3b01      	subs	r3, #1
 800403c:	429a      	cmp	r2, r3
 800403e:	d3ec      	bcc.n	800401a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004040:	883b      	ldrh	r3, [r7, #0]
 8004042:	0418      	lsls	r0, r3, #16
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6819      	ldr	r1, [r3, #0]
 8004048:	78fb      	ldrb	r3, [r7, #3]
 800404a:	3b01      	subs	r3, #1
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	4302      	orrs	r2, r0
 8004050:	3340      	adds	r3, #64	; 0x40
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr

08004066 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004066:	b480      	push	{r7}
 8004068:	b083      	sub	sp, #12
 800406a:	af00      	add	r7, sp, #0
 800406c:	6078      	str	r0, [r7, #4]
 800406e:	460b      	mov	r3, r1
 8004070:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	887a      	ldrh	r2, [r7, #2]
 8004078:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	370c      	adds	r7, #12
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2201      	movs	r2, #1
 800409a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ba:	f043 0303 	orr.w	r3, r3, #3
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80040c2:	2300      	movs	r3, #0
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040d4:	4b0d      	ldr	r3, [pc, #52]	; (800410c <HAL_PWREx_GetVoltageRange+0x3c>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040e0:	d102      	bne.n	80040e8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80040e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040e6:	e00b      	b.n	8004100 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80040e8:	4b08      	ldr	r3, [pc, #32]	; (800410c <HAL_PWREx_GetVoltageRange+0x3c>)
 80040ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f6:	d102      	bne.n	80040fe <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80040f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80040fc:	e000      	b.n	8004100 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80040fe:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004100:	4618      	mov	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40007000 	.word	0x40007000

08004110 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d141      	bne.n	80041a2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800411e:	4b4b      	ldr	r3, [pc, #300]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800412a:	d131      	bne.n	8004190 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800412c:	4b47      	ldr	r3, [pc, #284]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004132:	4a46      	ldr	r2, [pc, #280]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004134:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004138:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800413c:	4b43      	ldr	r3, [pc, #268]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004144:	4a41      	ldr	r2, [pc, #260]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800414a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800414c:	4b40      	ldr	r3, [pc, #256]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2232      	movs	r2, #50	; 0x32
 8004152:	fb02 f303 	mul.w	r3, r2, r3
 8004156:	4a3f      	ldr	r2, [pc, #252]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004158:	fba2 2303 	umull	r2, r3, r2, r3
 800415c:	0c9b      	lsrs	r3, r3, #18
 800415e:	3301      	adds	r3, #1
 8004160:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004162:	e002      	b.n	800416a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	3b01      	subs	r3, #1
 8004168:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800416a:	4b38      	ldr	r3, [pc, #224]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004176:	d102      	bne.n	800417e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f2      	bne.n	8004164 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800417e:	4b33      	ldr	r3, [pc, #204]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004180:	695b      	ldr	r3, [r3, #20]
 8004182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004186:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800418a:	d158      	bne.n	800423e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e057      	b.n	8004240 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004190:	4b2e      	ldr	r3, [pc, #184]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004192:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004196:	4a2d      	ldr	r2, [pc, #180]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800419c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80041a0:	e04d      	b.n	800423e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041a8:	d141      	bne.n	800422e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80041aa:	4b28      	ldr	r3, [pc, #160]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b6:	d131      	bne.n	800421c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80041b8:	4b24      	ldr	r3, [pc, #144]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041be:	4a23      	ldr	r2, [pc, #140]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041c8:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041d0:	4a1e      	ldr	r2, [pc, #120]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041d6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2232      	movs	r2, #50	; 0x32
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	4a1c      	ldr	r2, [pc, #112]	; (8004254 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80041e4:	fba2 2303 	umull	r2, r3, r2, r3
 80041e8:	0c9b      	lsrs	r3, r3, #18
 80041ea:	3301      	adds	r3, #1
 80041ec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041ee:	e002      	b.n	80041f6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004202:	d102      	bne.n	800420a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d1f2      	bne.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800420a:	4b10      	ldr	r3, [pc, #64]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004212:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004216:	d112      	bne.n	800423e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e011      	b.n	8004240 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800421c:	4b0b      	ldr	r3, [pc, #44]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800421e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004222:	4a0a      	ldr	r2, [pc, #40]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004228:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800422c:	e007      	b.n	800423e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800422e:	4b07      	ldr	r3, [pc, #28]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004236:	4a05      	ldr	r2, [pc, #20]	; (800424c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004238:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800423c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800423e:	2300      	movs	r3, #0
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	40007000 	.word	0x40007000
 8004250:	20000000 	.word	0x20000000
 8004254:	431bde83 	.word	0x431bde83

08004258 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_PWREx_EnableVddUSB+0x1c>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4a04      	ldr	r2, [pc, #16]	; (8004274 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004266:	6053      	str	r3, [r2, #4]
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40007000 	.word	0x40007000

08004278 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_PWREx_EnableVddIO2+0x1c>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	4a04      	ldr	r2, [pc, #16]	; (8004294 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004282:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004286:	6053      	str	r3, [r2, #4]
}
 8004288:	bf00      	nop
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40007000 	.word	0x40007000

08004298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	f000 bc16 	b.w	8004ad8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042ac:	4b96      	ldr	r3, [pc, #600]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042b6:	4b94      	ldr	r3, [pc, #592]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0303 	and.w	r3, r3, #3
 80042be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	f000 80e4 	beq.w	8004496 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d007      	beq.n	80042e4 <HAL_RCC_OscConfig+0x4c>
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	2b0c      	cmp	r3, #12
 80042d8:	f040 808b 	bne.w	80043f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	f040 8087 	bne.w	80043f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042e4:	4b88      	ldr	r3, [pc, #544]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d005      	beq.n	80042fc <HAL_RCC_OscConfig+0x64>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e3ed      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a1a      	ldr	r2, [r3, #32]
 8004300:	4b81      	ldr	r3, [pc, #516]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0308 	and.w	r3, r3, #8
 8004308:	2b00      	cmp	r3, #0
 800430a:	d004      	beq.n	8004316 <HAL_RCC_OscConfig+0x7e>
 800430c:	4b7e      	ldr	r3, [pc, #504]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004314:	e005      	b.n	8004322 <HAL_RCC_OscConfig+0x8a>
 8004316:	4b7c      	ldr	r3, [pc, #496]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004322:	4293      	cmp	r3, r2
 8004324:	d223      	bcs.n	800436e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 fdc8 	bl	8004ec0 <RCC_SetFlashLatencyFromMSIRange>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e3ce      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800433a:	4b73      	ldr	r3, [pc, #460]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a72      	ldr	r2, [pc, #456]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004340:	f043 0308 	orr.w	r3, r3, #8
 8004344:	6013      	str	r3, [r2, #0]
 8004346:	4b70      	ldr	r3, [pc, #448]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	496d      	ldr	r1, [pc, #436]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004358:	4b6b      	ldr	r3, [pc, #428]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	69db      	ldr	r3, [r3, #28]
 8004364:	021b      	lsls	r3, r3, #8
 8004366:	4968      	ldr	r1, [pc, #416]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004368:	4313      	orrs	r3, r2
 800436a:	604b      	str	r3, [r1, #4]
 800436c:	e025      	b.n	80043ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800436e:	4b66      	ldr	r3, [pc, #408]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a65      	ldr	r2, [pc, #404]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004374:	f043 0308 	orr.w	r3, r3, #8
 8004378:	6013      	str	r3, [r2, #0]
 800437a:	4b63      	ldr	r3, [pc, #396]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	4960      	ldr	r1, [pc, #384]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004388:	4313      	orrs	r3, r2
 800438a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800438c:	4b5e      	ldr	r3, [pc, #376]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69db      	ldr	r3, [r3, #28]
 8004398:	021b      	lsls	r3, r3, #8
 800439a:	495b      	ldr	r1, [pc, #364]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d109      	bne.n	80043ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fd88 	bl	8004ec0 <RCC_SetFlashLatencyFromMSIRange>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e38e      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ba:	f000 fcbf 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 80043be:	4602      	mov	r2, r0
 80043c0:	4b51      	ldr	r3, [pc, #324]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	091b      	lsrs	r3, r3, #4
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	4950      	ldr	r1, [pc, #320]	; (800450c <HAL_RCC_OscConfig+0x274>)
 80043cc:	5ccb      	ldrb	r3, [r1, r3]
 80043ce:	f003 031f 	and.w	r3, r3, #31
 80043d2:	fa22 f303 	lsr.w	r3, r2, r3
 80043d6:	4a4e      	ldr	r2, [pc, #312]	; (8004510 <HAL_RCC_OscConfig+0x278>)
 80043d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043da:	4b4e      	ldr	r3, [pc, #312]	; (8004514 <HAL_RCC_OscConfig+0x27c>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f7fe f9ec 	bl	80027bc <HAL_InitTick>
 80043e4:	4603      	mov	r3, r0
 80043e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043e8:	7bfb      	ldrb	r3, [r7, #15]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d052      	beq.n	8004494 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
 80043f0:	e372      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	699b      	ldr	r3, [r3, #24]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d032      	beq.n	8004460 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043fa:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a42      	ldr	r2, [pc, #264]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004406:	f7fe fa29 	bl	800285c <HAL_GetTick>
 800440a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800440c:	e008      	b.n	8004420 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800440e:	f7fe fa25 	bl	800285c <HAL_GetTick>
 8004412:	4602      	mov	r2, r0
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	1ad3      	subs	r3, r2, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d901      	bls.n	8004420 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e35b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004420:	4b39      	ldr	r3, [pc, #228]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0302 	and.w	r3, r3, #2
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800442c:	4b36      	ldr	r3, [pc, #216]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a35      	ldr	r2, [pc, #212]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004432:	f043 0308 	orr.w	r3, r3, #8
 8004436:	6013      	str	r3, [r2, #0]
 8004438:	4b33      	ldr	r3, [pc, #204]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a1b      	ldr	r3, [r3, #32]
 8004444:	4930      	ldr	r1, [pc, #192]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444a:	4b2f      	ldr	r3, [pc, #188]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	69db      	ldr	r3, [r3, #28]
 8004456:	021b      	lsls	r3, r3, #8
 8004458:	492b      	ldr	r1, [pc, #172]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 800445a:	4313      	orrs	r3, r2
 800445c:	604b      	str	r3, [r1, #4]
 800445e:	e01a      	b.n	8004496 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004460:	4b29      	ldr	r3, [pc, #164]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a28      	ldr	r2, [pc, #160]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800446c:	f7fe f9f6 	bl	800285c <HAL_GetTick>
 8004470:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004472:	e008      	b.n	8004486 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004474:	f7fe f9f2 	bl	800285c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	2b02      	cmp	r3, #2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e328      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004486:	4b20      	ldr	r3, [pc, #128]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f0      	bne.n	8004474 <HAL_RCC_OscConfig+0x1dc>
 8004492:	e000      	b.n	8004496 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004494:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d073      	beq.n	800458a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b08      	cmp	r3, #8
 80044a6:	d005      	beq.n	80044b4 <HAL_RCC_OscConfig+0x21c>
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b0c      	cmp	r3, #12
 80044ac:	d10e      	bne.n	80044cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d10b      	bne.n	80044cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044b4:	4b14      	ldr	r3, [pc, #80]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d063      	beq.n	8004588 <HAL_RCC_OscConfig+0x2f0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d15f      	bne.n	8004588 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	e305      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044d4:	d106      	bne.n	80044e4 <HAL_RCC_OscConfig+0x24c>
 80044d6:	4b0c      	ldr	r3, [pc, #48]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a0b      	ldr	r2, [pc, #44]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e025      	b.n	8004530 <HAL_RCC_OscConfig+0x298>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044ec:	d114      	bne.n	8004518 <HAL_RCC_OscConfig+0x280>
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a05      	ldr	r2, [pc, #20]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80044f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044f8:	6013      	str	r3, [r2, #0]
 80044fa:	4b03      	ldr	r3, [pc, #12]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a02      	ldr	r2, [pc, #8]	; (8004508 <HAL_RCC_OscConfig+0x270>)
 8004500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004504:	6013      	str	r3, [r2, #0]
 8004506:	e013      	b.n	8004530 <HAL_RCC_OscConfig+0x298>
 8004508:	40021000 	.word	0x40021000
 800450c:	080109c4 	.word	0x080109c4
 8004510:	20000000 	.word	0x20000000
 8004514:	20000004 	.word	0x20000004
 8004518:	4ba0      	ldr	r3, [pc, #640]	; (800479c <HAL_RCC_OscConfig+0x504>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a9f      	ldr	r2, [pc, #636]	; (800479c <HAL_RCC_OscConfig+0x504>)
 800451e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	4b9d      	ldr	r3, [pc, #628]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a9c      	ldr	r2, [pc, #624]	; (800479c <HAL_RCC_OscConfig+0x504>)
 800452a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800452e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d013      	beq.n	8004560 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004538:	f7fe f990 	bl	800285c <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453e:	e008      	b.n	8004552 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004540:	f7fe f98c 	bl	800285c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	1ad3      	subs	r3, r2, r3
 800454a:	2b64      	cmp	r3, #100	; 0x64
 800454c:	d901      	bls.n	8004552 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e2c2      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004552:	4b92      	ldr	r3, [pc, #584]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800455a:	2b00      	cmp	r3, #0
 800455c:	d0f0      	beq.n	8004540 <HAL_RCC_OscConfig+0x2a8>
 800455e:	e014      	b.n	800458a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fe f97c 	bl	800285c <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004568:	f7fe f978 	bl	800285c <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b64      	cmp	r3, #100	; 0x64
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e2ae      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800457a:	4b88      	ldr	r3, [pc, #544]	; (800479c <HAL_RCC_OscConfig+0x504>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x2d0>
 8004586:	e000      	b.n	800458a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004588:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d060      	beq.n	8004658 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004596:	69bb      	ldr	r3, [r7, #24]
 8004598:	2b04      	cmp	r3, #4
 800459a:	d005      	beq.n	80045a8 <HAL_RCC_OscConfig+0x310>
 800459c:	69bb      	ldr	r3, [r7, #24]
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d119      	bne.n	80045d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d116      	bne.n	80045d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045a8:	4b7c      	ldr	r3, [pc, #496]	; (800479c <HAL_RCC_OscConfig+0x504>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d005      	beq.n	80045c0 <HAL_RCC_OscConfig+0x328>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d101      	bne.n	80045c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e28b      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c0:	4b76      	ldr	r3, [pc, #472]	; (800479c <HAL_RCC_OscConfig+0x504>)
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	061b      	lsls	r3, r3, #24
 80045ce:	4973      	ldr	r1, [pc, #460]	; (800479c <HAL_RCC_OscConfig+0x504>)
 80045d0:	4313      	orrs	r3, r2
 80045d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045d4:	e040      	b.n	8004658 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d023      	beq.n	8004626 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045de:	4b6f      	ldr	r3, [pc, #444]	; (800479c <HAL_RCC_OscConfig+0x504>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a6e      	ldr	r2, [pc, #440]	; (800479c <HAL_RCC_OscConfig+0x504>)
 80045e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ea:	f7fe f937 	bl	800285c <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045f2:	f7fe f933 	bl	800285c <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e269      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004604:	4b65      	ldr	r3, [pc, #404]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004610:	4b62      	ldr	r3, [pc, #392]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	061b      	lsls	r3, r3, #24
 800461e:	495f      	ldr	r1, [pc, #380]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004620:	4313      	orrs	r3, r2
 8004622:	604b      	str	r3, [r1, #4]
 8004624:	e018      	b.n	8004658 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004626:	4b5d      	ldr	r3, [pc, #372]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a5c      	ldr	r2, [pc, #368]	; (800479c <HAL_RCC_OscConfig+0x504>)
 800462c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004630:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004632:	f7fe f913 	bl	800285c <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800463a:	f7fe f90f 	bl	800285c <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e245      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800464c:	4b53      	ldr	r3, [pc, #332]	; (800479c <HAL_RCC_OscConfig+0x504>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004654:	2b00      	cmp	r3, #0
 8004656:	d1f0      	bne.n	800463a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0308 	and.w	r3, r3, #8
 8004660:	2b00      	cmp	r3, #0
 8004662:	d03c      	beq.n	80046de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	695b      	ldr	r3, [r3, #20]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01c      	beq.n	80046a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800466c:	4b4b      	ldr	r3, [pc, #300]	; (800479c <HAL_RCC_OscConfig+0x504>)
 800466e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004672:	4a4a      	ldr	r2, [pc, #296]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004674:	f043 0301 	orr.w	r3, r3, #1
 8004678:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800467c:	f7fe f8ee 	bl	800285c <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004682:	e008      	b.n	8004696 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004684:	f7fe f8ea 	bl	800285c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	2b02      	cmp	r3, #2
 8004690:	d901      	bls.n	8004696 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004692:	2303      	movs	r3, #3
 8004694:	e220      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004696:	4b41      	ldr	r3, [pc, #260]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d0ef      	beq.n	8004684 <HAL_RCC_OscConfig+0x3ec>
 80046a4:	e01b      	b.n	80046de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046a6:	4b3d      	ldr	r3, [pc, #244]	; (800479c <HAL_RCC_OscConfig+0x504>)
 80046a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ac:	4a3b      	ldr	r2, [pc, #236]	; (800479c <HAL_RCC_OscConfig+0x504>)
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b6:	f7fe f8d1 	bl	800285c <HAL_GetTick>
 80046ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046bc:	e008      	b.n	80046d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046be:	f7fe f8cd 	bl	800285c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	2b02      	cmp	r3, #2
 80046ca:	d901      	bls.n	80046d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046cc:	2303      	movs	r3, #3
 80046ce:	e203      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046d0:	4b32      	ldr	r3, [pc, #200]	; (800479c <HAL_RCC_OscConfig+0x504>)
 80046d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1ef      	bne.n	80046be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0304 	and.w	r3, r3, #4
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80a6 	beq.w	8004838 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ec:	2300      	movs	r3, #0
 80046ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046f0:	4b2a      	ldr	r3, [pc, #168]	; (800479c <HAL_RCC_OscConfig+0x504>)
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10d      	bne.n	8004718 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046fc:	4b27      	ldr	r3, [pc, #156]	; (800479c <HAL_RCC_OscConfig+0x504>)
 80046fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004700:	4a26      	ldr	r2, [pc, #152]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004702:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004706:	6593      	str	r3, [r2, #88]	; 0x58
 8004708:	4b24      	ldr	r3, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x504>)
 800470a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004710:	60bb      	str	r3, [r7, #8]
 8004712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004714:	2301      	movs	r3, #1
 8004716:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004718:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <HAL_RCC_OscConfig+0x508>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004720:	2b00      	cmp	r3, #0
 8004722:	d118      	bne.n	8004756 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004724:	4b1e      	ldr	r3, [pc, #120]	; (80047a0 <HAL_RCC_OscConfig+0x508>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <HAL_RCC_OscConfig+0x508>)
 800472a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800472e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004730:	f7fe f894 	bl	800285c <HAL_GetTick>
 8004734:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004736:	e008      	b.n	800474a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004738:	f7fe f890 	bl	800285c <HAL_GetTick>
 800473c:	4602      	mov	r2, r0
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	2b02      	cmp	r3, #2
 8004744:	d901      	bls.n	800474a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004746:	2303      	movs	r3, #3
 8004748:	e1c6      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_RCC_OscConfig+0x508>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d0f0      	beq.n	8004738 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d108      	bne.n	8004770 <HAL_RCC_OscConfig+0x4d8>
 800475e:	4b0f      	ldr	r3, [pc, #60]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004764:	4a0d      	ldr	r2, [pc, #52]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004766:	f043 0301 	orr.w	r3, r3, #1
 800476a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800476e:	e029      	b.n	80047c4 <HAL_RCC_OscConfig+0x52c>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b05      	cmp	r3, #5
 8004776:	d115      	bne.n	80047a4 <HAL_RCC_OscConfig+0x50c>
 8004778:	4b08      	ldr	r3, [pc, #32]	; (800479c <HAL_RCC_OscConfig+0x504>)
 800477a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477e:	4a07      	ldr	r2, [pc, #28]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004780:	f043 0304 	orr.w	r3, r3, #4
 8004784:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004788:	4b04      	ldr	r3, [pc, #16]	; (800479c <HAL_RCC_OscConfig+0x504>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	4a03      	ldr	r2, [pc, #12]	; (800479c <HAL_RCC_OscConfig+0x504>)
 8004790:	f043 0301 	orr.w	r3, r3, #1
 8004794:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004798:	e014      	b.n	80047c4 <HAL_RCC_OscConfig+0x52c>
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	40007000 	.word	0x40007000
 80047a4:	4b9d      	ldr	r3, [pc, #628]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	4a9c      	ldr	r2, [pc, #624]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047b4:	4b99      	ldr	r3, [pc, #612]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	4a98      	ldr	r2, [pc, #608]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80047bc:	f023 0304 	bic.w	r3, r3, #4
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d016      	beq.n	80047fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fe f846 	bl	800285c <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d4:	f7fe f842 	bl	800285c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e176      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ea:	4b8c      	ldr	r3, [pc, #560]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80047ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d0ed      	beq.n	80047d4 <HAL_RCC_OscConfig+0x53c>
 80047f8:	e015      	b.n	8004826 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047fa:	f7fe f82f 	bl	800285c <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004800:	e00a      	b.n	8004818 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004802:	f7fe f82b 	bl	800285c <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004810:	4293      	cmp	r3, r2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e15f      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004818:	4b80      	ldr	r3, [pc, #512]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1ed      	bne.n	8004802 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004826:	7ffb      	ldrb	r3, [r7, #31]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d105      	bne.n	8004838 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482c:	4b7b      	ldr	r3, [pc, #492]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	4a7a      	ldr	r2, [pc, #488]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 8004832:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004836:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0320 	and.w	r3, r3, #32
 8004840:	2b00      	cmp	r3, #0
 8004842:	d03c      	beq.n	80048be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01c      	beq.n	8004886 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800484c:	4b73      	ldr	r3, [pc, #460]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 800484e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004852:	4a72      	ldr	r2, [pc, #456]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800485c:	f7fd fffe 	bl	800285c <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004864:	f7fd fffa 	bl	800285c <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e130      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004876:	4b69      	ldr	r3, [pc, #420]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 8004878:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0ef      	beq.n	8004864 <HAL_RCC_OscConfig+0x5cc>
 8004884:	e01b      	b.n	80048be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004886:	4b65      	ldr	r3, [pc, #404]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 8004888:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800488c:	4a63      	ldr	r2, [pc, #396]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 800488e:	f023 0301 	bic.w	r3, r3, #1
 8004892:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004896:	f7fd ffe1 	bl	800285c <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800489e:	f7fd ffdd 	bl	800285c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e113      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80048b0:	4b5a      	ldr	r3, [pc, #360]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80048b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1ef      	bne.n	800489e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	f000 8107 	beq.w	8004ad6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	f040 80cf 	bne.w	8004a70 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80048d2:	4b52      	ldr	r3, [pc, #328]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80048d4:	68db      	ldr	r3, [r3, #12]
 80048d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	f003 0203 	and.w	r2, r3, #3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d12c      	bne.n	8004940 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	3b01      	subs	r3, #1
 80048f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d123      	bne.n	8004940 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004902:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004904:	429a      	cmp	r2, r3
 8004906:	d11b      	bne.n	8004940 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004912:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d113      	bne.n	8004940 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004922:	085b      	lsrs	r3, r3, #1
 8004924:	3b01      	subs	r3, #1
 8004926:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004928:	429a      	cmp	r2, r3
 800492a:	d109      	bne.n	8004940 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004936:	085b      	lsrs	r3, r3, #1
 8004938:	3b01      	subs	r3, #1
 800493a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800493c:	429a      	cmp	r2, r3
 800493e:	d071      	beq.n	8004a24 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	2b0c      	cmp	r3, #12
 8004944:	d068      	beq.n	8004a18 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004946:	4b35      	ldr	r3, [pc, #212]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d105      	bne.n	800495e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004952:	4b32      	ldr	r3, [pc, #200]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d001      	beq.n	8004962 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e0ba      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004962:	4b2e      	ldr	r3, [pc, #184]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a2d      	ldr	r2, [pc, #180]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 8004968:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800496c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800496e:	f7fd ff75 	bl	800285c <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004976:	f7fd ff71 	bl	800285c <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e0a7      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004988:	4b24      	ldr	r3, [pc, #144]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d1f0      	bne.n	8004976 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004994:	4b21      	ldr	r3, [pc, #132]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 8004996:	68da      	ldr	r2, [r3, #12]
 8004998:	4b21      	ldr	r3, [pc, #132]	; (8004a20 <HAL_RCC_OscConfig+0x788>)
 800499a:	4013      	ands	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80049a4:	3a01      	subs	r2, #1
 80049a6:	0112      	lsls	r2, r2, #4
 80049a8:	4311      	orrs	r1, r2
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049ae:	0212      	lsls	r2, r2, #8
 80049b0:	4311      	orrs	r1, r2
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049b6:	0852      	lsrs	r2, r2, #1
 80049b8:	3a01      	subs	r2, #1
 80049ba:	0552      	lsls	r2, r2, #21
 80049bc:	4311      	orrs	r1, r2
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80049c2:	0852      	lsrs	r2, r2, #1
 80049c4:	3a01      	subs	r2, #1
 80049c6:	0652      	lsls	r2, r2, #25
 80049c8:	4311      	orrs	r1, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049ce:	06d2      	lsls	r2, r2, #27
 80049d0:	430a      	orrs	r2, r1
 80049d2:	4912      	ldr	r1, [pc, #72]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80049d8:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a0f      	ldr	r2, [pc, #60]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80049de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049e4:	4b0d      	ldr	r3, [pc, #52]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80049e6:	68db      	ldr	r3, [r3, #12]
 80049e8:	4a0c      	ldr	r2, [pc, #48]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 80049ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049f0:	f7fd ff34 	bl	800285c <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f8:	f7fd ff30 	bl	800285c <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b02      	cmp	r3, #2
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e066      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a0a:	4b04      	ldr	r3, [pc, #16]	; (8004a1c <HAL_RCC_OscConfig+0x784>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0f0      	beq.n	80049f8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a16:	e05e      	b.n	8004ad6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e05d      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
 8004a1c:	40021000 	.word	0x40021000
 8004a20:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a24:	4b2e      	ldr	r3, [pc, #184]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d152      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004a30:	4b2b      	ldr	r3, [pc, #172]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a2a      	ldr	r2, [pc, #168]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004a3c:	4b28      	ldr	r3, [pc, #160]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	4a27      	ldr	r2, [pc, #156]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004a48:	f7fd ff08 	bl	800285c <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a50:	f7fd ff04 	bl	800285c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e03a      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a62:	4b1f      	ldr	r3, [pc, #124]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0x7b8>
 8004a6e:	e032      	b.n	8004ad6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	2b0c      	cmp	r3, #12
 8004a74:	d02d      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a76:	4b1a      	ldr	r3, [pc, #104]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a19      	ldr	r2, [pc, #100]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004a82:	4b17      	ldr	r3, [pc, #92]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d105      	bne.n	8004a9a <HAL_RCC_OscConfig+0x802>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004a8e:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	4a13      	ldr	r2, [pc, #76]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a94:	f023 0303 	bic.w	r3, r3, #3
 8004a98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	4a10      	ldr	r2, [pc, #64]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004aa0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004aa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aaa:	f7fd fed7 	bl	800285c <HAL_GetTick>
 8004aae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ab0:	e008      	b.n	8004ac4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab2:	f7fd fed3 	bl	800285c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d901      	bls.n	8004ac4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8004ac0:	2303      	movs	r3, #3
 8004ac2:	e009      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <HAL_RCC_OscConfig+0x848>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d1f0      	bne.n	8004ab2 <HAL_RCC_OscConfig+0x81a>
 8004ad0:	e001      	b.n	8004ad6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e000      	b.n	8004ad8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3720      	adds	r7, #32
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40021000 	.word	0x40021000

08004ae4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004aee:	2300      	movs	r3, #0
 8004af0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e10f      	b.n	8004d1c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004afc:	4b89      	ldr	r3, [pc, #548]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 030f 	and.w	r3, r3, #15
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d910      	bls.n	8004b2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0a:	4b86      	ldr	r3, [pc, #536]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f023 020f 	bic.w	r2, r3, #15
 8004b12:	4984      	ldr	r1, [pc, #528]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1a:	4b82      	ldr	r3, [pc, #520]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	683a      	ldr	r2, [r7, #0]
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d001      	beq.n	8004b2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e0f7      	b.n	8004d1c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8089 	beq.w	8004c4c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d133      	bne.n	8004baa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b42:	4b79      	ldr	r3, [pc, #484]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0e4      	b.n	8004d1c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004b52:	f000 fa0f 	bl	8004f74 <RCC_GetSysClockFreqFromPLLSource>
 8004b56:	4603      	mov	r3, r0
 8004b58:	4a74      	ldr	r2, [pc, #464]	; (8004d2c <HAL_RCC_ClockConfig+0x248>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d955      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b5e:	4b72      	ldr	r3, [pc, #456]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b6a:	4b6f      	ldr	r3, [pc, #444]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b72:	4a6d      	ldr	r2, [pc, #436]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b7a:	2380      	movs	r3, #128	; 0x80
 8004b7c:	617b      	str	r3, [r7, #20]
 8004b7e:	e044      	b.n	8004c0a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d03e      	beq.n	8004c0a <HAL_RCC_ClockConfig+0x126>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d13a      	bne.n	8004c0a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b94:	4b64      	ldr	r3, [pc, #400]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b9c:	4a62      	ldr	r2, [pc, #392]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ba2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ba4:	2380      	movs	r3, #128	; 0x80
 8004ba6:	617b      	str	r3, [r7, #20]
 8004ba8:	e02f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	d107      	bne.n	8004bc2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004bb2:	4b5d      	ldr	r3, [pc, #372]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d115      	bne.n	8004bea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e0ac      	b.n	8004d1c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d107      	bne.n	8004bda <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004bca:	4b57      	ldr	r3, [pc, #348]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d109      	bne.n	8004bea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e0a0      	b.n	8004d1c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bda:	4b53      	ldr	r3, [pc, #332]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8004be6:	2301      	movs	r3, #1
 8004be8:	e098      	b.n	8004d1c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004bea:	f000 f8a7 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	4a4e      	ldr	r2, [pc, #312]	; (8004d2c <HAL_RCC_ClockConfig+0x248>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d909      	bls.n	8004c0a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004bf6:	4b4c      	ldr	r3, [pc, #304]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bfe:	4a4a      	ldr	r2, [pc, #296]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c04:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004c06:	2380      	movs	r3, #128	; 0x80
 8004c08:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004c0a:	4b47      	ldr	r3, [pc, #284]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f023 0203 	bic.w	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	4944      	ldr	r1, [pc, #272]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1c:	f7fd fe1e 	bl	800285c <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c22:	e00a      	b.n	8004c3a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c24:	f7fd fe1a 	bl	800285c <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e070      	b.n	8004d1c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c3a:	4b3b      	ldr	r3, [pc, #236]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 020c 	and.w	r2, r3, #12
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d1eb      	bne.n	8004c24 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d009      	beq.n	8004c6c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c58:	4b33      	ldr	r3, [pc, #204]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	4930      	ldr	r1, [pc, #192]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	608b      	str	r3, [r1, #8]
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d105      	bne.n	8004c7e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004c72:	4b2d      	ldr	r3, [pc, #180]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	4a2c      	ldr	r2, [pc, #176]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004c78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c7c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c7e:	4b29      	ldr	r3, [pc, #164]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d210      	bcs.n	8004cae <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c8c:	4b25      	ldr	r3, [pc, #148]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 020f 	bic.w	r2, r3, #15
 8004c94:	4923      	ldr	r1, [pc, #140]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c9c:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <HAL_RCC_ClockConfig+0x240>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d001      	beq.n	8004cae <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	e036      	b.n	8004d1c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 0304 	and.w	r3, r3, #4
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d008      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	4918      	ldr	r1, [pc, #96]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0308 	and.w	r3, r3, #8
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d009      	beq.n	8004cec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd8:	4b13      	ldr	r3, [pc, #76]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004cda:	689b      	ldr	r3, [r3, #8]
 8004cdc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	691b      	ldr	r3, [r3, #16]
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4910      	ldr	r1, [pc, #64]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004cec:	f000 f826 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b0d      	ldr	r3, [pc, #52]	; (8004d28 <HAL_RCC_ClockConfig+0x244>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	091b      	lsrs	r3, r3, #4
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	490c      	ldr	r1, [pc, #48]	; (8004d30 <HAL_RCC_ClockConfig+0x24c>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
 8004d08:	4a0a      	ldr	r2, [pc, #40]	; (8004d34 <HAL_RCC_ClockConfig+0x250>)
 8004d0a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004d0c:	4b0a      	ldr	r3, [pc, #40]	; (8004d38 <HAL_RCC_ClockConfig+0x254>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fd fd53 	bl	80027bc <HAL_InitTick>
 8004d16:	4603      	mov	r3, r0
 8004d18:	73fb      	strb	r3, [r7, #15]

  return status;
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3718      	adds	r7, #24
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40022000 	.word	0x40022000
 8004d28:	40021000 	.word	0x40021000
 8004d2c:	04c4b400 	.word	0x04c4b400
 8004d30:	080109c4 	.word	0x080109c4
 8004d34:	20000000 	.word	0x20000000
 8004d38:	20000004 	.word	0x20000004

08004d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b089      	sub	sp, #36	; 0x24
 8004d40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	61fb      	str	r3, [r7, #28]
 8004d46:	2300      	movs	r3, #0
 8004d48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4a:	4b3e      	ldr	r3, [pc, #248]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d54:	4b3b      	ldr	r3, [pc, #236]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_GetSysClockFreq+0x34>
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	2b0c      	cmp	r3, #12
 8004d68:	d121      	bne.n	8004dae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d11e      	bne.n	8004dae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004d70:	4b34      	ldr	r3, [pc, #208]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0308 	and.w	r3, r3, #8
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004d7c:	4b31      	ldr	r3, [pc, #196]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d82:	0a1b      	lsrs	r3, r3, #8
 8004d84:	f003 030f 	and.w	r3, r3, #15
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	e005      	b.n	8004d98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d8c:	4b2d      	ldr	r3, [pc, #180]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	091b      	lsrs	r3, r3, #4
 8004d92:	f003 030f 	and.w	r3, r3, #15
 8004d96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d98:	4a2b      	ldr	r2, [pc, #172]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004da0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10d      	bne.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004dac:	e00a      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b04      	cmp	r3, #4
 8004db2:	d102      	bne.n	8004dba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004db4:	4b25      	ldr	r3, [pc, #148]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004db6:	61bb      	str	r3, [r7, #24]
 8004db8:	e004      	b.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004dc0:	4b22      	ldr	r3, [pc, #136]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004dc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	2b0c      	cmp	r3, #12
 8004dc8:	d134      	bne.n	8004e34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004dca:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004dcc:	68db      	ldr	r3, [r3, #12]
 8004dce:	f003 0303 	and.w	r3, r3, #3
 8004dd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d003      	beq.n	8004de2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	2b03      	cmp	r3, #3
 8004dde:	d003      	beq.n	8004de8 <HAL_RCC_GetSysClockFreq+0xac>
 8004de0:	e005      	b.n	8004dee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004de2:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004de4:	617b      	str	r3, [r7, #20]
      break;
 8004de6:	e005      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004de8:	4b18      	ldr	r3, [pc, #96]	; (8004e4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004dea:	617b      	str	r3, [r7, #20]
      break;
 8004dec:	e002      	b.n	8004df4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	617b      	str	r3, [r7, #20]
      break;
 8004df2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004df4:	4b13      	ldr	r3, [pc, #76]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 030f 	and.w	r3, r3, #15
 8004dfe:	3301      	adds	r3, #1
 8004e00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	0a1b      	lsrs	r3, r3, #8
 8004e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	fb03 f202 	mul.w	r2, r3, r2
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e1a:	4b0a      	ldr	r3, [pc, #40]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004e1c:	68db      	ldr	r3, [r3, #12]
 8004e1e:	0e5b      	lsrs	r3, r3, #25
 8004e20:	f003 0303 	and.w	r3, r3, #3
 8004e24:	3301      	adds	r3, #1
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004e34:	69bb      	ldr	r3, [r7, #24]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3724      	adds	r7, #36	; 0x24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	40021000 	.word	0x40021000
 8004e48:	080109dc 	.word	0x080109dc
 8004e4c:	00f42400 	.word	0x00f42400

08004e50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e50:	b480      	push	{r7}
 8004e52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e54:	4b03      	ldr	r3, [pc, #12]	; (8004e64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e56:	681b      	ldr	r3, [r3, #0]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	20000000 	.word	0x20000000

08004e68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004e6c:	f7ff fff0 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8004e70:	4602      	mov	r2, r0
 8004e72:	4b06      	ldr	r3, [pc, #24]	; (8004e8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	0a1b      	lsrs	r3, r3, #8
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	4904      	ldr	r1, [pc, #16]	; (8004e90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004e7e:	5ccb      	ldrb	r3, [r1, r3]
 8004e80:	f003 031f 	and.w	r3, r3, #31
 8004e84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e88:	4618      	mov	r0, r3
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	40021000 	.word	0x40021000
 8004e90:	080109d4 	.word	0x080109d4

08004e94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e98:	f7ff ffda 	bl	8004e50 <HAL_RCC_GetHCLKFreq>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	4b06      	ldr	r3, [pc, #24]	; (8004eb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	0adb      	lsrs	r3, r3, #11
 8004ea4:	f003 0307 	and.w	r3, r3, #7
 8004ea8:	4904      	ldr	r1, [pc, #16]	; (8004ebc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004eaa:	5ccb      	ldrb	r3, [r1, r3]
 8004eac:	f003 031f 	and.w	r3, r3, #31
 8004eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	bd80      	pop	{r7, pc}
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	080109d4 	.word	0x080109d4

08004ec0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ec8:	2300      	movs	r3, #0
 8004eca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ecc:	4b27      	ldr	r3, [pc, #156]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ed8:	f7ff f8fa 	bl	80040d0 <HAL_PWREx_GetVoltageRange>
 8004edc:	6178      	str	r0, [r7, #20]
 8004ede:	e014      	b.n	8004f0a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004ee0:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ee4:	4a21      	ldr	r2, [pc, #132]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eea:	6593      	str	r3, [r2, #88]	; 0x58
 8004eec:	4b1f      	ldr	r3, [pc, #124]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef4:	60fb      	str	r3, [r7, #12]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ef8:	f7ff f8ea 	bl	80040d0 <HAL_PWREx_GetVoltageRange>
 8004efc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004efe:	4b1b      	ldr	r3, [pc, #108]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f02:	4a1a      	ldr	r2, [pc, #104]	; (8004f6c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004f04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f08:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f10:	d10b      	bne.n	8004f2a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b80      	cmp	r3, #128	; 0x80
 8004f16:	d913      	bls.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2ba0      	cmp	r3, #160	; 0xa0
 8004f1c:	d902      	bls.n	8004f24 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004f1e:	2302      	movs	r3, #2
 8004f20:	613b      	str	r3, [r7, #16]
 8004f22:	e00d      	b.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f24:	2301      	movs	r3, #1
 8004f26:	613b      	str	r3, [r7, #16]
 8004f28:	e00a      	b.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8004f2e:	d902      	bls.n	8004f36 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004f30:	2302      	movs	r3, #2
 8004f32:	613b      	str	r3, [r7, #16]
 8004f34:	e004      	b.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2b70      	cmp	r3, #112	; 0x70
 8004f3a:	d101      	bne.n	8004f40 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004f40:	4b0b      	ldr	r3, [pc, #44]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f023 020f 	bic.w	r2, r3, #15
 8004f48:	4909      	ldr	r1, [pc, #36]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004f50:	4b07      	ldr	r3, [pc, #28]	; (8004f70 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 030f 	and.w	r3, r3, #15
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d001      	beq.n	8004f62 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40021000 	.word	0x40021000
 8004f70:	40022000 	.word	0x40022000

08004f74 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b087      	sub	sp, #28
 8004f78:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8004f7e:	4b2d      	ldr	r3, [pc, #180]	; (8005034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f80:	68db      	ldr	r3, [r3, #12]
 8004f82:	f003 0303 	and.w	r3, r3, #3
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d118      	bne.n	8004fbc <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f8a:	4b2a      	ldr	r3, [pc, #168]	; (8005034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d107      	bne.n	8004fa6 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f96:	4b27      	ldr	r3, [pc, #156]	; (8005034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f9c:	0a1b      	lsrs	r3, r3, #8
 8004f9e:	f003 030f 	and.w	r3, r3, #15
 8004fa2:	617b      	str	r3, [r7, #20]
 8004fa4:	e005      	b.n	8004fb2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004fa6:	4b23      	ldr	r3, [pc, #140]	; (8005034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	091b      	lsrs	r3, r3, #4
 8004fac:	f003 030f 	and.w	r3, r3, #15
 8004fb0:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004fb2:	4a21      	ldr	r2, [pc, #132]	; (8005038 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fba:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fbc:	4b1d      	ldr	r3, [pc, #116]	; (8005034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004fbe:	68db      	ldr	r3, [r3, #12]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d003      	beq.n	8004fd4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d003      	beq.n	8004fda <RCC_GetSysClockFreqFromPLLSource+0x66>
 8004fd2:	e005      	b.n	8004fe0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004fd4:	4b19      	ldr	r3, [pc, #100]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004fd6:	613b      	str	r3, [r7, #16]
    break;
 8004fd8:	e005      	b.n	8004fe6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004fda:	4b18      	ldr	r3, [pc, #96]	; (800503c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004fdc:	613b      	str	r3, [r7, #16]
    break;
 8004fde:	e002      	b.n	8004fe6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	613b      	str	r3, [r7, #16]
    break;
 8004fe4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fe6:	4b13      	ldr	r3, [pc, #76]	; (8005034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	091b      	lsrs	r3, r3, #4
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ff4:	4b0f      	ldr	r3, [pc, #60]	; (8005034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	0a1b      	lsrs	r3, r3, #8
 8004ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	fb03 f202 	mul.w	r2, r3, r2
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	fbb2 f3f3 	udiv	r3, r2, r3
 800500a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800500c:	4b09      	ldr	r3, [pc, #36]	; (8005034 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	0e5b      	lsrs	r3, r3, #25
 8005012:	f003 0303 	and.w	r3, r3, #3
 8005016:	3301      	adds	r3, #1
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	fbb2 f3f3 	udiv	r3, r2, r3
 8005024:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005026:	683b      	ldr	r3, [r7, #0]
}
 8005028:	4618      	mov	r0, r3
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	40021000 	.word	0x40021000
 8005038:	080109dc 	.word	0x080109dc
 800503c:	00f42400 	.word	0x00f42400

08005040 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b086      	sub	sp, #24
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005048:	2300      	movs	r3, #0
 800504a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800504c:	2300      	movs	r3, #0
 800504e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005058:	2b00      	cmp	r3, #0
 800505a:	d040      	beq.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005060:	2b80      	cmp	r3, #128	; 0x80
 8005062:	d02a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005064:	2b80      	cmp	r3, #128	; 0x80
 8005066:	d825      	bhi.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005068:	2b60      	cmp	r3, #96	; 0x60
 800506a:	d026      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800506c:	2b60      	cmp	r3, #96	; 0x60
 800506e:	d821      	bhi.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005070:	2b40      	cmp	r3, #64	; 0x40
 8005072:	d006      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005074:	2b40      	cmp	r3, #64	; 0x40
 8005076:	d81d      	bhi.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005078:	2b00      	cmp	r3, #0
 800507a:	d009      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x50>
 800507c:	2b20      	cmp	r3, #32
 800507e:	d010      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005080:	e018      	b.n	80050b4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005082:	4b89      	ldr	r3, [pc, #548]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	4a88      	ldr	r2, [pc, #544]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800508c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800508e:	e015      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	2100      	movs	r1, #0
 8005096:	4618      	mov	r0, r3
 8005098:	f000 fb62 	bl	8005760 <RCCEx_PLLSAI1_Config>
 800509c:	4603      	mov	r3, r0
 800509e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050a0:	e00c      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	3320      	adds	r3, #32
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f000 fc4d 	bl	8005948 <RCCEx_PLLSAI2_Config>
 80050ae:	4603      	mov	r3, r0
 80050b0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80050b2:	e003      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	74fb      	strb	r3, [r7, #19]
      break;
 80050b8:	e000      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80050ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10b      	bne.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80050c2:	4b79      	ldr	r3, [pc, #484]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050c8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80050d0:	4975      	ldr	r1, [pc, #468]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d2:	4313      	orrs	r3, r2
 80050d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80050d8:	e001      	b.n	80050de <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050da:	7cfb      	ldrb	r3, [r7, #19]
 80050dc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d047      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f2:	d030      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80050f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050f8:	d82a      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80050fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050fe:	d02a      	beq.n	8005156 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005100:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005104:	d824      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005106:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800510a:	d008      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xde>
 800510c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005110:	d81e      	bhi.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800511a:	d010      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800511c:	e018      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800511e:	4b62      	ldr	r3, [pc, #392]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	4a61      	ldr	r2, [pc, #388]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005128:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800512a:	e015      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	3304      	adds	r3, #4
 8005130:	2100      	movs	r1, #0
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fb14 	bl	8005760 <RCCEx_PLLSAI1_Config>
 8005138:	4603      	mov	r3, r0
 800513a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800513c:	e00c      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	3320      	adds	r3, #32
 8005142:	2100      	movs	r1, #0
 8005144:	4618      	mov	r0, r3
 8005146:	f000 fbff 	bl	8005948 <RCCEx_PLLSAI2_Config>
 800514a:	4603      	mov	r3, r0
 800514c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800514e:	e003      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	74fb      	strb	r3, [r7, #19]
      break;
 8005154:	e000      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005156:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005158:	7cfb      	ldrb	r3, [r7, #19]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10b      	bne.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800515e:	4b52      	ldr	r3, [pc, #328]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005160:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005164:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800516c:	494e      	ldr	r1, [pc, #312]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800516e:	4313      	orrs	r3, r2
 8005170:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005174:	e001      	b.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005176:	7cfb      	ldrb	r3, [r7, #19]
 8005178:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 809f 	beq.w	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005188:	2300      	movs	r3, #0
 800518a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800518c:	4b46      	ldr	r3, [pc, #280]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800518e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005198:	2301      	movs	r3, #1
 800519a:	e000      	b.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 800519c:	2300      	movs	r3, #0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00d      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a6:	4a40      	ldr	r2, [pc, #256]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051ac:	6593      	str	r3, [r2, #88]	; 0x58
 80051ae:	4b3e      	ldr	r3, [pc, #248]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b6:	60bb      	str	r3, [r7, #8]
 80051b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051ba:	2301      	movs	r3, #1
 80051bc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051be:	4b3b      	ldr	r3, [pc, #236]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a3a      	ldr	r2, [pc, #232]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80051ca:	f7fd fb47 	bl	800285c <HAL_GetTick>
 80051ce:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051d0:	e009      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d2:	f7fd fb43 	bl	800285c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d902      	bls.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	74fb      	strb	r3, [r7, #19]
        break;
 80051e4:	e005      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80051e6:	4b31      	ldr	r3, [pc, #196]	; (80052ac <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0ef      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80051f2:	7cfb      	ldrb	r3, [r7, #19]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d15b      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80051f8:	4b2b      	ldr	r3, [pc, #172]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005202:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01f      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	429a      	cmp	r2, r3
 8005214:	d019      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005216:	4b24      	ldr	r3, [pc, #144]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005220:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005222:	4b21      	ldr	r3, [pc, #132]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005228:	4a1f      	ldr	r2, [pc, #124]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800522a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800522e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005232:	4b1d      	ldr	r3, [pc, #116]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005238:	4a1b      	ldr	r2, [pc, #108]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800523a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005242:	4a19      	ldr	r2, [pc, #100]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f003 0301 	and.w	r3, r3, #1
 8005250:	2b00      	cmp	r3, #0
 8005252:	d016      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005254:	f7fd fb02 	bl	800285c <HAL_GetTick>
 8005258:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800525a:	e00b      	b.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525c:	f7fd fafe 	bl	800285c <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	f241 3288 	movw	r2, #5000	; 0x1388
 800526a:	4293      	cmp	r3, r2
 800526c:	d902      	bls.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	74fb      	strb	r3, [r7, #19]
            break;
 8005272:	e006      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005274:	4b0c      	ldr	r3, [pc, #48]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ec      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005282:	7cfb      	ldrb	r3, [r7, #19]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d10c      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005288:	4b07      	ldr	r3, [pc, #28]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800528a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800528e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005298:	4903      	ldr	r1, [pc, #12]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80052a0:	e008      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	74bb      	strb	r3, [r7, #18]
 80052a6:	e005      	b.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80052a8:	40021000 	.word	0x40021000
 80052ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052b0:	7cfb      	ldrb	r3, [r7, #19]
 80052b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052b4:	7c7b      	ldrb	r3, [r7, #17]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d105      	bne.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052ba:	4ba0      	ldr	r3, [pc, #640]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052be:	4a9f      	ldr	r2, [pc, #636]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80052d2:	4b9a      	ldr	r3, [pc, #616]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	f023 0203 	bic.w	r2, r3, #3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e0:	4996      	ldr	r1, [pc, #600]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0302 	and.w	r3, r3, #2
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80052f4:	4b91      	ldr	r3, [pc, #580]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	f023 020c 	bic.w	r2, r3, #12
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005302:	498e      	ldr	r1, [pc, #568]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0304 	and.w	r3, r3, #4
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005316:	4b89      	ldr	r3, [pc, #548]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005324:	4985      	ldr	r1, [pc, #532]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005338:	4b80      	ldr	r3, [pc, #512]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005346:	497d      	ldr	r1, [pc, #500]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0310 	and.w	r3, r3, #16
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800535a:	4b78      	ldr	r3, [pc, #480]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005360:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005368:	4974      	ldr	r1, [pc, #464]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800537c:	4b6f      	ldr	r3, [pc, #444]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538a:	496c      	ldr	r1, [pc, #432]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800539e:	4b67      	ldr	r3, [pc, #412]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053ac:	4963      	ldr	r1, [pc, #396]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053c0:	4b5e      	ldr	r3, [pc, #376]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053ce:	495b      	ldr	r1, [pc, #364]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053e2:	4b56      	ldr	r3, [pc, #344]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053f0:	4952      	ldr	r1, [pc, #328]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00a      	beq.n	800541a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005404:	4b4d      	ldr	r3, [pc, #308]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800540a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005412:	494a      	ldr	r1, [pc, #296]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005414:	4313      	orrs	r3, r2
 8005416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00a      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005426:	4b45      	ldr	r3, [pc, #276]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800542c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005434:	4941      	ldr	r1, [pc, #260]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00a      	beq.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005448:	4b3c      	ldr	r3, [pc, #240]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800544e:	f023 0203 	bic.w	r2, r3, #3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005456:	4939      	ldr	r1, [pc, #228]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005458:	4313      	orrs	r3, r2
 800545a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005466:	2b00      	cmp	r3, #0
 8005468:	d028      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800546a:	4b34      	ldr	r3, [pc, #208]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800546c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005470:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005478:	4930      	ldr	r1, [pc, #192]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800547a:	4313      	orrs	r3, r2
 800547c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005484:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005488:	d106      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548a:	4b2c      	ldr	r3, [pc, #176]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	4a2b      	ldr	r2, [pc, #172]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005490:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005494:	60d3      	str	r3, [r2, #12]
 8005496:	e011      	b.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800549c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054a0:	d10c      	bne.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	3304      	adds	r3, #4
 80054a6:	2101      	movs	r1, #1
 80054a8:	4618      	mov	r0, r3
 80054aa:	f000 f959 	bl	8005760 <RCCEx_PLLSAI1_Config>
 80054ae:	4603      	mov	r3, r0
 80054b0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80054b2:	7cfb      	ldrb	r3, [r7, #19]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d001      	beq.n	80054bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80054b8:	7cfb      	ldrb	r3, [r7, #19]
 80054ba:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d04d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054d0:	d108      	bne.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80054d2:	4b1a      	ldr	r3, [pc, #104]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054d8:	4a18      	ldr	r2, [pc, #96]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80054e2:	e012      	b.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80054e4:	4b15      	ldr	r3, [pc, #84]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ea:	4a14      	ldr	r2, [pc, #80]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80054f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80054f4:	4b11      	ldr	r3, [pc, #68]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005502:	490e      	ldr	r1, [pc, #56]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800550e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005512:	d106      	bne.n	8005522 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005514:	4b09      	ldr	r3, [pc, #36]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005516:	68db      	ldr	r3, [r3, #12]
 8005518:	4a08      	ldr	r2, [pc, #32]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800551a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800551e:	60d3      	str	r3, [r2, #12]
 8005520:	e020      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005526:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800552a:	d109      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800552c:	4b03      	ldr	r3, [pc, #12]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	4a02      	ldr	r2, [pc, #8]	; (800553c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005536:	60d3      	str	r3, [r2, #12]
 8005538:	e014      	b.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800553a:	bf00      	nop
 800553c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005544:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005548:	d10c      	bne.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	3304      	adds	r3, #4
 800554e:	2101      	movs	r1, #1
 8005550:	4618      	mov	r0, r3
 8005552:	f000 f905 	bl	8005760 <RCCEx_PLLSAI1_Config>
 8005556:	4603      	mov	r3, r0
 8005558:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800555a:	7cfb      	ldrb	r3, [r7, #19]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005560:	7cfb      	ldrb	r3, [r7, #19]
 8005562:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d028      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005570:	4b7a      	ldr	r3, [pc, #488]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005576:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800557e:	4977      	ldr	r1, [pc, #476]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005580:	4313      	orrs	r3, r2
 8005582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800558a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800558e:	d106      	bne.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005590:	4b72      	ldr	r3, [pc, #456]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	4a71      	ldr	r2, [pc, #452]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005596:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800559a:	60d3      	str	r3, [r2, #12]
 800559c:	e011      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055a6:	d10c      	bne.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	3304      	adds	r3, #4
 80055ac:	2101      	movs	r1, #1
 80055ae:	4618      	mov	r0, r3
 80055b0:	f000 f8d6 	bl	8005760 <RCCEx_PLLSAI1_Config>
 80055b4:	4603      	mov	r3, r0
 80055b6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80055b8:	7cfb      	ldrb	r3, [r7, #19]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80055be:	7cfb      	ldrb	r3, [r7, #19]
 80055c0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d01e      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80055ce:	4b63      	ldr	r3, [pc, #396]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80055d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055de:	495f      	ldr	r1, [pc, #380]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80055e0:	4313      	orrs	r3, r2
 80055e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055f0:	d10c      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	3304      	adds	r3, #4
 80055f6:	2102      	movs	r1, #2
 80055f8:	4618      	mov	r0, r3
 80055fa:	f000 f8b1 	bl	8005760 <RCCEx_PLLSAI1_Config>
 80055fe:	4603      	mov	r3, r0
 8005600:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005602:	7cfb      	ldrb	r3, [r7, #19]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d001      	beq.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005608:	7cfb      	ldrb	r3, [r7, #19]
 800560a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00b      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005618:	4b50      	ldr	r3, [pc, #320]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800561a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800561e:	f023 0204 	bic.w	r2, r3, #4
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005628:	494c      	ldr	r1, [pc, #304]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800562a:	4313      	orrs	r3, r2
 800562c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800563c:	4b47      	ldr	r3, [pc, #284]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800563e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005642:	f023 0218 	bic.w	r2, r3, #24
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564c:	4943      	ldr	r1, [pc, #268]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d035      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005660:	4b3e      	ldr	r3, [pc, #248]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a3d      	ldr	r2, [pc, #244]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005666:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800566a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800566c:	f7fd f8f6 	bl	800285c <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005672:	e009      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005674:	f7fd f8f2 	bl	800285c <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d902      	bls.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8005682:	2303      	movs	r3, #3
 8005684:	74fb      	strb	r3, [r7, #19]
        break;
 8005686:	e005      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005688:	4b34      	ldr	r3, [pc, #208]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d1ef      	bne.n	8005674 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8005694:	7cfb      	ldrb	r3, [r7, #19]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d113      	bne.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800569a:	4b30      	ldr	r3, [pc, #192]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800569c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056aa:	492c      	ldr	r1, [pc, #176]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80056ac:	4313      	orrs	r3, r2
 80056ae:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	3320      	adds	r3, #32
 80056b6:	2102      	movs	r1, #2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 f945 	bl	8005948 <RCCEx_PLLSAI2_Config>
 80056be:	4603      	mov	r3, r0
 80056c0:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 80056c2:	7cfb      	ldrb	r3, [r7, #19]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d001      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
 80056ca:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d01e      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 80056d8:	4b20      	ldr	r3, [pc, #128]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80056da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80056de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e8:	491c      	ldr	r1, [pc, #112]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fa:	d10c      	bne.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	3320      	adds	r3, #32
 8005700:	2101      	movs	r1, #1
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f920 	bl	8005948 <RCCEx_PLLSAI2_Config>
 8005708:	4603      	mov	r3, r0
 800570a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800570c:	7cfb      	ldrb	r3, [r7, #19]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d001      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 8005712:	7cfb      	ldrb	r3, [r7, #19]
 8005714:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d017      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005722:	4b0e      	ldr	r3, [pc, #56]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005724:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005728:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005732:	490a      	ldr	r1, [pc, #40]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005734:	4313      	orrs	r3, r2
 8005736:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005740:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005744:	d105      	bne.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005746:	4b05      	ldr	r3, [pc, #20]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	4a04      	ldr	r2, [pc, #16]	; (800575c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800574c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005750:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005752:	7cbb      	ldrb	r3, [r7, #18]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40021000 	.word	0x40021000

08005760 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800576e:	4b72      	ldr	r3, [pc, #456]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005770:	68db      	ldr	r3, [r3, #12]
 8005772:	f003 0303 	and.w	r3, r3, #3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00e      	beq.n	8005798 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800577a:	4b6f      	ldr	r3, [pc, #444]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0203 	and.w	r2, r3, #3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	429a      	cmp	r2, r3
 8005788:	d103      	bne.n	8005792 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
       ||
 800578e:	2b00      	cmp	r3, #0
 8005790:	d142      	bne.n	8005818 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	73fb      	strb	r3, [r7, #15]
 8005796:	e03f      	b.n	8005818 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b03      	cmp	r3, #3
 800579e:	d018      	beq.n	80057d2 <RCCEx_PLLSAI1_Config+0x72>
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d825      	bhi.n	80057f0 <RCCEx_PLLSAI1_Config+0x90>
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d002      	beq.n	80057ae <RCCEx_PLLSAI1_Config+0x4e>
 80057a8:	2b02      	cmp	r3, #2
 80057aa:	d009      	beq.n	80057c0 <RCCEx_PLLSAI1_Config+0x60>
 80057ac:	e020      	b.n	80057f0 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80057ae:	4b62      	ldr	r3, [pc, #392]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 0302 	and.w	r3, r3, #2
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d11d      	bne.n	80057f6 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057be:	e01a      	b.n	80057f6 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80057c0:	4b5d      	ldr	r3, [pc, #372]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d116      	bne.n	80057fa <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057d0:	e013      	b.n	80057fa <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80057d2:	4b59      	ldr	r3, [pc, #356]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d10f      	bne.n	80057fe <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80057de:	4b56      	ldr	r3, [pc, #344]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d109      	bne.n	80057fe <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80057ee:	e006      	b.n	80057fe <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	73fb      	strb	r3, [r7, #15]
      break;
 80057f4:	e004      	b.n	8005800 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057f6:	bf00      	nop
 80057f8:	e002      	b.n	8005800 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057fa:	bf00      	nop
 80057fc:	e000      	b.n	8005800 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80057fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005800:	7bfb      	ldrb	r3, [r7, #15]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d108      	bne.n	8005818 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005806:	4b4c      	ldr	r3, [pc, #304]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f023 0203 	bic.w	r2, r3, #3
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4949      	ldr	r1, [pc, #292]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005814:	4313      	orrs	r3, r2
 8005816:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005818:	7bfb      	ldrb	r3, [r7, #15]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f040 8086 	bne.w	800592c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005820:	4b45      	ldr	r3, [pc, #276]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a44      	ldr	r2, [pc, #272]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005826:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800582a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582c:	f7fd f816 	bl	800285c <HAL_GetTick>
 8005830:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005832:	e009      	b.n	8005848 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005834:	f7fd f812 	bl	800285c <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d902      	bls.n	8005848 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	73fb      	strb	r3, [r7, #15]
        break;
 8005846:	e005      	b.n	8005854 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005848:	4b3b      	ldr	r3, [pc, #236]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d1ef      	bne.n	8005834 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005854:	7bfb      	ldrb	r3, [r7, #15]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d168      	bne.n	800592c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d113      	bne.n	8005888 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005860:	4b35      	ldr	r3, [pc, #212]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005862:	691a      	ldr	r2, [r3, #16]
 8005864:	4b35      	ldr	r3, [pc, #212]	; (800593c <RCCEx_PLLSAI1_Config+0x1dc>)
 8005866:	4013      	ands	r3, r2
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6892      	ldr	r2, [r2, #8]
 800586c:	0211      	lsls	r1, r2, #8
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	68d2      	ldr	r2, [r2, #12]
 8005872:	06d2      	lsls	r2, r2, #27
 8005874:	4311      	orrs	r1, r2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6852      	ldr	r2, [r2, #4]
 800587a:	3a01      	subs	r2, #1
 800587c:	0112      	lsls	r2, r2, #4
 800587e:	430a      	orrs	r2, r1
 8005880:	492d      	ldr	r1, [pc, #180]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005882:	4313      	orrs	r3, r2
 8005884:	610b      	str	r3, [r1, #16]
 8005886:	e02d      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d115      	bne.n	80058ba <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800588e:	4b2a      	ldr	r3, [pc, #168]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005890:	691a      	ldr	r2, [r3, #16]
 8005892:	4b2b      	ldr	r3, [pc, #172]	; (8005940 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005894:	4013      	ands	r3, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6892      	ldr	r2, [r2, #8]
 800589a:	0211      	lsls	r1, r2, #8
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	6912      	ldr	r2, [r2, #16]
 80058a0:	0852      	lsrs	r2, r2, #1
 80058a2:	3a01      	subs	r2, #1
 80058a4:	0552      	lsls	r2, r2, #21
 80058a6:	4311      	orrs	r1, r2
 80058a8:	687a      	ldr	r2, [r7, #4]
 80058aa:	6852      	ldr	r2, [r2, #4]
 80058ac:	3a01      	subs	r2, #1
 80058ae:	0112      	lsls	r2, r2, #4
 80058b0:	430a      	orrs	r2, r1
 80058b2:	4921      	ldr	r1, [pc, #132]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	610b      	str	r3, [r1, #16]
 80058b8:	e014      	b.n	80058e4 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80058ba:	4b1f      	ldr	r3, [pc, #124]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058bc:	691a      	ldr	r2, [r3, #16]
 80058be:	4b21      	ldr	r3, [pc, #132]	; (8005944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80058c0:	4013      	ands	r3, r2
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	6892      	ldr	r2, [r2, #8]
 80058c6:	0211      	lsls	r1, r2, #8
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6952      	ldr	r2, [r2, #20]
 80058cc:	0852      	lsrs	r2, r2, #1
 80058ce:	3a01      	subs	r2, #1
 80058d0:	0652      	lsls	r2, r2, #25
 80058d2:	4311      	orrs	r1, r2
 80058d4:	687a      	ldr	r2, [r7, #4]
 80058d6:	6852      	ldr	r2, [r2, #4]
 80058d8:	3a01      	subs	r2, #1
 80058da:	0112      	lsls	r2, r2, #4
 80058dc:	430a      	orrs	r2, r1
 80058de:	4916      	ldr	r1, [pc, #88]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058e0:	4313      	orrs	r3, r2
 80058e2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a13      	ldr	r2, [pc, #76]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 80058ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80058ee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f0:	f7fc ffb4 	bl	800285c <HAL_GetTick>
 80058f4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80058f6:	e009      	b.n	800590c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80058f8:	f7fc ffb0 	bl	800285c <HAL_GetTick>
 80058fc:	4602      	mov	r2, r0
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	2b02      	cmp	r3, #2
 8005904:	d902      	bls.n	800590c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005906:	2303      	movs	r3, #3
 8005908:	73fb      	strb	r3, [r7, #15]
          break;
 800590a:	e005      	b.n	8005918 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800590c:	4b0a      	ldr	r3, [pc, #40]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d0ef      	beq.n	80058f8 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d106      	bne.n	800592c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800591e:	4b06      	ldr	r3, [pc, #24]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005920:	691a      	ldr	r2, [r3, #16]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	4904      	ldr	r1, [pc, #16]	; (8005938 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005928:	4313      	orrs	r3, r2
 800592a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	40021000 	.word	0x40021000
 800593c:	07ff800f 	.word	0x07ff800f
 8005940:	ff9f800f 	.word	0xff9f800f
 8005944:	f9ff800f 	.word	0xf9ff800f

08005948 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b084      	sub	sp, #16
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005956:	4b72      	ldr	r3, [pc, #456]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005958:	68db      	ldr	r3, [r3, #12]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00e      	beq.n	8005980 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005962:	4b6f      	ldr	r3, [pc, #444]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	f003 0203 	and.w	r2, r3, #3
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	429a      	cmp	r2, r3
 8005970:	d103      	bne.n	800597a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
       ||
 8005976:	2b00      	cmp	r3, #0
 8005978:	d142      	bne.n	8005a00 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	73fb      	strb	r3, [r7, #15]
 800597e:	e03f      	b.n	8005a00 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	2b03      	cmp	r3, #3
 8005986:	d018      	beq.n	80059ba <RCCEx_PLLSAI2_Config+0x72>
 8005988:	2b03      	cmp	r3, #3
 800598a:	d825      	bhi.n	80059d8 <RCCEx_PLLSAI2_Config+0x90>
 800598c:	2b01      	cmp	r3, #1
 800598e:	d002      	beq.n	8005996 <RCCEx_PLLSAI2_Config+0x4e>
 8005990:	2b02      	cmp	r3, #2
 8005992:	d009      	beq.n	80059a8 <RCCEx_PLLSAI2_Config+0x60>
 8005994:	e020      	b.n	80059d8 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005996:	4b62      	ldr	r3, [pc, #392]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d11d      	bne.n	80059de <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a6:	e01a      	b.n	80059de <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80059a8:	4b5d      	ldr	r3, [pc, #372]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d116      	bne.n	80059e2 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059b8:	e013      	b.n	80059e2 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80059ba:	4b59      	ldr	r3, [pc, #356]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10f      	bne.n	80059e6 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80059c6:	4b56      	ldr	r3, [pc, #344]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d109      	bne.n	80059e6 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80059d6:	e006      	b.n	80059e6 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	73fb      	strb	r3, [r7, #15]
      break;
 80059dc:	e004      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059de:	bf00      	nop
 80059e0:	e002      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059e2:	bf00      	nop
 80059e4:	e000      	b.n	80059e8 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80059e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d108      	bne.n	8005a00 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80059ee:	4b4c      	ldr	r3, [pc, #304]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059f0:	68db      	ldr	r3, [r3, #12]
 80059f2:	f023 0203 	bic.w	r2, r3, #3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4949      	ldr	r1, [pc, #292]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005a00:	7bfb      	ldrb	r3, [r7, #15]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f040 8086 	bne.w	8005b14 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005a08:	4b45      	ldr	r3, [pc, #276]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a44      	ldr	r2, [pc, #272]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a14:	f7fc ff22 	bl	800285c <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a1a:	e009      	b.n	8005a30 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005a1c:	f7fc ff1e 	bl	800285c <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d902      	bls.n	8005a30 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8005a2e:	e005      	b.n	8005a3c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005a30:	4b3b      	ldr	r3, [pc, #236]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1ef      	bne.n	8005a1c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005a3c:	7bfb      	ldrb	r3, [r7, #15]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d168      	bne.n	8005b14 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d113      	bne.n	8005a70 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a48:	4b35      	ldr	r3, [pc, #212]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	4b35      	ldr	r3, [pc, #212]	; (8005b24 <RCCEx_PLLSAI2_Config+0x1dc>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	6892      	ldr	r2, [r2, #8]
 8005a54:	0211      	lsls	r1, r2, #8
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	68d2      	ldr	r2, [r2, #12]
 8005a5a:	06d2      	lsls	r2, r2, #27
 8005a5c:	4311      	orrs	r1, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6852      	ldr	r2, [r2, #4]
 8005a62:	3a01      	subs	r2, #1
 8005a64:	0112      	lsls	r2, r2, #4
 8005a66:	430a      	orrs	r2, r1
 8005a68:	492d      	ldr	r1, [pc, #180]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	614b      	str	r3, [r1, #20]
 8005a6e:	e02d      	b.n	8005acc <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d115      	bne.n	8005aa2 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005a76:	4b2a      	ldr	r3, [pc, #168]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a78:	695a      	ldr	r2, [r3, #20]
 8005a7a:	4b2b      	ldr	r3, [pc, #172]	; (8005b28 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6892      	ldr	r2, [r2, #8]
 8005a82:	0211      	lsls	r1, r2, #8
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	6912      	ldr	r2, [r2, #16]
 8005a88:	0852      	lsrs	r2, r2, #1
 8005a8a:	3a01      	subs	r2, #1
 8005a8c:	0552      	lsls	r2, r2, #21
 8005a8e:	4311      	orrs	r1, r2
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	6852      	ldr	r2, [r2, #4]
 8005a94:	3a01      	subs	r2, #1
 8005a96:	0112      	lsls	r2, r2, #4
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	4921      	ldr	r1, [pc, #132]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	614b      	str	r3, [r1, #20]
 8005aa0:	e014      	b.n	8005acc <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005aa2:	4b1f      	ldr	r3, [pc, #124]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005aa4:	695a      	ldr	r2, [r3, #20]
 8005aa6:	4b21      	ldr	r3, [pc, #132]	; (8005b2c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	6892      	ldr	r2, [r2, #8]
 8005aae:	0211      	lsls	r1, r2, #8
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6952      	ldr	r2, [r2, #20]
 8005ab4:	0852      	lsrs	r2, r2, #1
 8005ab6:	3a01      	subs	r2, #1
 8005ab8:	0652      	lsls	r2, r2, #25
 8005aba:	4311      	orrs	r1, r2
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	6852      	ldr	r2, [r2, #4]
 8005ac0:	3a01      	subs	r2, #1
 8005ac2:	0112      	lsls	r2, r2, #4
 8005ac4:	430a      	orrs	r2, r1
 8005ac6:	4916      	ldr	r1, [pc, #88]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005acc:	4b14      	ldr	r3, [pc, #80]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a13      	ldr	r2, [pc, #76]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005ad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ad6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fc fec0 	bl	800285c <HAL_GetTick>
 8005adc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ade:	e009      	b.n	8005af4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ae0:	f7fc febc 	bl	800285c <HAL_GetTick>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	1ad3      	subs	r3, r2, r3
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d902      	bls.n	8005af4 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005aee:	2303      	movs	r3, #3
 8005af0:	73fb      	strb	r3, [r7, #15]
          break;
 8005af2:	e005      	b.n	8005b00 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005af4:	4b0a      	ldr	r3, [pc, #40]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d0ef      	beq.n	8005ae0 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005b00:	7bfb      	ldrb	r3, [r7, #15]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d106      	bne.n	8005b14 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b08:	695a      	ldr	r2, [r3, #20]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	699b      	ldr	r3, [r3, #24]
 8005b0e:	4904      	ldr	r1, [pc, #16]	; (8005b20 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005b10:	4313      	orrs	r3, r2
 8005b12:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3710      	adds	r7, #16
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40021000 	.word	0x40021000
 8005b24:	07ff800f 	.word	0x07ff800f
 8005b28:	ff9f800f 	.word	0xff9f800f
 8005b2c:	f9ff800f 	.word	0xf9ff800f

08005b30 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b084      	sub	sp, #16
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e095      	b.n	8005c6e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d108      	bne.n	8005b5c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b52:	d009      	beq.n	8005b68 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	61da      	str	r2, [r3, #28]
 8005b5a:	e005      	b.n	8005b68 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2200      	movs	r2, #0
 8005b66:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d106      	bne.n	8005b88 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7fb fff6 	bl	8001b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ba8:	d902      	bls.n	8005bb0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e002      	b.n	8005bb6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005bb4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	68db      	ldr	r3, [r3, #12]
 8005bba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005bbe:	d007      	beq.n	8005bd0 <HAL_SPI_Init+0xa0>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005be0:	431a      	orrs	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0302 	and.w	r3, r3, #2
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bfe:	431a      	orrs	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	69db      	ldr	r3, [r3, #28]
 8005c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c12:	ea42 0103 	orr.w	r1, r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c1a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	f003 0204 	and.w	r2, r3, #4
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	431a      	orrs	r2, r3
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c3e:	f003 0308 	and.w	r3, r3, #8
 8005c42:	431a      	orrs	r2, r3
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c4c:	ea42 0103 	orr.w	r1, r2, r3
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c6c:	2300      	movs	r3, #0
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b088      	sub	sp, #32
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	603b      	str	r3, [r7, #0]
 8005c82:	4613      	mov	r3, r2
 8005c84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d101      	bne.n	8005c98 <HAL_SPI_Transmit+0x22>
 8005c94:	2302      	movs	r3, #2
 8005c96:	e158      	b.n	8005f4a <HAL_SPI_Transmit+0x2d4>
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ca0:	f7fc fddc 	bl	800285c <HAL_GetTick>
 8005ca4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ca6:	88fb      	ldrh	r3, [r7, #6]
 8005ca8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d002      	beq.n	8005cbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005cb6:	2302      	movs	r3, #2
 8005cb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005cba:	e13d      	b.n	8005f38 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d002      	beq.n	8005cc8 <HAL_SPI_Transmit+0x52>
 8005cc2:	88fb      	ldrh	r3, [r7, #6]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d102      	bne.n	8005cce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005ccc:	e134      	b.n	8005f38 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2203      	movs	r2, #3
 8005cd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	68ba      	ldr	r2, [r7, #8]
 8005ce0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	88fa      	ldrh	r2, [r7, #6]
 8005ce6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	88fa      	ldrh	r2, [r7, #6]
 8005cec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2200      	movs	r2, #0
 8005d08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d18:	d10f      	bne.n	8005d3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	681a      	ldr	r2, [r3, #0]
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d44:	2b40      	cmp	r3, #64	; 0x40
 8005d46:	d007      	beq.n	8005d58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681a      	ldr	r2, [r3, #0]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d60:	d94b      	bls.n	8005dfa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d002      	beq.n	8005d70 <HAL_SPI_Transmit+0xfa>
 8005d6a:	8afb      	ldrh	r3, [r7, #22]
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d13e      	bne.n	8005dee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	881a      	ldrh	r2, [r3, #0]
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d80:	1c9a      	adds	r2, r3, #2
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d94:	e02b      	b.n	8005dee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f003 0302 	and.w	r3, r3, #2
 8005da0:	2b02      	cmp	r3, #2
 8005da2:	d112      	bne.n	8005dca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da8:	881a      	ldrh	r2, [r3, #0]
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db4:	1c9a      	adds	r2, r3, #2
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dc8:	e011      	b.n	8005dee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dca:	f7fc fd47 	bl	800285c <HAL_GetTick>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	1ad3      	subs	r3, r2, r3
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d803      	bhi.n	8005de2 <HAL_SPI_Transmit+0x16c>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005de0:	d102      	bne.n	8005de8 <HAL_SPI_Transmit+0x172>
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d102      	bne.n	8005dee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005dec:	e0a4      	b.n	8005f38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d1ce      	bne.n	8005d96 <HAL_SPI_Transmit+0x120>
 8005df8:	e07c      	b.n	8005ef4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0x192>
 8005e02:	8afb      	ldrh	r3, [r7, #22]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d170      	bne.n	8005eea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0c:	b29b      	uxth	r3, r3
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d912      	bls.n	8005e38 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e16:	881a      	ldrh	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e22:	1c9a      	adds	r2, r3, #2
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	3b02      	subs	r3, #2
 8005e30:	b29a      	uxth	r2, r3
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e36:	e058      	b.n	8005eea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	7812      	ldrb	r2, [r2, #0]
 8005e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4a:	1c5a      	adds	r2, r3, #1
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e54:	b29b      	uxth	r3, r3
 8005e56:	3b01      	subs	r3, #1
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e5e:	e044      	b.n	8005eea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 0302 	and.w	r3, r3, #2
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d12b      	bne.n	8005ec6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d912      	bls.n	8005e9e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	881a      	ldrh	r2, [r3, #0]
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	1c9a      	adds	r2, r3, #2
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	3b02      	subs	r3, #2
 8005e96:	b29a      	uxth	r2, r3
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e9c:	e025      	b.n	8005eea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	330c      	adds	r3, #12
 8005ea8:	7812      	ldrb	r2, [r2, #0]
 8005eaa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ec4:	e011      	b.n	8005eea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ec6:	f7fc fcc9 	bl	800285c <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d803      	bhi.n	8005ede <HAL_SPI_Transmit+0x268>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d102      	bne.n	8005ee4 <HAL_SPI_Transmit+0x26e>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ee8:	e026      	b.n	8005f38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1b5      	bne.n	8005e60 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ef4:	69ba      	ldr	r2, [r7, #24]
 8005ef6:	6839      	ldr	r1, [r7, #0]
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	f000 fce3 	bl	80068c4 <SPI_EndRxTxTransaction>
 8005efe:	4603      	mov	r3, r0
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d002      	beq.n	8005f0a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2220      	movs	r2, #32
 8005f08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d10a      	bne.n	8005f28 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f12:	2300      	movs	r3, #0
 8005f14:	613b      	str	r3, [r7, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	613b      	str	r3, [r7, #16]
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	613b      	str	r3, [r7, #16]
 8005f26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d002      	beq.n	8005f36 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	77fb      	strb	r3, [r7, #31]
 8005f34:	e000      	b.n	8005f38 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005f36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005f48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3720      	adds	r7, #32
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}

08005f52 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f52:	b580      	push	{r7, lr}
 8005f54:	b088      	sub	sp, #32
 8005f56:	af02      	add	r7, sp, #8
 8005f58:	60f8      	str	r0, [r7, #12]
 8005f5a:	60b9      	str	r1, [r7, #8]
 8005f5c:	603b      	str	r3, [r7, #0]
 8005f5e:	4613      	mov	r3, r2
 8005f60:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005f62:	2300      	movs	r3, #0
 8005f64:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f6e:	d112      	bne.n	8005f96 <HAL_SPI_Receive+0x44>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	689b      	ldr	r3, [r3, #8]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10e      	bne.n	8005f96 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005f80:	88fa      	ldrh	r2, [r7, #6]
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	4613      	mov	r3, r2
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	68b9      	ldr	r1, [r7, #8]
 8005f8c:	68f8      	ldr	r0, [r7, #12]
 8005f8e:	f000 f910 	bl	80061b2 <HAL_SPI_TransmitReceive>
 8005f92:	4603      	mov	r3, r0
 8005f94:	e109      	b.n	80061aa <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_SPI_Receive+0x52>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e102      	b.n	80061aa <HAL_SPI_Receive+0x258>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005fac:	f7fc fc56 	bl	800285c <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b01      	cmp	r3, #1
 8005fbc:	d002      	beq.n	8005fc4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005fbe:	2302      	movs	r3, #2
 8005fc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fc2:	e0e9      	b.n	8006198 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <HAL_SPI_Receive+0x7e>
 8005fca:	88fb      	ldrh	r3, [r7, #6]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005fd4:	e0e0      	b.n	8006198 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2204      	movs	r2, #4
 8005fda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	68ba      	ldr	r2, [r7, #8]
 8005fe8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	88fa      	ldrh	r2, [r7, #6]
 8005fee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2200      	movs	r2, #0
 8006004:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2200      	movs	r2, #0
 800600a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006020:	d908      	bls.n	8006034 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006030:	605a      	str	r2, [r3, #4]
 8006032:	e007      	b.n	8006044 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006042:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800604c:	d10f      	bne.n	800606e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800605c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800606c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b40      	cmp	r3, #64	; 0x40
 800607a:	d007      	beq.n	800608c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	681a      	ldr	r2, [r3, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800608a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006094:	d867      	bhi.n	8006166 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006096:	e030      	b.n	80060fa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d117      	bne.n	80060d6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f103 020c 	add.w	r2, r3, #12
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b2:	7812      	ldrb	r2, [r2, #0]
 80060b4:	b2d2      	uxtb	r2, r2
 80060b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	1c5a      	adds	r2, r3, #1
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	3b01      	subs	r3, #1
 80060cc:	b29a      	uxth	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80060d4:	e011      	b.n	80060fa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80060d6:	f7fc fbc1 	bl	800285c <HAL_GetTick>
 80060da:	4602      	mov	r2, r0
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	1ad3      	subs	r3, r2, r3
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d803      	bhi.n	80060ee <HAL_SPI_Receive+0x19c>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d102      	bne.n	80060f4 <HAL_SPI_Receive+0x1a2>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d102      	bne.n	80060fa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80060f4:	2303      	movs	r3, #3
 80060f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80060f8:	e04e      	b.n	8006198 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006100:	b29b      	uxth	r3, r3
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1c8      	bne.n	8006098 <HAL_SPI_Receive+0x146>
 8006106:	e034      	b.n	8006172 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	2b01      	cmp	r3, #1
 8006114:	d115      	bne.n	8006142 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	b292      	uxth	r2, r2
 8006122:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006128:	1c9a      	adds	r2, r3, #2
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006140:	e011      	b.n	8006166 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006142:	f7fc fb8b 	bl	800285c <HAL_GetTick>
 8006146:	4602      	mov	r2, r0
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d803      	bhi.n	800615a <HAL_SPI_Receive+0x208>
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006158:	d102      	bne.n	8006160 <HAL_SPI_Receive+0x20e>
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d102      	bne.n	8006166 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006164:	e018      	b.n	8006198 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1ca      	bne.n	8006108 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006172:	693a      	ldr	r2, [r7, #16]
 8006174:	6839      	ldr	r1, [r7, #0]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fb4c 	bl	8006814 <SPI_EndRxTransaction>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	75fb      	strb	r3, [r7, #23]
 8006194:	e000      	b.n	8006198 <HAL_SPI_Receive+0x246>
  }

error :
 8006196:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b08a      	sub	sp, #40	; 0x28
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80061c0:	2301      	movs	r3, #1
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d101      	bne.n	80061d8 <HAL_SPI_TransmitReceive+0x26>
 80061d4:	2302      	movs	r3, #2
 80061d6:	e1fb      	b.n	80065d0 <HAL_SPI_TransmitReceive+0x41e>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80061e0:	f7fc fb3c 	bl	800285c <HAL_GetTick>
 80061e4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061ec:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80061f4:	887b      	ldrh	r3, [r7, #2]
 80061f6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80061f8:	887b      	ldrh	r3, [r7, #2]
 80061fa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80061fc:	7efb      	ldrb	r3, [r7, #27]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d00e      	beq.n	8006220 <HAL_SPI_TransmitReceive+0x6e>
 8006202:	697b      	ldr	r3, [r7, #20]
 8006204:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006208:	d106      	bne.n	8006218 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	689b      	ldr	r3, [r3, #8]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d102      	bne.n	8006218 <HAL_SPI_TransmitReceive+0x66>
 8006212:	7efb      	ldrb	r3, [r7, #27]
 8006214:	2b04      	cmp	r3, #4
 8006216:	d003      	beq.n	8006220 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006218:	2302      	movs	r3, #2
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800621e:	e1cd      	b.n	80065bc <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d005      	beq.n	8006232 <HAL_SPI_TransmitReceive+0x80>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d002      	beq.n	8006232 <HAL_SPI_TransmitReceive+0x80>
 800622c:	887b      	ldrh	r3, [r7, #2]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d103      	bne.n	800623a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006238:	e1c0      	b.n	80065bc <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b04      	cmp	r3, #4
 8006244:	d003      	beq.n	800624e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	2205      	movs	r2, #5
 800624a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	887a      	ldrh	r2, [r7, #2]
 800625e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	887a      	ldrh	r2, [r7, #2]
 8006266:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	887a      	ldrh	r2, [r7, #2]
 8006274:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	887a      	ldrh	r2, [r7, #2]
 800627a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2200      	movs	r2, #0
 8006286:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006290:	d802      	bhi.n	8006298 <HAL_SPI_TransmitReceive+0xe6>
 8006292:	8a3b      	ldrh	r3, [r7, #16]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d908      	bls.n	80062aa <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062a6:	605a      	str	r2, [r3, #4]
 80062a8:	e007      	b.n	80062ba <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80062b8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b40      	cmp	r3, #64	; 0x40
 80062c6:	d007      	beq.n	80062d8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	681a      	ldr	r2, [r3, #0]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062e0:	d97c      	bls.n	80063dc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d002      	beq.n	80062f0 <HAL_SPI_TransmitReceive+0x13e>
 80062ea:	8a7b      	ldrh	r3, [r7, #18]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d169      	bne.n	80063c4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f4:	881a      	ldrh	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	1c9a      	adds	r2, r3, #2
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800630a:	b29b      	uxth	r3, r3
 800630c:	3b01      	subs	r3, #1
 800630e:	b29a      	uxth	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006314:	e056      	b.n	80063c4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	f003 0302 	and.w	r3, r3, #2
 8006320:	2b02      	cmp	r3, #2
 8006322:	d11b      	bne.n	800635c <HAL_SPI_TransmitReceive+0x1aa>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006328:	b29b      	uxth	r3, r3
 800632a:	2b00      	cmp	r3, #0
 800632c:	d016      	beq.n	800635c <HAL_SPI_TransmitReceive+0x1aa>
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	2b01      	cmp	r3, #1
 8006332:	d113      	bne.n	800635c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	881a      	ldrh	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	1c9a      	adds	r2, r3, #2
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b01      	cmp	r3, #1
 8006368:	d11c      	bne.n	80063a4 <HAL_SPI_TransmitReceive+0x1f2>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006370:	b29b      	uxth	r3, r3
 8006372:	2b00      	cmp	r3, #0
 8006374:	d016      	beq.n	80063a4 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68da      	ldr	r2, [r3, #12]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	b292      	uxth	r2, r2
 8006382:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006388:	1c9a      	adds	r2, r3, #2
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006394:	b29b      	uxth	r3, r3
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80063a0:	2301      	movs	r3, #1
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80063a4:	f7fc fa5a 	bl	800285c <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	69fb      	ldr	r3, [r7, #28]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d807      	bhi.n	80063c4 <HAL_SPI_TransmitReceive+0x212>
 80063b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ba:	d003      	beq.n	80063c4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80063c2:	e0fb      	b.n	80065bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d1a3      	bne.n	8006316 <HAL_SPI_TransmitReceive+0x164>
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063d4:	b29b      	uxth	r3, r3
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d19d      	bne.n	8006316 <HAL_SPI_TransmitReceive+0x164>
 80063da:	e0df      	b.n	800659c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d003      	beq.n	80063ec <HAL_SPI_TransmitReceive+0x23a>
 80063e4:	8a7b      	ldrh	r3, [r7, #18]
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	f040 80cb 	bne.w	8006582 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d912      	bls.n	800641c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fa:	881a      	ldrh	r2, [r3, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006406:	1c9a      	adds	r2, r3, #2
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006410:	b29b      	uxth	r3, r3
 8006412:	3b02      	subs	r3, #2
 8006414:	b29a      	uxth	r2, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	87da      	strh	r2, [r3, #62]	; 0x3e
 800641a:	e0b2      	b.n	8006582 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	330c      	adds	r3, #12
 8006426:	7812      	ldrb	r2, [r2, #0]
 8006428:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006438:	b29b      	uxth	r3, r3
 800643a:	3b01      	subs	r3, #1
 800643c:	b29a      	uxth	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006442:	e09e      	b.n	8006582 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	689b      	ldr	r3, [r3, #8]
 800644a:	f003 0302 	and.w	r3, r3, #2
 800644e:	2b02      	cmp	r3, #2
 8006450:	d134      	bne.n	80064bc <HAL_SPI_TransmitReceive+0x30a>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006456:	b29b      	uxth	r3, r3
 8006458:	2b00      	cmp	r3, #0
 800645a:	d02f      	beq.n	80064bc <HAL_SPI_TransmitReceive+0x30a>
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	2b01      	cmp	r3, #1
 8006460:	d12c      	bne.n	80064bc <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006466:	b29b      	uxth	r3, r3
 8006468:	2b01      	cmp	r3, #1
 800646a:	d912      	bls.n	8006492 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006470:	881a      	ldrh	r2, [r3, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647c:	1c9a      	adds	r2, r3, #2
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006486:	b29b      	uxth	r3, r3
 8006488:	3b02      	subs	r3, #2
 800648a:	b29a      	uxth	r2, r3
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006490:	e012      	b.n	80064b8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	330c      	adds	r3, #12
 800649c:	7812      	ldrb	r2, [r2, #0]
 800649e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a4:	1c5a      	adds	r2, r3, #1
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	b29a      	uxth	r2, r3
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d148      	bne.n	800655c <HAL_SPI_TransmitReceive+0x3aa>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d042      	beq.n	800655c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064dc:	b29b      	uxth	r3, r3
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d923      	bls.n	800652a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	68da      	ldr	r2, [r3, #12]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	b292      	uxth	r2, r2
 80064ee:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f4:	1c9a      	adds	r2, r3, #2
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006500:	b29b      	uxth	r3, r3
 8006502:	3b02      	subs	r3, #2
 8006504:	b29a      	uxth	r2, r3
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006512:	b29b      	uxth	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	d81f      	bhi.n	8006558 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685a      	ldr	r2, [r3, #4]
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006526:	605a      	str	r2, [r3, #4]
 8006528:	e016      	b.n	8006558 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f103 020c 	add.w	r2, r3, #12
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006536:	7812      	ldrb	r2, [r2, #0]
 8006538:	b2d2      	uxtb	r2, r2
 800653a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006540:	1c5a      	adds	r2, r3, #1
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800654c:	b29b      	uxth	r3, r3
 800654e:	3b01      	subs	r3, #1
 8006550:	b29a      	uxth	r2, r3
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006558:	2301      	movs	r3, #1
 800655a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800655c:	f7fc f97e 	bl	800285c <HAL_GetTick>
 8006560:	4602      	mov	r2, r0
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006568:	429a      	cmp	r2, r3
 800656a:	d803      	bhi.n	8006574 <HAL_SPI_TransmitReceive+0x3c2>
 800656c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006572:	d102      	bne.n	800657a <HAL_SPI_TransmitReceive+0x3c8>
 8006574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006576:	2b00      	cmp	r3, #0
 8006578:	d103      	bne.n	8006582 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800657a:	2303      	movs	r3, #3
 800657c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006580:	e01c      	b.n	80065bc <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006586:	b29b      	uxth	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	f47f af5b 	bne.w	8006444 <HAL_SPI_TransmitReceive+0x292>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006594:	b29b      	uxth	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	f47f af54 	bne.w	8006444 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 f98f 	bl	80068c4 <SPI_EndRxTxTransaction>
 80065a6:	4603      	mov	r3, r0
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2220      	movs	r2, #32
 80065b6:	661a      	str	r2, [r3, #96]	; 0x60
 80065b8:	e000      	b.n	80065bc <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80065ba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	2200      	movs	r2, #0
 80065c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065cc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3728      	adds	r7, #40	; 0x28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b088      	sub	sp, #32
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	603b      	str	r3, [r7, #0]
 80065e4:	4613      	mov	r3, r2
 80065e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80065e8:	f7fc f938 	bl	800285c <HAL_GetTick>
 80065ec:	4602      	mov	r2, r0
 80065ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f0:	1a9b      	subs	r3, r3, r2
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	4413      	add	r3, r2
 80065f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80065f8:	f7fc f930 	bl	800285c <HAL_GetTick>
 80065fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80065fe:	4b39      	ldr	r3, [pc, #228]	; (80066e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	015b      	lsls	r3, r3, #5
 8006604:	0d1b      	lsrs	r3, r3, #20
 8006606:	69fa      	ldr	r2, [r7, #28]
 8006608:	fb02 f303 	mul.w	r3, r2, r3
 800660c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800660e:	e054      	b.n	80066ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006616:	d050      	beq.n	80066ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006618:	f7fc f920 	bl	800285c <HAL_GetTick>
 800661c:	4602      	mov	r2, r0
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	1ad3      	subs	r3, r2, r3
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	429a      	cmp	r2, r3
 8006626:	d902      	bls.n	800662e <SPI_WaitFlagStateUntilTimeout+0x56>
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d13d      	bne.n	80066aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	685a      	ldr	r2, [r3, #4]
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800663c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	685b      	ldr	r3, [r3, #4]
 8006642:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006646:	d111      	bne.n	800666c <SPI_WaitFlagStateUntilTimeout+0x94>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006650:	d004      	beq.n	800665c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	689b      	ldr	r3, [r3, #8]
 8006656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665a:	d107      	bne.n	800666c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800666a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006670:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006674:	d10f      	bne.n	8006696 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006684:	601a      	str	r2, [r3, #0]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006694:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e017      	b.n	80066da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d101      	bne.n	80066b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689a      	ldr	r2, [r3, #8]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	4013      	ands	r3, r2
 80066c4:	68ba      	ldr	r2, [r7, #8]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	bf0c      	ite	eq
 80066ca:	2301      	moveq	r3, #1
 80066cc:	2300      	movne	r3, #0
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	461a      	mov	r2, r3
 80066d2:	79fb      	ldrb	r3, [r7, #7]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d19b      	bne.n	8006610 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000000 	.word	0x20000000

080066e8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b08a      	sub	sp, #40	; 0x28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80066fa:	f7fc f8af 	bl	800285c <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006702:	1a9b      	subs	r3, r3, r2
 8006704:	683a      	ldr	r2, [r7, #0]
 8006706:	4413      	add	r3, r2
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800670a:	f7fc f8a7 	bl	800285c <HAL_GetTick>
 800670e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	330c      	adds	r3, #12
 8006716:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006718:	4b3d      	ldr	r3, [pc, #244]	; (8006810 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	4413      	add	r3, r2
 8006722:	00da      	lsls	r2, r3, #3
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	0d1b      	lsrs	r3, r3, #20
 8006728:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800672a:	fb02 f303 	mul.w	r3, r2, r3
 800672e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006730:	e060      	b.n	80067f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006738:	d107      	bne.n	800674a <SPI_WaitFifoStateUntilTimeout+0x62>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d104      	bne.n	800674a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	b2db      	uxtb	r3, r3
 8006746:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006748:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d050      	beq.n	80067f4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006752:	f7fc f883 	bl	800285c <HAL_GetTick>
 8006756:	4602      	mov	r2, r0
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	1ad3      	subs	r3, r2, r3
 800675c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800675e:	429a      	cmp	r2, r3
 8006760:	d902      	bls.n	8006768 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006764:	2b00      	cmp	r3, #0
 8006766:	d13d      	bne.n	80067e4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	685a      	ldr	r2, [r3, #4]
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006776:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006780:	d111      	bne.n	80067a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678a:	d004      	beq.n	8006796 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006794:	d107      	bne.n	80067a6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067a4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ae:	d10f      	bne.n	80067d0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681a      	ldr	r2, [r3, #0]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067be:	601a      	str	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e010      	b.n	8006806 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d101      	bne.n	80067ee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80067ea:	2300      	movs	r3, #0
 80067ec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	3b01      	subs	r3, #1
 80067f2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689a      	ldr	r2, [r3, #8]
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	4013      	ands	r3, r2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	429a      	cmp	r2, r3
 8006802:	d196      	bne.n	8006732 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3728      	adds	r7, #40	; 0x28
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}
 800680e:	bf00      	nop
 8006810:	20000000 	.word	0x20000000

08006814 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af02      	add	r7, sp, #8
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006828:	d111      	bne.n	800684e <SPI_EndRxTransaction+0x3a>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	689b      	ldr	r3, [r3, #8]
 800682e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006832:	d004      	beq.n	800683e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800683c:	d107      	bne.n	800684e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800684c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2200      	movs	r2, #0
 8006856:	2180      	movs	r1, #128	; 0x80
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f7ff febd 	bl	80065d8 <SPI_WaitFlagStateUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d007      	beq.n	8006874 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006868:	f043 0220 	orr.w	r2, r3, #32
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e023      	b.n	80068bc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800687c:	d11d      	bne.n	80068ba <SPI_EndRxTransaction+0xa6>
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006886:	d004      	beq.n	8006892 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006890:	d113      	bne.n	80068ba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2200      	movs	r2, #0
 800689a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800689e:	68f8      	ldr	r0, [r7, #12]
 80068a0:	f7ff ff22 	bl	80066e8 <SPI_WaitFifoStateUntilTimeout>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d007      	beq.n	80068ba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ae:	f043 0220 	orr.w	r2, r3, #32
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e000      	b.n	80068bc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3710      	adds	r7, #16
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af02      	add	r7, sp, #8
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	9300      	str	r3, [sp, #0]
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80068dc:	68f8      	ldr	r0, [r7, #12]
 80068de:	f7ff ff03 	bl	80066e8 <SPI_WaitFifoStateUntilTimeout>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d007      	beq.n	80068f8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068ec:	f043 0220 	orr.w	r2, r3, #32
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80068f4:	2303      	movs	r3, #3
 80068f6:	e027      	b.n	8006948 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	2200      	movs	r2, #0
 8006900:	2180      	movs	r1, #128	; 0x80
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f7ff fe68 	bl	80065d8 <SPI_WaitFlagStateUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006912:	f043 0220 	orr.w	r2, r3, #32
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800691a:	2303      	movs	r3, #3
 800691c:	e014      	b.n	8006948 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	9300      	str	r3, [sp, #0]
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	2200      	movs	r2, #0
 8006926:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	f7ff fedc 	bl	80066e8 <SPI_WaitFifoStateUntilTimeout>
 8006930:	4603      	mov	r3, r0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d007      	beq.n	8006946 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800693a:	f043 0220 	orr.w	r2, r3, #32
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006942:	2303      	movs	r3, #3
 8006944:	e000      	b.n	8006948 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006946:	2300      	movs	r3, #0
}
 8006948:	4618      	mov	r0, r3
 800694a:	3710      	adds	r7, #16
 800694c:	46bd      	mov	sp, r7
 800694e:	bd80      	pop	{r7, pc}

08006950 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b082      	sub	sp, #8
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d101      	bne.n	8006962 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e042      	b.n	80069e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006968:	2b00      	cmp	r3, #0
 800696a:	d106      	bne.n	800697a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f7fb f941 	bl	8001bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2224      	movs	r2, #36	; 0x24
 800697e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	f022 0201 	bic.w	r2, r2, #1
 8006990:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	f000 fc9a 	bl	80072cc <UART_SetConfig>
 8006998:	4603      	mov	r3, r0
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e022      	b.n	80069e8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d002      	beq.n	80069b0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	f000 ff8a 	bl	80078c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80069be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80069ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	681a      	ldr	r2, [r3, #0]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0201 	orr.w	r2, r2, #1
 80069de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f001 f811 	bl	8007a08 <UART_CheckIdleState>
 80069e6:	4603      	mov	r3, r0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3708      	adds	r7, #8
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af02      	add	r7, sp, #8
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a06:	2b20      	cmp	r3, #32
 8006a08:	f040 8084 	bne.w	8006b14 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d002      	beq.n	8006a18 <HAL_UART_Transmit+0x28>
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d101      	bne.n	8006a1c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006a18:	2301      	movs	r3, #1
 8006a1a:	e07c      	b.n	8006b16 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_UART_Transmit+0x3a>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e075      	b.n	8006b16 <HAL_UART_Transmit+0x126>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2221      	movs	r2, #33	; 0x21
 8006a3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a42:	f7fb ff0b 	bl	800285c <HAL_GetTick>
 8006a46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	88fa      	ldrh	r2, [r7, #6]
 8006a4c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	88fa      	ldrh	r2, [r7, #6]
 8006a54:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a60:	d108      	bne.n	8006a74 <HAL_UART_Transmit+0x84>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	691b      	ldr	r3, [r3, #16]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d104      	bne.n	8006a74 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	61bb      	str	r3, [r7, #24]
 8006a72:	e003      	b.n	8006a7c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006a84:	e02d      	b.n	8006ae2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	9300      	str	r3, [sp, #0]
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	2180      	movs	r1, #128	; 0x80
 8006a90:	68f8      	ldr	r0, [r7, #12]
 8006a92:	f001 f804 	bl	8007a9e <UART_WaitOnFlagUntilTimeout>
 8006a96:	4603      	mov	r3, r0
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e03a      	b.n	8006b16 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 8006aa0:	69fb      	ldr	r3, [r7, #28]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10b      	bne.n	8006abe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ab2:	b292      	uxth	r2, r2
 8006ab4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	3302      	adds	r3, #2
 8006aba:	61bb      	str	r3, [r7, #24]
 8006abc:	e008      	b.n	8006ad0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	781a      	ldrb	r2, [r3, #0]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	b292      	uxth	r2, r2
 8006ac8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	3301      	adds	r3, #1
 8006ace:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	b29a      	uxth	r2, r3
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d1cb      	bne.n	8006a86 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	2200      	movs	r2, #0
 8006af6:	2140      	movs	r1, #64	; 0x40
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f000 ffd0 	bl	8007a9e <UART_WaitOnFlagUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d001      	beq.n	8006b08 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e006      	b.n	8006b16 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006b10:	2300      	movs	r3, #0
 8006b12:	e000      	b.n	8006b16 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006b14:	2302      	movs	r3, #2
  }
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
	...

08006b20 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b091      	sub	sp, #68	; 0x44
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	f040 808c 	bne.w	8006c52 <HAL_UART_Transmit_IT+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d002      	beq.n	8006b46 <HAL_UART_Transmit_IT+0x26>
 8006b40:	88fb      	ldrh	r3, [r7, #6]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e084      	b.n	8006c54 <HAL_UART_Transmit_IT+0x134>
    }

    __HAL_LOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d101      	bne.n	8006b58 <HAL_UART_Transmit_IT+0x38>
 8006b54:	2302      	movs	r3, #2
 8006b56:	e07d      	b.n	8006c54 <HAL_UART_Transmit_IT+0x134>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	88fa      	ldrh	r2, [r7, #6]
 8006b6a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	88fa      	ldrh	r2, [r7, #6]
 8006b72:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	675a      	str	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2221      	movs	r2, #33	; 0x21
 8006b88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

#if defined(USART_CR1_FIFOEN)
    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b94:	d12e      	bne.n	8006bf4 <HAL_UART_Transmit_IT+0xd4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b9e:	d107      	bne.n	8006bb0 <HAL_UART_Transmit_IT+0x90>
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d103      	bne.n	8006bb0 <HAL_UART_Transmit_IT+0x90>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	4a2d      	ldr	r2, [pc, #180]	; (8006c60 <HAL_UART_Transmit_IT+0x140>)
 8006bac:	675a      	str	r2, [r3, #116]	; 0x74
 8006bae:	e002      	b.n	8006bb6 <HAL_UART_Transmit_IT+0x96>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	4a2c      	ldr	r2, [pc, #176]	; (8006c64 <HAL_UART_Transmit_IT+0x144>)
 8006bb4:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bd4:	63bb      	str	r3, [r7, #56]	; 0x38
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	3308      	adds	r3, #8
 8006bdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006bde:	637a      	str	r2, [r7, #52]	; 0x34
 8006be0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006be4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006be6:	e841 2300 	strex	r3, r2, [r1]
 8006bea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1e5      	bne.n	8006bbe <HAL_UART_Transmit_IT+0x9e>
 8006bf2:	e02c      	b.n	8006c4e <HAL_UART_Transmit_IT+0x12e>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bfc:	d107      	bne.n	8006c0e <HAL_UART_Transmit_IT+0xee>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d103      	bne.n	8006c0e <HAL_UART_Transmit_IT+0xee>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a17      	ldr	r2, [pc, #92]	; (8006c68 <HAL_UART_Transmit_IT+0x148>)
 8006c0a:	675a      	str	r2, [r3, #116]	; 0x74
 8006c0c:	e002      	b.n	8006c14 <HAL_UART_Transmit_IT+0xf4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a16      	ldr	r2, [pc, #88]	; (8006c6c <HAL_UART_Transmit_IT+0x14c>)
 8006c12:	675a      	str	r2, [r3, #116]	; 0x74
      }

      __HAL_UNLOCK(huart);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	e853 3f00 	ldrex	r3, [r3]
 8006c28:	613b      	str	r3, [r7, #16]
   return(result);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	461a      	mov	r2, r3
 8006c38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c3a:	623b      	str	r3, [r7, #32]
 8006c3c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c3e:	69f9      	ldr	r1, [r7, #28]
 8006c40:	6a3a      	ldr	r2, [r7, #32]
 8006c42:	e841 2300 	strex	r3, r2, [r1]
 8006c46:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d1e6      	bne.n	8006c1c <HAL_UART_Transmit_IT+0xfc>

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e000      	b.n	8006c54 <HAL_UART_Transmit_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 8006c52:	2302      	movs	r3, #2
  }
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3744      	adds	r7, #68	; 0x44
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5e:	4770      	bx	lr
 8006c60:	08007f85 	.word	0x08007f85
 8006c64:	08007ea3 	.word	0x08007ea3
 8006c68:	08007de1 	.word	0x08007de1
 8006c6c:	08007d27 	.word	0x08007d27

08006c70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b0ba      	sub	sp, #232	; 0xe8
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	69db      	ldr	r3, [r3, #28]
 8006c7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c9a:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c9e:	4013      	ands	r3, r2
 8006ca0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d11b      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb0:	f003 0320 	and.w	r3, r3, #32
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d015      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cbc:	f003 0320 	and.w	r3, r3, #32
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d105      	bne.n	8006cd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d009      	beq.n	8006ce4 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f000 82d6 	beq.w	8007286 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	4798      	blx	r3
      }
      return;
 8006ce2:	e2d0      	b.n	8007286 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006ce4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	f000 811f 	beq.w	8006f2c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006cee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006cf2:	4b8b      	ldr	r3, [pc, #556]	; (8006f20 <HAL_UART_IRQHandler+0x2b0>)
 8006cf4:	4013      	ands	r3, r2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d106      	bne.n	8006d08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006cfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cfe:	4b89      	ldr	r3, [pc, #548]	; (8006f24 <HAL_UART_IRQHandler+0x2b4>)
 8006d00:	4013      	ands	r3, r2
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	f000 8112 	beq.w	8006f2c <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d0c:	f003 0301 	and.w	r3, r3, #1
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d011      	beq.n	8006d38 <HAL_UART_IRQHandler+0xc8>
 8006d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00b      	beq.n	8006d38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2201      	movs	r2, #1
 8006d26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d2e:	f043 0201 	orr.w	r2, r3, #1
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d3c:	f003 0302 	and.w	r3, r3, #2
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d011      	beq.n	8006d68 <HAL_UART_IRQHandler+0xf8>
 8006d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d48:	f003 0301 	and.w	r3, r3, #1
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d00b      	beq.n	8006d68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2202      	movs	r2, #2
 8006d56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5e:	f043 0204 	orr.w	r2, r3, #4
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d6c:	f003 0304 	and.w	r3, r3, #4
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d011      	beq.n	8006d98 <HAL_UART_IRQHandler+0x128>
 8006d74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d78:	f003 0301 	and.w	r3, r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d00b      	beq.n	8006d98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	2204      	movs	r2, #4
 8006d86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d8e:	f043 0202 	orr.w	r2, r3, #2
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d9c:	f003 0308 	and.w	r3, r3, #8
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d017      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006da8:	f003 0320 	and.w	r3, r3, #32
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d105      	bne.n	8006dbc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006db0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006db4:	4b5a      	ldr	r3, [pc, #360]	; (8006f20 <HAL_UART_IRQHandler+0x2b0>)
 8006db6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d00b      	beq.n	8006dd4 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	2208      	movs	r2, #8
 8006dc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dca:	f043 0208 	orr.w	r2, r3, #8
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dd8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d012      	beq.n	8006e06 <HAL_UART_IRQHandler+0x196>
 8006de0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00c      	beq.n	8006e06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006df4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dfc:	f043 0220 	orr.w	r2, r3, #32
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 823c 	beq.w	800728a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e16:	f003 0320 	and.w	r3, r3, #32
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d013      	beq.n	8006e46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e22:	f003 0320 	and.w	r3, r3, #32
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d105      	bne.n	8006e36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d007      	beq.n	8006e46 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d003      	beq.n	8006e46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689b      	ldr	r3, [r3, #8]
 8006e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e5a:	2b40      	cmp	r3, #64	; 0x40
 8006e5c:	d005      	beq.n	8006e6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d04f      	beq.n	8006f0a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fedf 	bl	8007c2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7a:	2b40      	cmp	r3, #64	; 0x40
 8006e7c:	d141      	bne.n	8006f02 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	3308      	adds	r3, #8
 8006e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e8c:	e853 3f00 	ldrex	r3, [r3]
 8006e90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006eaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006eae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006eb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006eba:	e841 2300 	strex	r3, r2, [r1]
 8006ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d1d9      	bne.n	8006e7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d013      	beq.n	8006efa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ed6:	4a14      	ldr	r2, [pc, #80]	; (8006f28 <HAL_UART_IRQHandler+0x2b8>)
 8006ed8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fb fe59 	bl	8002b96 <HAL_DMA_Abort_IT>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d017      	beq.n	8006f1a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006ef4:	4610      	mov	r0, r2
 8006ef6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ef8:	e00f      	b.n	8006f1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f9d0 	bl	80072a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f00:	e00b      	b.n	8006f1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 f9cc 	bl	80072a0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	e007      	b.n	8006f1a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f9c8 	bl	80072a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006f18:	e1b7      	b.n	800728a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f1a:	bf00      	nop
    return;
 8006f1c:	e1b5      	b.n	800728a <HAL_UART_IRQHandler+0x61a>
 8006f1e:	bf00      	nop
 8006f20:	10000001 	.word	0x10000001
 8006f24:	04000120 	.word	0x04000120
 8006f28:	08007cfb 	.word	0x08007cfb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	f040 814a 	bne.w	80071ca <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3a:	f003 0310 	and.w	r3, r3, #16
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f000 8143 	beq.w	80071ca <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 813c 	beq.w	80071ca <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	2210      	movs	r2, #16
 8006f58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f64:	2b40      	cmp	r3, #64	; 0x40
 8006f66:	f040 80b5 	bne.w	80070d4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f76:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	f000 8187 	beq.w	800728e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006f86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	f080 817f 	bcs.w	800728e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0320 	and.w	r3, r3, #32
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	f040 8086 	bne.w	80070b8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fb8:	e853 3f00 	ldrex	r3, [r3]
 8006fbc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fda:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fe6:	e841 2300 	strex	r3, r2, [r1]
 8006fea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1da      	bne.n	8006fac <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007000:	e853 3f00 	ldrex	r3, [r3]
 8007004:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007006:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007008:	f023 0301 	bic.w	r3, r3, #1
 800700c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	3308      	adds	r3, #8
 8007016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800701a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800701e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007022:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007026:	e841 2300 	strex	r3, r2, [r1]
 800702a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800702c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800702e:	2b00      	cmp	r3, #0
 8007030:	d1e1      	bne.n	8006ff6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800703c:	e853 3f00 	ldrex	r3, [r3]
 8007040:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007042:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007044:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007048:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3308      	adds	r3, #8
 8007052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007056:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007058:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800705c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800705e:	e841 2300 	strex	r3, r2, [r1]
 8007062:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007064:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1e3      	bne.n	8007032 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2220      	movs	r2, #32
 800706e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800707e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007080:	e853 3f00 	ldrex	r3, [r3]
 8007084:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007088:	f023 0310 	bic.w	r3, r3, #16
 800708c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	461a      	mov	r2, r3
 8007096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800709a:	65bb      	str	r3, [r7, #88]	; 0x58
 800709c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800709e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070a2:	e841 2300 	strex	r3, r2, [r1]
 80070a6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d1e4      	bne.n	8007078 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fb fd13 	bl	8002ade <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f8f1 	bl	80072b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070d2:	e0dc      	b.n	800728e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	1ad3      	subs	r3, r2, r3
 80070e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	f000 80ce 	beq.w	8007292 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80070f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80c9 	beq.w	8007292 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007108:	e853 3f00 	ldrex	r3, [r3]
 800710c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800710e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007110:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007114:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	461a      	mov	r2, r3
 800711e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007122:	647b      	str	r3, [r7, #68]	; 0x44
 8007124:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007126:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007128:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800712a:	e841 2300 	strex	r3, r2, [r1]
 800712e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007132:	2b00      	cmp	r3, #0
 8007134:	d1e4      	bne.n	8007100 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	3308      	adds	r3, #8
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800713e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007140:	e853 3f00 	ldrex	r3, [r3]
 8007144:	623b      	str	r3, [r7, #32]
   return(result);
 8007146:	6a3b      	ldr	r3, [r7, #32]
 8007148:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800714c:	f023 0301 	bic.w	r3, r3, #1
 8007150:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800715e:	633a      	str	r2, [r7, #48]	; 0x30
 8007160:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007162:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007166:	e841 2300 	strex	r3, r2, [r1]
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800716c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800716e:	2b00      	cmp	r3, #0
 8007170:	d1e1      	bne.n	8007136 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2220      	movs	r2, #32
 8007176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	e853 3f00 	ldrex	r3, [r3]
 8007192:	60fb      	str	r3, [r7, #12]
   return(result);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0310 	bic.w	r3, r3, #16
 800719a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	461a      	mov	r2, r3
 80071a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071a8:	61fb      	str	r3, [r7, #28]
 80071aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ac:	69b9      	ldr	r1, [r7, #24]
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	e841 2300 	strex	r3, r2, [r1]
 80071b4:	617b      	str	r3, [r7, #20]
   return(result);
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d1e4      	bne.n	8007186 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071c0:	4619      	mov	r1, r3
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f876 	bl	80072b4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071c8:	e063      	b.n	8007292 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80071ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00e      	beq.n	80071f4 <HAL_UART_IRQHandler+0x584>
 80071d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d008      	beq.n	80071f4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 ff69 	bl	80080c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071f2:	e051      	b.n	8007298 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80071f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d014      	beq.n	800722a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007200:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007208:	2b00      	cmp	r3, #0
 800720a:	d105      	bne.n	8007218 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800720c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007210:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d008      	beq.n	800722a <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800721c:	2b00      	cmp	r3, #0
 800721e:	d03a      	beq.n	8007296 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
    }
    return;
 8007228:	e035      	b.n	8007296 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800722a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800722e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007232:	2b00      	cmp	r3, #0
 8007234:	d009      	beq.n	800724a <HAL_UART_IRQHandler+0x5da>
 8007236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800723a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 ff13 	bl	800806e <UART_EndTransmit_IT>
    return;
 8007248:	e026      	b.n	8007298 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800724a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800724e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d009      	beq.n	800726a <HAL_UART_IRQHandler+0x5fa>
 8007256:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800725a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 ff42 	bl	80080ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007268:	e016      	b.n	8007298 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800726a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007272:	2b00      	cmp	r3, #0
 8007274:	d010      	beq.n	8007298 <HAL_UART_IRQHandler+0x628>
 8007276:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800727a:	2b00      	cmp	r3, #0
 800727c:	da0c      	bge.n	8007298 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 ff2a 	bl	80080d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007284:	e008      	b.n	8007298 <HAL_UART_IRQHandler+0x628>
      return;
 8007286:	bf00      	nop
 8007288:	e006      	b.n	8007298 <HAL_UART_IRQHandler+0x628>
    return;
 800728a:	bf00      	nop
 800728c:	e004      	b.n	8007298 <HAL_UART_IRQHandler+0x628>
      return;
 800728e:	bf00      	nop
 8007290:	e002      	b.n	8007298 <HAL_UART_IRQHandler+0x628>
      return;
 8007292:	bf00      	nop
 8007294:	e000      	b.n	8007298 <HAL_UART_IRQHandler+0x628>
    return;
 8007296:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8007298:	37e8      	adds	r7, #232	; 0xe8
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop

080072a0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80072a0:	b480      	push	{r7}
 80072a2:	b083      	sub	sp, #12
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80072a8:	bf00      	nop
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b083      	sub	sp, #12
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
 80072bc:	460b      	mov	r3, r1
 80072be:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80072c0:	bf00      	nop
 80072c2:	370c      	adds	r7, #12
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80072cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80072d0:	b08c      	sub	sp, #48	; 0x30
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80072d6:	2300      	movs	r3, #0
 80072d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	689a      	ldr	r2, [r3, #8]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	691b      	ldr	r3, [r3, #16]
 80072e4:	431a      	orrs	r2, r3
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	4baa      	ldr	r3, [pc, #680]	; (80075a4 <UART_SetConfig+0x2d8>)
 80072fc:	4013      	ands	r3, r2
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	6812      	ldr	r2, [r2, #0]
 8007302:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007304:	430b      	orrs	r3, r1
 8007306:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	68da      	ldr	r2, [r3, #12]
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a9f      	ldr	r2, [pc, #636]	; (80075a8 <UART_SetConfig+0x2dc>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d004      	beq.n	8007338 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	6a1b      	ldr	r3, [r3, #32]
 8007332:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007334:	4313      	orrs	r3, r2
 8007336:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007342:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007346:	697a      	ldr	r2, [r7, #20]
 8007348:	6812      	ldr	r2, [r2, #0]
 800734a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800734c:	430b      	orrs	r3, r1
 800734e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007356:	f023 010f 	bic.w	r1, r3, #15
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	430a      	orrs	r2, r1
 8007364:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a90      	ldr	r2, [pc, #576]	; (80075ac <UART_SetConfig+0x2e0>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d125      	bne.n	80073bc <UART_SetConfig+0xf0>
 8007370:	4b8f      	ldr	r3, [pc, #572]	; (80075b0 <UART_SetConfig+0x2e4>)
 8007372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b03      	cmp	r3, #3
 800737c:	d81a      	bhi.n	80073b4 <UART_SetConfig+0xe8>
 800737e:	a201      	add	r2, pc, #4	; (adr r2, 8007384 <UART_SetConfig+0xb8>)
 8007380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007384:	08007395 	.word	0x08007395
 8007388:	080073a5 	.word	0x080073a5
 800738c:	0800739d 	.word	0x0800739d
 8007390:	080073ad 	.word	0x080073ad
 8007394:	2301      	movs	r3, #1
 8007396:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800739a:	e116      	b.n	80075ca <UART_SetConfig+0x2fe>
 800739c:	2302      	movs	r3, #2
 800739e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073a2:	e112      	b.n	80075ca <UART_SetConfig+0x2fe>
 80073a4:	2304      	movs	r3, #4
 80073a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073aa:	e10e      	b.n	80075ca <UART_SetConfig+0x2fe>
 80073ac:	2308      	movs	r3, #8
 80073ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073b2:	e10a      	b.n	80075ca <UART_SetConfig+0x2fe>
 80073b4:	2310      	movs	r3, #16
 80073b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80073ba:	e106      	b.n	80075ca <UART_SetConfig+0x2fe>
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a7c      	ldr	r2, [pc, #496]	; (80075b4 <UART_SetConfig+0x2e8>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d138      	bne.n	8007438 <UART_SetConfig+0x16c>
 80073c6:	4b7a      	ldr	r3, [pc, #488]	; (80075b0 <UART_SetConfig+0x2e4>)
 80073c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073cc:	f003 030c 	and.w	r3, r3, #12
 80073d0:	2b0c      	cmp	r3, #12
 80073d2:	d82d      	bhi.n	8007430 <UART_SetConfig+0x164>
 80073d4:	a201      	add	r2, pc, #4	; (adr r2, 80073dc <UART_SetConfig+0x110>)
 80073d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073da:	bf00      	nop
 80073dc:	08007411 	.word	0x08007411
 80073e0:	08007431 	.word	0x08007431
 80073e4:	08007431 	.word	0x08007431
 80073e8:	08007431 	.word	0x08007431
 80073ec:	08007421 	.word	0x08007421
 80073f0:	08007431 	.word	0x08007431
 80073f4:	08007431 	.word	0x08007431
 80073f8:	08007431 	.word	0x08007431
 80073fc:	08007419 	.word	0x08007419
 8007400:	08007431 	.word	0x08007431
 8007404:	08007431 	.word	0x08007431
 8007408:	08007431 	.word	0x08007431
 800740c:	08007429 	.word	0x08007429
 8007410:	2300      	movs	r3, #0
 8007412:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007416:	e0d8      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007418:	2302      	movs	r3, #2
 800741a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800741e:	e0d4      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007420:	2304      	movs	r3, #4
 8007422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007426:	e0d0      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007428:	2308      	movs	r3, #8
 800742a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800742e:	e0cc      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007430:	2310      	movs	r3, #16
 8007432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007436:	e0c8      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a5e      	ldr	r2, [pc, #376]	; (80075b8 <UART_SetConfig+0x2ec>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d125      	bne.n	800748e <UART_SetConfig+0x1c2>
 8007442:	4b5b      	ldr	r3, [pc, #364]	; (80075b0 <UART_SetConfig+0x2e4>)
 8007444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007448:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800744c:	2b30      	cmp	r3, #48	; 0x30
 800744e:	d016      	beq.n	800747e <UART_SetConfig+0x1b2>
 8007450:	2b30      	cmp	r3, #48	; 0x30
 8007452:	d818      	bhi.n	8007486 <UART_SetConfig+0x1ba>
 8007454:	2b20      	cmp	r3, #32
 8007456:	d00a      	beq.n	800746e <UART_SetConfig+0x1a2>
 8007458:	2b20      	cmp	r3, #32
 800745a:	d814      	bhi.n	8007486 <UART_SetConfig+0x1ba>
 800745c:	2b00      	cmp	r3, #0
 800745e:	d002      	beq.n	8007466 <UART_SetConfig+0x19a>
 8007460:	2b10      	cmp	r3, #16
 8007462:	d008      	beq.n	8007476 <UART_SetConfig+0x1aa>
 8007464:	e00f      	b.n	8007486 <UART_SetConfig+0x1ba>
 8007466:	2300      	movs	r3, #0
 8007468:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800746c:	e0ad      	b.n	80075ca <UART_SetConfig+0x2fe>
 800746e:	2302      	movs	r3, #2
 8007470:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007474:	e0a9      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007476:	2304      	movs	r3, #4
 8007478:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800747c:	e0a5      	b.n	80075ca <UART_SetConfig+0x2fe>
 800747e:	2308      	movs	r3, #8
 8007480:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007484:	e0a1      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007486:	2310      	movs	r3, #16
 8007488:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800748c:	e09d      	b.n	80075ca <UART_SetConfig+0x2fe>
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a4a      	ldr	r2, [pc, #296]	; (80075bc <UART_SetConfig+0x2f0>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d125      	bne.n	80074e4 <UART_SetConfig+0x218>
 8007498:	4b45      	ldr	r3, [pc, #276]	; (80075b0 <UART_SetConfig+0x2e4>)
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800749e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80074a2:	2bc0      	cmp	r3, #192	; 0xc0
 80074a4:	d016      	beq.n	80074d4 <UART_SetConfig+0x208>
 80074a6:	2bc0      	cmp	r3, #192	; 0xc0
 80074a8:	d818      	bhi.n	80074dc <UART_SetConfig+0x210>
 80074aa:	2b80      	cmp	r3, #128	; 0x80
 80074ac:	d00a      	beq.n	80074c4 <UART_SetConfig+0x1f8>
 80074ae:	2b80      	cmp	r3, #128	; 0x80
 80074b0:	d814      	bhi.n	80074dc <UART_SetConfig+0x210>
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d002      	beq.n	80074bc <UART_SetConfig+0x1f0>
 80074b6:	2b40      	cmp	r3, #64	; 0x40
 80074b8:	d008      	beq.n	80074cc <UART_SetConfig+0x200>
 80074ba:	e00f      	b.n	80074dc <UART_SetConfig+0x210>
 80074bc:	2300      	movs	r3, #0
 80074be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074c2:	e082      	b.n	80075ca <UART_SetConfig+0x2fe>
 80074c4:	2302      	movs	r3, #2
 80074c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074ca:	e07e      	b.n	80075ca <UART_SetConfig+0x2fe>
 80074cc:	2304      	movs	r3, #4
 80074ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074d2:	e07a      	b.n	80075ca <UART_SetConfig+0x2fe>
 80074d4:	2308      	movs	r3, #8
 80074d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074da:	e076      	b.n	80075ca <UART_SetConfig+0x2fe>
 80074dc:	2310      	movs	r3, #16
 80074de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80074e2:	e072      	b.n	80075ca <UART_SetConfig+0x2fe>
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4a35      	ldr	r2, [pc, #212]	; (80075c0 <UART_SetConfig+0x2f4>)
 80074ea:	4293      	cmp	r3, r2
 80074ec:	d12a      	bne.n	8007544 <UART_SetConfig+0x278>
 80074ee:	4b30      	ldr	r3, [pc, #192]	; (80075b0 <UART_SetConfig+0x2e4>)
 80074f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80074f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074fc:	d01a      	beq.n	8007534 <UART_SetConfig+0x268>
 80074fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007502:	d81b      	bhi.n	800753c <UART_SetConfig+0x270>
 8007504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007508:	d00c      	beq.n	8007524 <UART_SetConfig+0x258>
 800750a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800750e:	d815      	bhi.n	800753c <UART_SetConfig+0x270>
 8007510:	2b00      	cmp	r3, #0
 8007512:	d003      	beq.n	800751c <UART_SetConfig+0x250>
 8007514:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007518:	d008      	beq.n	800752c <UART_SetConfig+0x260>
 800751a:	e00f      	b.n	800753c <UART_SetConfig+0x270>
 800751c:	2300      	movs	r3, #0
 800751e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007522:	e052      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007524:	2302      	movs	r3, #2
 8007526:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800752a:	e04e      	b.n	80075ca <UART_SetConfig+0x2fe>
 800752c:	2304      	movs	r3, #4
 800752e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007532:	e04a      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007534:	2308      	movs	r3, #8
 8007536:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800753a:	e046      	b.n	80075ca <UART_SetConfig+0x2fe>
 800753c:	2310      	movs	r3, #16
 800753e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007542:	e042      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a17      	ldr	r2, [pc, #92]	; (80075a8 <UART_SetConfig+0x2dc>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d13a      	bne.n	80075c4 <UART_SetConfig+0x2f8>
 800754e:	4b18      	ldr	r3, [pc, #96]	; (80075b0 <UART_SetConfig+0x2e4>)
 8007550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007554:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800755c:	d01a      	beq.n	8007594 <UART_SetConfig+0x2c8>
 800755e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007562:	d81b      	bhi.n	800759c <UART_SetConfig+0x2d0>
 8007564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007568:	d00c      	beq.n	8007584 <UART_SetConfig+0x2b8>
 800756a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800756e:	d815      	bhi.n	800759c <UART_SetConfig+0x2d0>
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <UART_SetConfig+0x2b0>
 8007574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007578:	d008      	beq.n	800758c <UART_SetConfig+0x2c0>
 800757a:	e00f      	b.n	800759c <UART_SetConfig+0x2d0>
 800757c:	2300      	movs	r3, #0
 800757e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007582:	e022      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007584:	2302      	movs	r3, #2
 8007586:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800758a:	e01e      	b.n	80075ca <UART_SetConfig+0x2fe>
 800758c:	2304      	movs	r3, #4
 800758e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007592:	e01a      	b.n	80075ca <UART_SetConfig+0x2fe>
 8007594:	2308      	movs	r3, #8
 8007596:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800759a:	e016      	b.n	80075ca <UART_SetConfig+0x2fe>
 800759c:	2310      	movs	r3, #16
 800759e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80075a2:	e012      	b.n	80075ca <UART_SetConfig+0x2fe>
 80075a4:	cfff69f3 	.word	0xcfff69f3
 80075a8:	40008000 	.word	0x40008000
 80075ac:	40013800 	.word	0x40013800
 80075b0:	40021000 	.word	0x40021000
 80075b4:	40004400 	.word	0x40004400
 80075b8:	40004800 	.word	0x40004800
 80075bc:	40004c00 	.word	0x40004c00
 80075c0:	40005000 	.word	0x40005000
 80075c4:	2310      	movs	r3, #16
 80075c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4aae      	ldr	r2, [pc, #696]	; (8007888 <UART_SetConfig+0x5bc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	f040 8097 	bne.w	8007704 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80075d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d823      	bhi.n	8007626 <UART_SetConfig+0x35a>
 80075de:	a201      	add	r2, pc, #4	; (adr r2, 80075e4 <UART_SetConfig+0x318>)
 80075e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e4:	08007609 	.word	0x08007609
 80075e8:	08007627 	.word	0x08007627
 80075ec:	08007611 	.word	0x08007611
 80075f0:	08007627 	.word	0x08007627
 80075f4:	08007617 	.word	0x08007617
 80075f8:	08007627 	.word	0x08007627
 80075fc:	08007627 	.word	0x08007627
 8007600:	08007627 	.word	0x08007627
 8007604:	0800761f 	.word	0x0800761f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007608:	f7fd fc2e 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 800760c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800760e:	e010      	b.n	8007632 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007610:	4b9e      	ldr	r3, [pc, #632]	; (800788c <UART_SetConfig+0x5c0>)
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007614:	e00d      	b.n	8007632 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007616:	f7fd fb91 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 800761a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800761c:	e009      	b.n	8007632 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007624:	e005      	b.n	8007632 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007630:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 8130 	beq.w	800789a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763e:	4a94      	ldr	r2, [pc, #592]	; (8007890 <UART_SetConfig+0x5c4>)
 8007640:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007644:	461a      	mov	r2, r3
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	fbb3 f3f2 	udiv	r3, r3, r2
 800764c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	685a      	ldr	r2, [r3, #4]
 8007652:	4613      	mov	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	429a      	cmp	r2, r3
 800765c:	d305      	bcc.n	800766a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	429a      	cmp	r2, r3
 8007668:	d903      	bls.n	8007672 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800766a:	2301      	movs	r3, #1
 800766c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007670:	e113      	b.n	800789a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007674:	2200      	movs	r2, #0
 8007676:	60bb      	str	r3, [r7, #8]
 8007678:	60fa      	str	r2, [r7, #12]
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	4a84      	ldr	r2, [pc, #528]	; (8007890 <UART_SetConfig+0x5c4>)
 8007680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007684:	b29b      	uxth	r3, r3
 8007686:	2200      	movs	r2, #0
 8007688:	603b      	str	r3, [r7, #0]
 800768a:	607a      	str	r2, [r7, #4]
 800768c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007690:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007694:	f7f9 fb10 	bl	8000cb8 <__aeabi_uldivmod>
 8007698:	4602      	mov	r2, r0
 800769a:	460b      	mov	r3, r1
 800769c:	4610      	mov	r0, r2
 800769e:	4619      	mov	r1, r3
 80076a0:	f04f 0200 	mov.w	r2, #0
 80076a4:	f04f 0300 	mov.w	r3, #0
 80076a8:	020b      	lsls	r3, r1, #8
 80076aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80076ae:	0202      	lsls	r2, r0, #8
 80076b0:	6979      	ldr	r1, [r7, #20]
 80076b2:	6849      	ldr	r1, [r1, #4]
 80076b4:	0849      	lsrs	r1, r1, #1
 80076b6:	2000      	movs	r0, #0
 80076b8:	460c      	mov	r4, r1
 80076ba:	4605      	mov	r5, r0
 80076bc:	eb12 0804 	adds.w	r8, r2, r4
 80076c0:	eb43 0905 	adc.w	r9, r3, r5
 80076c4:	697b      	ldr	r3, [r7, #20]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	469a      	mov	sl, r3
 80076cc:	4693      	mov	fp, r2
 80076ce:	4652      	mov	r2, sl
 80076d0:	465b      	mov	r3, fp
 80076d2:	4640      	mov	r0, r8
 80076d4:	4649      	mov	r1, r9
 80076d6:	f7f9 faef 	bl	8000cb8 <__aeabi_uldivmod>
 80076da:	4602      	mov	r2, r0
 80076dc:	460b      	mov	r3, r1
 80076de:	4613      	mov	r3, r2
 80076e0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80076e2:	6a3b      	ldr	r3, [r7, #32]
 80076e4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80076e8:	d308      	bcc.n	80076fc <UART_SetConfig+0x430>
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076f0:	d204      	bcs.n	80076fc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6a3a      	ldr	r2, [r7, #32]
 80076f8:	60da      	str	r2, [r3, #12]
 80076fa:	e0ce      	b.n	800789a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007702:	e0ca      	b.n	800789a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	69db      	ldr	r3, [r3, #28]
 8007708:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800770c:	d166      	bne.n	80077dc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800770e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007712:	2b08      	cmp	r3, #8
 8007714:	d827      	bhi.n	8007766 <UART_SetConfig+0x49a>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <UART_SetConfig+0x450>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	08007741 	.word	0x08007741
 8007720:	08007749 	.word	0x08007749
 8007724:	08007751 	.word	0x08007751
 8007728:	08007767 	.word	0x08007767
 800772c:	08007757 	.word	0x08007757
 8007730:	08007767 	.word	0x08007767
 8007734:	08007767 	.word	0x08007767
 8007738:	08007767 	.word	0x08007767
 800773c:	0800775f 	.word	0x0800775f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007740:	f7fd fb92 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 8007744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007746:	e014      	b.n	8007772 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007748:	f7fd fba4 	bl	8004e94 <HAL_RCC_GetPCLK2Freq>
 800774c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800774e:	e010      	b.n	8007772 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007750:	4b4e      	ldr	r3, [pc, #312]	; (800788c <UART_SetConfig+0x5c0>)
 8007752:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007754:	e00d      	b.n	8007772 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007756:	f7fd faf1 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 800775a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800775c:	e009      	b.n	8007772 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800775e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007764:	e005      	b.n	8007772 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007766:	2300      	movs	r3, #0
 8007768:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007770:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007774:	2b00      	cmp	r3, #0
 8007776:	f000 8090 	beq.w	800789a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777e:	4a44      	ldr	r2, [pc, #272]	; (8007890 <UART_SetConfig+0x5c4>)
 8007780:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007784:	461a      	mov	r2, r3
 8007786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007788:	fbb3 f3f2 	udiv	r3, r3, r2
 800778c:	005a      	lsls	r2, r3, #1
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	085b      	lsrs	r3, r3, #1
 8007794:	441a      	add	r2, r3
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	fbb2 f3f3 	udiv	r3, r2, r3
 800779e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	2b0f      	cmp	r3, #15
 80077a4:	d916      	bls.n	80077d4 <UART_SetConfig+0x508>
 80077a6:	6a3b      	ldr	r3, [r7, #32]
 80077a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ac:	d212      	bcs.n	80077d4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	b29b      	uxth	r3, r3
 80077b2:	f023 030f 	bic.w	r3, r3, #15
 80077b6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	085b      	lsrs	r3, r3, #1
 80077bc:	b29b      	uxth	r3, r3
 80077be:	f003 0307 	and.w	r3, r3, #7
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	8bfb      	ldrh	r3, [r7, #30]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	8bfa      	ldrh	r2, [r7, #30]
 80077d0:	60da      	str	r2, [r3, #12]
 80077d2:	e062      	b.n	800789a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80077da:	e05e      	b.n	800789a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077dc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80077e0:	2b08      	cmp	r3, #8
 80077e2:	d828      	bhi.n	8007836 <UART_SetConfig+0x56a>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <UART_SetConfig+0x520>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	08007811 	.word	0x08007811
 80077f0:	08007819 	.word	0x08007819
 80077f4:	08007821 	.word	0x08007821
 80077f8:	08007837 	.word	0x08007837
 80077fc:	08007827 	.word	0x08007827
 8007800:	08007837 	.word	0x08007837
 8007804:	08007837 	.word	0x08007837
 8007808:	08007837 	.word	0x08007837
 800780c:	0800782f 	.word	0x0800782f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007810:	f7fd fb2a 	bl	8004e68 <HAL_RCC_GetPCLK1Freq>
 8007814:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007816:	e014      	b.n	8007842 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007818:	f7fd fb3c 	bl	8004e94 <HAL_RCC_GetPCLK2Freq>
 800781c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800781e:	e010      	b.n	8007842 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007820:	4b1a      	ldr	r3, [pc, #104]	; (800788c <UART_SetConfig+0x5c0>)
 8007822:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007824:	e00d      	b.n	8007842 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007826:	f7fd fa89 	bl	8004d3c <HAL_RCC_GetSysClockFreq>
 800782a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800782c:	e009      	b.n	8007842 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800782e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007834:	e005      	b.n	8007842 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007836:	2300      	movs	r3, #0
 8007838:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007840:	bf00      	nop
    }

    if (pclk != 0U)
 8007842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007844:	2b00      	cmp	r3, #0
 8007846:	d028      	beq.n	800789a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784c:	4a10      	ldr	r2, [pc, #64]	; (8007890 <UART_SetConfig+0x5c4>)
 800784e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007852:	461a      	mov	r2, r3
 8007854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007856:	fbb3 f2f2 	udiv	r2, r3, r2
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	085b      	lsrs	r3, r3, #1
 8007860:	441a      	add	r2, r3
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	685b      	ldr	r3, [r3, #4]
 8007866:	fbb2 f3f3 	udiv	r3, r2, r3
 800786a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	2b0f      	cmp	r3, #15
 8007870:	d910      	bls.n	8007894 <UART_SetConfig+0x5c8>
 8007872:	6a3b      	ldr	r3, [r7, #32]
 8007874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007878:	d20c      	bcs.n	8007894 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800787a:	6a3b      	ldr	r3, [r7, #32]
 800787c:	b29a      	uxth	r2, r3
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60da      	str	r2, [r3, #12]
 8007884:	e009      	b.n	800789a <UART_SetConfig+0x5ce>
 8007886:	bf00      	nop
 8007888:	40008000 	.word	0x40008000
 800788c:	00f42400 	.word	0x00f42400
 8007890:	08010a0c 	.word	0x08010a0c
      }
      else
      {
        ret = HAL_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2201      	movs	r2, #1
 800789e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	2200      	movs	r2, #0
 80078ae:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	2200      	movs	r2, #0
 80078b4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80078b6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80078ba:	4618      	mov	r0, r3
 80078bc:	3730      	adds	r7, #48	; 0x30
 80078be:	46bd      	mov	sp, r7
 80078c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080078c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d0:	f003 0301 	and.w	r3, r3, #1
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f2:	f003 0302 	and.w	r3, r3, #2
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007936:	f003 0308 	and.w	r3, r3, #8
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	d00a      	beq.n	8007976 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	689b      	ldr	r3, [r3, #8]
 8007966:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00a      	beq.n	8007998 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	689b      	ldr	r3, [r3, #8]
 8007988:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800799c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01a      	beq.n	80079da <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c2:	d10a      	bne.n	80079da <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	685b      	ldr	r3, [r3, #4]
 80079ca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	430a      	orrs	r2, r1
 80079d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d00a      	beq.n	80079fc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	685b      	ldr	r3, [r3, #4]
 80079ec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	605a      	str	r2, [r3, #4]
  }
}
 80079fc:	bf00      	nop
 80079fe:	370c      	adds	r7, #12
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b086      	sub	sp, #24
 8007a0c:	af02      	add	r7, sp, #8
 8007a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a18:	f7fa ff20 	bl	800285c <HAL_GetTick>
 8007a1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d10e      	bne.n	8007a4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a30:	9300      	str	r3, [sp, #0]
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2200      	movs	r2, #0
 8007a36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f82f 	bl	8007a9e <UART_WaitOnFlagUntilTimeout>
 8007a40:	4603      	mov	r3, r0
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d001      	beq.n	8007a4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a46:	2303      	movs	r3, #3
 8007a48:	e025      	b.n	8007a96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b04      	cmp	r3, #4
 8007a56:	d10e      	bne.n	8007a76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a5c:	9300      	str	r3, [sp, #0]
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2200      	movs	r2, #0
 8007a62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f819 	bl	8007a9e <UART_WaitOnFlagUntilTimeout>
 8007a6c:	4603      	mov	r3, r0
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d001      	beq.n	8007a76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e00f      	b.n	8007a96 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2220      	movs	r2, #32
 8007a82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b09c      	sub	sp, #112	; 0x70
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	603b      	str	r3, [r7, #0]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aae:	e0a9      	b.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ab0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab6:	f000 80a5 	beq.w	8007c04 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aba:	f7fa fecf 	bl	800285c <HAL_GetTick>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d302      	bcc.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x32>
 8007aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d140      	bne.n	8007b52 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ad8:	e853 3f00 	ldrex	r3, [r3]
 8007adc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ae0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ae4:	667b      	str	r3, [r7, #100]	; 0x64
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007af0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007af4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007af6:	e841 2300 	strex	r3, r2, [r1]
 8007afa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1e6      	bne.n	8007ad0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	3308      	adds	r3, #8
 8007b08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b14:	f023 0301 	bic.w	r3, r3, #1
 8007b18:	663b      	str	r3, [r7, #96]	; 0x60
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3308      	adds	r3, #8
 8007b20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007b22:	64ba      	str	r2, [r7, #72]	; 0x48
 8007b24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b2a:	e841 2300 	strex	r3, r2, [r1]
 8007b2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d1e5      	bne.n	8007b02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2220      	movs	r2, #32
 8007b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	2220      	movs	r2, #32
 8007b42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2200      	movs	r2, #0
 8007b4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e069      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d051      	beq.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	69db      	ldr	r3, [r3, #28]
 8007b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b6e:	d149      	bne.n	8007c04 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b78:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b98:	637b      	str	r3, [r7, #52]	; 0x34
 8007b9a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e6      	bne.n	8007b7a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	3308      	adds	r3, #8
 8007bb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	e853 3f00 	ldrex	r3, [r3]
 8007bba:	613b      	str	r3, [r7, #16]
   return(result);
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	f023 0301 	bic.w	r3, r3, #1
 8007bc2:	66bb      	str	r3, [r7, #104]	; 0x68
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007bcc:	623a      	str	r2, [r7, #32]
 8007bce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd0:	69f9      	ldr	r1, [r7, #28]
 8007bd2:	6a3a      	ldr	r2, [r7, #32]
 8007bd4:	e841 2300 	strex	r3, r2, [r1]
 8007bd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1e5      	bne.n	8007bac <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	2220      	movs	r2, #32
 8007bec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007c00:	2303      	movs	r3, #3
 8007c02:	e010      	b.n	8007c26 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69da      	ldr	r2, [r3, #28]
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	bf0c      	ite	eq
 8007c14:	2301      	moveq	r3, #1
 8007c16:	2300      	movne	r3, #0
 8007c18:	b2db      	uxtb	r3, r3
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	79fb      	ldrb	r3, [r7, #7]
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	f43f af46 	beq.w	8007ab0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c24:	2300      	movs	r3, #0
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3770      	adds	r7, #112	; 0x70
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c2e:	b480      	push	{r7}
 8007c30:	b095      	sub	sp, #84	; 0x54
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	e853 3f00 	ldrex	r3, [r3]
 8007c42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	461a      	mov	r2, r3
 8007c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c54:	643b      	str	r3, [r7, #64]	; 0x40
 8007c56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c5c:	e841 2300 	strex	r3, r2, [r1]
 8007c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d1e6      	bne.n	8007c36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	3308      	adds	r3, #8
 8007c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c70:	6a3b      	ldr	r3, [r7, #32]
 8007c72:	e853 3f00 	ldrex	r3, [r3]
 8007c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c7e:	f023 0301 	bic.w	r3, r3, #1
 8007c82:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	3308      	adds	r3, #8
 8007c8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c94:	e841 2300 	strex	r3, r2, [r1]
 8007c98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d1e3      	bne.n	8007c68 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d118      	bne.n	8007cda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	e853 3f00 	ldrex	r3, [r3]
 8007cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	f023 0310 	bic.w	r3, r3, #16
 8007cbc:	647b      	str	r3, [r7, #68]	; 0x44
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	461a      	mov	r2, r3
 8007cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cc6:	61bb      	str	r3, [r7, #24]
 8007cc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	6979      	ldr	r1, [r7, #20]
 8007ccc:	69ba      	ldr	r2, [r7, #24]
 8007cce:	e841 2300 	strex	r3, r2, [r1]
 8007cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1e6      	bne.n	8007ca8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007cee:	bf00      	nop
 8007cf0:	3754      	adds	r7, #84	; 0x54
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr

08007cfa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007cfa:	b580      	push	{r7, lr}
 8007cfc:	b084      	sub	sp, #16
 8007cfe:	af00      	add	r7, sp, #0
 8007d00:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d06:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f7ff fac1 	bl	80072a0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d1e:	bf00      	nop
 8007d20:	3710      	adds	r7, #16
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}

08007d26 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b08f      	sub	sp, #60	; 0x3c
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d34:	2b21      	cmp	r3, #33	; 0x21
 8007d36:	d14d      	bne.n	8007dd4 <UART_TxISR_8BIT+0xae>
  {
    if (huart->TxXferCount == 0U)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007d3e:	b29b      	uxth	r3, r3
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d132      	bne.n	8007daa <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6a3b      	ldr	r3, [r7, #32]
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d58:	637b      	str	r3, [r7, #52]	; 0x34
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d64:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d6a:	e841 2300 	strex	r3, r2, [r1]
 8007d6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1e6      	bne.n	8007d44 <UART_TxISR_8BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	e853 3f00 	ldrex	r3, [r3]
 8007d82:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	461a      	mov	r2, r3
 8007d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d94:	61bb      	str	r3, [r7, #24]
 8007d96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d98:	6979      	ldr	r1, [r7, #20]
 8007d9a:	69ba      	ldr	r2, [r7, #24]
 8007d9c:	e841 2300 	strex	r3, r2, [r1]
 8007da0:	613b      	str	r3, [r7, #16]
   return(result);
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d1e6      	bne.n	8007d76 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007da8:	e014      	b.n	8007dd4 <UART_TxISR_8BIT+0xae>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dae:	781a      	ldrb	r2, [r3, #0]
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	b292      	uxth	r2, r2
 8007db6:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007dc8:	b29b      	uxth	r3, r3
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	b29a      	uxth	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007dd4:	bf00      	nop
 8007dd6:	373c      	adds	r7, #60	; 0x3c
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b091      	sub	sp, #68	; 0x44
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dee:	2b21      	cmp	r3, #33	; 0x21
 8007df0:	d151      	bne.n	8007e96 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d132      	bne.n	8007e64 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	e853 3f00 	ldrex	r3, [r3]
 8007e0a:	623b      	str	r3, [r7, #32]
   return(result);
 8007e0c:	6a3b      	ldr	r3, [r7, #32]
 8007e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	461a      	mov	r2, r3
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1c:	633b      	str	r3, [r7, #48]	; 0x30
 8007e1e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e24:	e841 2300 	strex	r3, r2, [r1]
 8007e28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1e6      	bne.n	8007dfe <UART_TxISR_16BIT+0x1e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	e853 3f00 	ldrex	r3, [r3]
 8007e3c:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e4e:	61fb      	str	r3, [r7, #28]
 8007e50:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e52:	69b9      	ldr	r1, [r7, #24]
 8007e54:	69fa      	ldr	r2, [r7, #28]
 8007e56:	e841 2300 	strex	r3, r2, [r1]
 8007e5a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e5c:	697b      	ldr	r3, [r7, #20]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d1e6      	bne.n	8007e30 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007e62:	e018      	b.n	8007e96 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e68:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e6c:	881a      	ldrh	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e76:	b292      	uxth	r2, r2
 8007e78:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e7e:	1c9a      	adds	r2, r3, #2
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	3b01      	subs	r3, #1
 8007e8e:	b29a      	uxth	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 8007e96:	bf00      	nop
 8007e98:	3744      	adds	r7, #68	; 0x44
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b091      	sub	sp, #68	; 0x44
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007eb0:	2b21      	cmp	r3, #33	; 0x21
 8007eb2:	d161      	bne.n	8007f78 <UART_TxISR_8BIT_FIFOEN+0xd6>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007eba:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007ebc:	e058      	b.n	8007f70 <UART_TxISR_8BIT_FIFOEN+0xce>
    {
      if (huart->TxXferCount == 0U)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007ec4:	b29b      	uxth	r3, r3
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d133      	bne.n	8007f32 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3308      	adds	r3, #8
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	623b      	str	r3, [r7, #32]
   return(result);
 8007eda:	6a3b      	ldr	r3, [r7, #32]
 8007edc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007ee0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3308      	adds	r3, #8
 8007ee8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eea:	633a      	str	r2, [r7, #48]	; 0x30
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ef0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ef2:	e841 2300 	strex	r3, r2, [r1]
 8007ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1e5      	bne.n	8007eca <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	e853 3f00 	ldrex	r3, [r3]
 8007f0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1c:	61fb      	str	r3, [r7, #28]
 8007f1e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f20:	69b9      	ldr	r1, [r7, #24]
 8007f22:	69fa      	ldr	r2, [r7, #28]
 8007f24:	e841 2300 	strex	r3, r2, [r1]
 8007f28:	617b      	str	r3, [r7, #20]
   return(result);
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d1e6      	bne.n	8007efe <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8007f30:	e022      	b.n	8007f78 <UART_TxISR_8BIT_FIFOEN+0xd6>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69db      	ldr	r3, [r3, #28]
 8007f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d014      	beq.n	8007f6a <UART_TxISR_8BIT_FIFOEN+0xc8>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f44:	781a      	ldrb	r2, [r3, #0]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	b292      	uxth	r2, r2
 8007f4c:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f52:	1c5a      	adds	r2, r3, #1
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	3b01      	subs	r3, #1
 8007f62:	b29a      	uxth	r2, r3
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007f6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007f6c:	3b01      	subs	r3, #1
 8007f6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f70:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1a3      	bne.n	8007ebe <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8007f76:	e7ff      	b.n	8007f78 <UART_TxISR_8BIT_FIFOEN+0xd6>
 8007f78:	bf00      	nop
 8007f7a:	3744      	adds	r7, #68	; 0x44
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b091      	sub	sp, #68	; 0x44
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f92:	2b21      	cmp	r3, #33	; 0x21
 8007f94:	d165      	bne.n	8008062 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8007f9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007f9e:	e05c      	b.n	800805a <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007fa6:	b29b      	uxth	r3, r3
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d133      	bne.n	8008014 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	3308      	adds	r3, #8
 8007fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb4:	6a3b      	ldr	r3, [r7, #32]
 8007fb6:	e853 3f00 	ldrex	r3, [r3]
 8007fba:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fc2:	637b      	str	r3, [r7, #52]	; 0x34
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	3308      	adds	r3, #8
 8007fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007fcc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd4:	e841 2300 	strex	r3, r2, [r1]
 8007fd8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d1e5      	bne.n	8007fac <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	e853 3f00 	ldrex	r3, [r3]
 8007fec:	60bb      	str	r3, [r7, #8]
   return(result);
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ffe:	61bb      	str	r3, [r7, #24]
 8008000:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008002:	6979      	ldr	r1, [r7, #20]
 8008004:	69ba      	ldr	r2, [r7, #24]
 8008006:	e841 2300 	strex	r3, r2, [r1]
 800800a:	613b      	str	r3, [r7, #16]
   return(result);
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d1e6      	bne.n	8007fe0 <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 8008012:	e026      	b.n	8008062 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800801e:	2b00      	cmp	r3, #0
 8008020:	d018      	beq.n	8008054 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008026:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8008028:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802a:	881a      	ldrh	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008034:	b292      	uxth	r2, r2
 8008036:	851a      	strh	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800803c:	1c9a      	adds	r2, r3, #2
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8008048:	b29b      	uxth	r3, r3
 800804a:	3b01      	subs	r3, #1
 800804c:	b29a      	uxth	r2, r3
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8008054:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8008056:	3b01      	subs	r3, #1
 8008058:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800805a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800805c:	2b00      	cmp	r3, #0
 800805e:	d19f      	bne.n	8007fa0 <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 8008060:	e7ff      	b.n	8008062 <UART_TxISR_16BIT_FIFOEN+0xde>
 8008062:	bf00      	nop
 8008064:	3744      	adds	r7, #68	; 0x44
 8008066:	46bd      	mov	sp, r7
 8008068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806c:	4770      	bx	lr

0800806e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800806e:	b580      	push	{r7, lr}
 8008070:	b088      	sub	sp, #32
 8008072:	af00      	add	r7, sp, #0
 8008074:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	e853 3f00 	ldrex	r3, [r3]
 8008082:	60bb      	str	r3, [r7, #8]
   return(result);
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800808a:	61fb      	str	r3, [r7, #28]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	461a      	mov	r2, r3
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	61bb      	str	r3, [r7, #24]
 8008096:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008098:	6979      	ldr	r1, [r7, #20]
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	e841 2300 	strex	r3, r2, [r1]
 80080a0:	613b      	str	r3, [r7, #16]
   return(result);
 80080a2:	693b      	ldr	r3, [r7, #16]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d1e6      	bne.n	8008076 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2220      	movs	r2, #32
 80080ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f7f9 fcce 	bl	8001a58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80080bc:	bf00      	nop
 80080be:	3720      	adds	r7, #32
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80080e0:	bf00      	nop
 80080e2:	370c      	adds	r7, #12
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr

080080ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr

08008100 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800810e:	2b01      	cmp	r3, #1
 8008110:	d101      	bne.n	8008116 <HAL_UARTEx_DisableFifoMode+0x16>
 8008112:	2302      	movs	r3, #2
 8008114:	e027      	b.n	8008166 <HAL_UARTEx_DisableFifoMode+0x66>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	2201      	movs	r2, #1
 800811a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2224      	movs	r2, #36	; 0x24
 8008122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f022 0201 	bic.w	r2, r2, #1
 800813c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008144:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2200      	movs	r2, #0
 800814a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	68fa      	ldr	r2, [r7, #12]
 8008152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2220      	movs	r2, #32
 8008158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2200      	movs	r2, #0
 8008160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008164:	2300      	movs	r3, #0
}
 8008166:	4618      	mov	r0, r3
 8008168:	3714      	adds	r7, #20
 800816a:	46bd      	mov	sp, r7
 800816c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008170:	4770      	bx	lr

08008172 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008172:	b580      	push	{r7, lr}
 8008174:	b084      	sub	sp, #16
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008182:	2b01      	cmp	r3, #1
 8008184:	d101      	bne.n	800818a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008186:	2302      	movs	r3, #2
 8008188:	e02d      	b.n	80081e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2201      	movs	r2, #1
 800818e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2224      	movs	r2, #36	; 0x24
 8008196:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f022 0201 	bic.w	r2, r2, #1
 80081b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	689b      	ldr	r3, [r3, #8]
 80081b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	683a      	ldr	r2, [r7, #0]
 80081c2:	430a      	orrs	r2, r1
 80081c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 f850 	bl	800826c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	68fa      	ldr	r2, [r7, #12]
 80081d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2220      	movs	r2, #32
 80081d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2200      	movs	r2, #0
 80081e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80081e4:	2300      	movs	r3, #0
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3710      	adds	r7, #16
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b084      	sub	sp, #16
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d101      	bne.n	8008206 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008202:	2302      	movs	r3, #2
 8008204:	e02d      	b.n	8008262 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2224      	movs	r2, #36	; 0x24
 8008212:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681a      	ldr	r2, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	f022 0201 	bic.w	r2, r2, #1
 800822c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	689b      	ldr	r3, [r3, #8]
 8008234:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	683a      	ldr	r2, [r7, #0]
 800823e:	430a      	orrs	r2, r1
 8008240:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f812 	bl	800826c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2220      	movs	r2, #32
 8008254:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
	...

0800826c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008278:	2b00      	cmp	r3, #0
 800827a:	d108      	bne.n	800828e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800828c:	e031      	b.n	80082f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800828e:	2308      	movs	r3, #8
 8008290:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008292:	2308      	movs	r3, #8
 8008294:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	0e5b      	lsrs	r3, r3, #25
 800829e:	b2db      	uxtb	r3, r3
 80082a0:	f003 0307 	and.w	r3, r3, #7
 80082a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	0f5b      	lsrs	r3, r3, #29
 80082ae:	b2db      	uxtb	r3, r3
 80082b0:	f003 0307 	and.w	r3, r3, #7
 80082b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082b6:	7bbb      	ldrb	r3, [r7, #14]
 80082b8:	7b3a      	ldrb	r2, [r7, #12]
 80082ba:	4911      	ldr	r1, [pc, #68]	; (8008300 <UARTEx_SetNbDataToProcess+0x94>)
 80082bc:	5c8a      	ldrb	r2, [r1, r2]
 80082be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80082c2:	7b3a      	ldrb	r2, [r7, #12]
 80082c4:	490f      	ldr	r1, [pc, #60]	; (8008304 <UARTEx_SetNbDataToProcess+0x98>)
 80082c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80082c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	7b7a      	ldrb	r2, [r7, #13]
 80082d8:	4909      	ldr	r1, [pc, #36]	; (8008300 <UARTEx_SetNbDataToProcess+0x94>)
 80082da:	5c8a      	ldrb	r2, [r1, r2]
 80082dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80082e0:	7b7a      	ldrb	r2, [r7, #13]
 80082e2:	4908      	ldr	r1, [pc, #32]	; (8008304 <UARTEx_SetNbDataToProcess+0x98>)
 80082e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80082e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80082ea:	b29a      	uxth	r2, r3
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80082f2:	bf00      	nop
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr
 80082fe:	bf00      	nop
 8008300:	08010a24 	.word	0x08010a24
 8008304:	08010a2c 	.word	0x08010a2c

08008308 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008308:	b084      	sub	sp, #16
 800830a:	b580      	push	{r7, lr}
 800830c:	b084      	sub	sp, #16
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
 8008312:	f107 001c 	add.w	r0, r7, #28
 8008316:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	68db      	ldr	r3, [r3, #12]
 800831e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f001 fa40 	bl	80097ac <USB_CoreReset>
 800832c:	4603      	mov	r3, r0
 800832e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008332:	2b00      	cmp	r3, #0
 8008334:	d106      	bne.n	8008344 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	639a      	str	r2, [r3, #56]	; 0x38
 8008342:	e005      	b.n	8008350 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800835c:	b004      	add	sp, #16
 800835e:	4770      	bx	lr

08008360 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	4613      	mov	r3, r2
 800836c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d165      	bne.n	8008440 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	4a3e      	ldr	r2, [pc, #248]	; (8008470 <USB_SetTurnaroundTime+0x110>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d906      	bls.n	800838a <USB_SetTurnaroundTime+0x2a>
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	4a3d      	ldr	r2, [pc, #244]	; (8008474 <USB_SetTurnaroundTime+0x114>)
 8008380:	4293      	cmp	r3, r2
 8008382:	d202      	bcs.n	800838a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008384:	230f      	movs	r3, #15
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e05c      	b.n	8008444 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800838a:	68bb      	ldr	r3, [r7, #8]
 800838c:	4a39      	ldr	r2, [pc, #228]	; (8008474 <USB_SetTurnaroundTime+0x114>)
 800838e:	4293      	cmp	r3, r2
 8008390:	d306      	bcc.n	80083a0 <USB_SetTurnaroundTime+0x40>
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	4a38      	ldr	r2, [pc, #224]	; (8008478 <USB_SetTurnaroundTime+0x118>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d202      	bcs.n	80083a0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800839a:	230e      	movs	r3, #14
 800839c:	617b      	str	r3, [r7, #20]
 800839e:	e051      	b.n	8008444 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	4a35      	ldr	r2, [pc, #212]	; (8008478 <USB_SetTurnaroundTime+0x118>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d306      	bcc.n	80083b6 <USB_SetTurnaroundTime+0x56>
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	4a34      	ldr	r2, [pc, #208]	; (800847c <USB_SetTurnaroundTime+0x11c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d202      	bcs.n	80083b6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80083b0:	230d      	movs	r3, #13
 80083b2:	617b      	str	r3, [r7, #20]
 80083b4:	e046      	b.n	8008444 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	4a30      	ldr	r2, [pc, #192]	; (800847c <USB_SetTurnaroundTime+0x11c>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d306      	bcc.n	80083cc <USB_SetTurnaroundTime+0x6c>
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	4a2f      	ldr	r2, [pc, #188]	; (8008480 <USB_SetTurnaroundTime+0x120>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d802      	bhi.n	80083cc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083c6:	230c      	movs	r3, #12
 80083c8:	617b      	str	r3, [r7, #20]
 80083ca:	e03b      	b.n	8008444 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	4a2c      	ldr	r2, [pc, #176]	; (8008480 <USB_SetTurnaroundTime+0x120>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d906      	bls.n	80083e2 <USB_SetTurnaroundTime+0x82>
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	4a2b      	ldr	r2, [pc, #172]	; (8008484 <USB_SetTurnaroundTime+0x124>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d802      	bhi.n	80083e2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083dc:	230b      	movs	r3, #11
 80083de:	617b      	str	r3, [r7, #20]
 80083e0:	e030      	b.n	8008444 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	4a27      	ldr	r2, [pc, #156]	; (8008484 <USB_SetTurnaroundTime+0x124>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d906      	bls.n	80083f8 <USB_SetTurnaroundTime+0x98>
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	4a26      	ldr	r2, [pc, #152]	; (8008488 <USB_SetTurnaroundTime+0x128>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d802      	bhi.n	80083f8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083f2:	230a      	movs	r3, #10
 80083f4:	617b      	str	r3, [r7, #20]
 80083f6:	e025      	b.n	8008444 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	4a23      	ldr	r2, [pc, #140]	; (8008488 <USB_SetTurnaroundTime+0x128>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d906      	bls.n	800840e <USB_SetTurnaroundTime+0xae>
 8008400:	68bb      	ldr	r3, [r7, #8]
 8008402:	4a22      	ldr	r2, [pc, #136]	; (800848c <USB_SetTurnaroundTime+0x12c>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d202      	bcs.n	800840e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008408:	2309      	movs	r3, #9
 800840a:	617b      	str	r3, [r7, #20]
 800840c:	e01a      	b.n	8008444 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	4a1e      	ldr	r2, [pc, #120]	; (800848c <USB_SetTurnaroundTime+0x12c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d306      	bcc.n	8008424 <USB_SetTurnaroundTime+0xc4>
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	4a1d      	ldr	r2, [pc, #116]	; (8008490 <USB_SetTurnaroundTime+0x130>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d802      	bhi.n	8008424 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800841e:	2308      	movs	r3, #8
 8008420:	617b      	str	r3, [r7, #20]
 8008422:	e00f      	b.n	8008444 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008424:	68bb      	ldr	r3, [r7, #8]
 8008426:	4a1a      	ldr	r2, [pc, #104]	; (8008490 <USB_SetTurnaroundTime+0x130>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d906      	bls.n	800843a <USB_SetTurnaroundTime+0xda>
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	4a19      	ldr	r2, [pc, #100]	; (8008494 <USB_SetTurnaroundTime+0x134>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d202      	bcs.n	800843a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008434:	2307      	movs	r3, #7
 8008436:	617b      	str	r3, [r7, #20]
 8008438:	e004      	b.n	8008444 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800843a:	2306      	movs	r3, #6
 800843c:	617b      	str	r3, [r7, #20]
 800843e:	e001      	b.n	8008444 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008440:	2309      	movs	r3, #9
 8008442:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	68da      	ldr	r2, [r3, #12]
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	029b      	lsls	r3, r3, #10
 8008458:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800845c:	431a      	orrs	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	371c      	adds	r7, #28
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr
 8008470:	00d8acbf 	.word	0x00d8acbf
 8008474:	00e4e1c0 	.word	0x00e4e1c0
 8008478:	00f42400 	.word	0x00f42400
 800847c:	01067380 	.word	0x01067380
 8008480:	011a499f 	.word	0x011a499f
 8008484:	01312cff 	.word	0x01312cff
 8008488:	014ca43f 	.word	0x014ca43f
 800848c:	016e3600 	.word	0x016e3600
 8008490:	01a6ab1f 	.word	0x01a6ab1f
 8008494:	01e84800 	.word	0x01e84800

08008498 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008498:	b480      	push	{r7}
 800849a:	b083      	sub	sp, #12
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	f043 0201 	orr.w	r2, r3, #1
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	370c      	adds	r7, #12
 80084b2:	46bd      	mov	sp, r7
 80084b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	689b      	ldr	r3, [r3, #8]
 80084c6:	f023 0201 	bic.w	r2, r3, #1
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	460b      	mov	r3, r1
 80084e6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084e8:	2300      	movs	r3, #0
 80084ea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	68db      	ldr	r3, [r3, #12]
 80084f0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084f8:	78fb      	ldrb	r3, [r7, #3]
 80084fa:	2b01      	cmp	r3, #1
 80084fc:	d115      	bne.n	800852a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	68db      	ldr	r3, [r3, #12]
 8008502:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800850a:	2001      	movs	r0, #1
 800850c:	f7fa f9b2 	bl	8002874 <HAL_Delay>
      ms++;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	3301      	adds	r3, #1
 8008514:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008516:	6878      	ldr	r0, [r7, #4]
 8008518:	f001 f8cf 	bl	80096ba <USB_GetMode>
 800851c:	4603      	mov	r3, r0
 800851e:	2b01      	cmp	r3, #1
 8008520:	d01e      	beq.n	8008560 <USB_SetCurrentMode+0x84>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2b31      	cmp	r3, #49	; 0x31
 8008526:	d9f0      	bls.n	800850a <USB_SetCurrentMode+0x2e>
 8008528:	e01a      	b.n	8008560 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800852a:	78fb      	ldrb	r3, [r7, #3]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d115      	bne.n	800855c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800853c:	2001      	movs	r0, #1
 800853e:	f7fa f999 	bl	8002874 <HAL_Delay>
      ms++;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3301      	adds	r3, #1
 8008546:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f001 f8b6 	bl	80096ba <USB_GetMode>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d005      	beq.n	8008560 <USB_SetCurrentMode+0x84>
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	2b31      	cmp	r3, #49	; 0x31
 8008558:	d9f0      	bls.n	800853c <USB_SetCurrentMode+0x60>
 800855a:	e001      	b.n	8008560 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e005      	b.n	800856c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2b32      	cmp	r3, #50	; 0x32
 8008564:	d101      	bne.n	800856a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008566:	2301      	movs	r3, #1
 8008568:	e000      	b.n	800856c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800856a:	2300      	movs	r3, #0
}
 800856c:	4618      	mov	r0, r3
 800856e:	3710      	adds	r7, #16
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008574:	b084      	sub	sp, #16
 8008576:	b580      	push	{r7, lr}
 8008578:	b086      	sub	sp, #24
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800858e:	2300      	movs	r3, #0
 8008590:	613b      	str	r3, [r7, #16]
 8008592:	e009      	b.n	80085a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008594:	687a      	ldr	r2, [r7, #4]
 8008596:	693b      	ldr	r3, [r7, #16]
 8008598:	3340      	adds	r3, #64	; 0x40
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	4413      	add	r3, r2
 800859e:	2200      	movs	r2, #0
 80085a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	3301      	adds	r3, #1
 80085a6:	613b      	str	r3, [r7, #16]
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2b0e      	cmp	r3, #14
 80085ac:	d9f2      	bls.n	8008594 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80085ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d11c      	bne.n	80085ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c2:	f043 0302 	orr.w	r3, r3, #2
 80085c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	e005      	b.n	80085fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008600:	461a      	mov	r2, r3
 8008602:	2300      	movs	r3, #0
 8008604:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800860c:	4619      	mov	r1, r3
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008614:	461a      	mov	r2, r3
 8008616:	680b      	ldr	r3, [r1, #0]
 8008618:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800861a:	2103      	movs	r1, #3
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f955 	bl	80088cc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008622:	2110      	movs	r1, #16
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f8f1 	bl	800880c <USB_FlushTxFifo>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f91b 	bl	8008870 <USB_FlushRxFifo>
 800863a:	4603      	mov	r3, r0
 800863c:	2b00      	cmp	r3, #0
 800863e:	d001      	beq.n	8008644 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8008640:	2301      	movs	r3, #1
 8008642:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864a:	461a      	mov	r2, r3
 800864c:	2300      	movs	r3, #0
 800864e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008656:	461a      	mov	r2, r3
 8008658:	2300      	movs	r3, #0
 800865a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008662:	461a      	mov	r2, r3
 8008664:	2300      	movs	r3, #0
 8008666:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]
 800866c:	e043      	b.n	80086f6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	015a      	lsls	r2, r3, #5
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4413      	add	r3, r2
 8008676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008680:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008684:	d118      	bne.n	80086b8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	015a      	lsls	r2, r3, #5
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4413      	add	r3, r2
 8008694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008698:	461a      	mov	r2, r3
 800869a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	e013      	b.n	80086ca <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	015a      	lsls	r2, r3, #5
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	4413      	add	r3, r2
 80086aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ae:	461a      	mov	r2, r3
 80086b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80086b4:	6013      	str	r3, [r2, #0]
 80086b6:	e008      	b.n	80086ca <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086b8:	693b      	ldr	r3, [r7, #16]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086c4:	461a      	mov	r2, r3
 80086c6:	2300      	movs	r3, #0
 80086c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086ca:	693b      	ldr	r3, [r7, #16]
 80086cc:	015a      	lsls	r2, r3, #5
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	4413      	add	r3, r2
 80086d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d6:	461a      	mov	r2, r3
 80086d8:	2300      	movs	r3, #0
 80086da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	015a      	lsls	r2, r3, #5
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	4413      	add	r3, r2
 80086e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086e8:	461a      	mov	r2, r3
 80086ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80086ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	3301      	adds	r3, #1
 80086f4:	613b      	str	r3, [r7, #16]
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	693a      	ldr	r2, [r7, #16]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d3b7      	bcc.n	800866e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086fe:	2300      	movs	r3, #0
 8008700:	613b      	str	r3, [r7, #16]
 8008702:	e043      	b.n	800878c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	015a      	lsls	r2, r3, #5
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4413      	add	r3, r2
 800870c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800871a:	d118      	bne.n	800874e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10a      	bne.n	8008738 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	4413      	add	r3, r2
 800872a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800872e:	461a      	mov	r2, r3
 8008730:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008734:	6013      	str	r3, [r2, #0]
 8008736:	e013      	b.n	8008760 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008738:	693b      	ldr	r3, [r7, #16]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	4413      	add	r3, r2
 8008740:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008744:	461a      	mov	r2, r3
 8008746:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800874a:	6013      	str	r3, [r2, #0]
 800874c:	e008      	b.n	8008760 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	015a      	lsls	r2, r3, #5
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	4413      	add	r3, r2
 8008756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800875a:	461a      	mov	r2, r3
 800875c:	2300      	movs	r3, #0
 800875e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008760:	693b      	ldr	r3, [r7, #16]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876c:	461a      	mov	r2, r3
 800876e:	2300      	movs	r3, #0
 8008770:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	015a      	lsls	r2, r3, #5
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	4413      	add	r3, r2
 800877a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800877e:	461a      	mov	r2, r3
 8008780:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008784:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008786:	693b      	ldr	r3, [r7, #16]
 8008788:	3301      	adds	r3, #1
 800878a:	613b      	str	r3, [r7, #16]
 800878c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800878e:	693a      	ldr	r2, [r7, #16]
 8008790:	429a      	cmp	r2, r3
 8008792:	d3b7      	bcc.n	8008704 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	68fa      	ldr	r2, [r7, #12]
 800879e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80087a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80087a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2200      	movs	r2, #0
 80087ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80087b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	699b      	ldr	r3, [r3, #24]
 80087ba:	f043 0210 	orr.w	r2, r3, #16
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	699a      	ldr	r2, [r3, #24]
 80087c6:	4b10      	ldr	r3, [pc, #64]	; (8008808 <USB_DevInit+0x294>)
 80087c8:	4313      	orrs	r3, r2
 80087ca:	687a      	ldr	r2, [r7, #4]
 80087cc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d005      	beq.n	80087e0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	699b      	ldr	r3, [r3, #24]
 80087d8:	f043 0208 	orr.w	r2, r3, #8
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	d107      	bne.n	80087f6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	699b      	ldr	r3, [r3, #24]
 80087ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80087ee:	f043 0304 	orr.w	r3, r3, #4
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80087f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008802:	b004      	add	sp, #16
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	803c3800 	.word	0x803c3800

0800880c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3301      	adds	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
 8008820:	4a12      	ldr	r2, [pc, #72]	; (800886c <USB_FlushTxFifo+0x60>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d901      	bls.n	800882a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e01a      	b.n	8008860 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	daf3      	bge.n	800881a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	019b      	lsls	r3, r3, #6
 800883a:	f043 0220 	orr.w	r2, r3, #32
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	3301      	adds	r3, #1
 8008846:	60fb      	str	r3, [r7, #12]
 8008848:	4a08      	ldr	r2, [pc, #32]	; (800886c <USB_FlushTxFifo+0x60>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d901      	bls.n	8008852 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800884e:	2303      	movs	r3, #3
 8008850:	e006      	b.n	8008860 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	691b      	ldr	r3, [r3, #16]
 8008856:	f003 0320 	and.w	r3, r3, #32
 800885a:	2b20      	cmp	r3, #32
 800885c:	d0f1      	beq.n	8008842 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800885e:	2300      	movs	r3, #0
}
 8008860:	4618      	mov	r0, r3
 8008862:	3714      	adds	r7, #20
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	00030d40 	.word	0x00030d40

08008870 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008870:	b480      	push	{r7}
 8008872:	b085      	sub	sp, #20
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008878:	2300      	movs	r3, #0
 800887a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	3301      	adds	r3, #1
 8008880:	60fb      	str	r3, [r7, #12]
 8008882:	4a11      	ldr	r2, [pc, #68]	; (80088c8 <USB_FlushRxFifo+0x58>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d901      	bls.n	800888c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8008888:	2303      	movs	r3, #3
 800888a:	e017      	b.n	80088bc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	691b      	ldr	r3, [r3, #16]
 8008890:	2b00      	cmp	r3, #0
 8008892:	daf3      	bge.n	800887c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2210      	movs	r2, #16
 800889c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	3301      	adds	r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	4a08      	ldr	r2, [pc, #32]	; (80088c8 <USB_FlushRxFifo+0x58>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d901      	bls.n	80088ae <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e006      	b.n	80088bc <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	691b      	ldr	r3, [r3, #16]
 80088b2:	f003 0310 	and.w	r3, r3, #16
 80088b6:	2b10      	cmp	r3, #16
 80088b8:	d0f1      	beq.n	800889e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 80088ba:	2300      	movs	r3, #0
}
 80088bc:	4618      	mov	r0, r3
 80088be:	3714      	adds	r7, #20
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr
 80088c8:	00030d40 	.word	0x00030d40

080088cc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b085      	sub	sp, #20
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088e2:	681a      	ldr	r2, [r3, #0]
 80088e4:	78fb      	ldrb	r3, [r7, #3]
 80088e6:	68f9      	ldr	r1, [r7, #12]
 80088e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088ec:	4313      	orrs	r3, r2
 80088ee:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80088fe:	b480      	push	{r7}
 8008900:	b087      	sub	sp, #28
 8008902:	af00      	add	r7, sp, #0
 8008904:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008910:	689b      	ldr	r3, [r3, #8]
 8008912:	f003 0306 	and.w	r3, r3, #6
 8008916:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2b02      	cmp	r3, #2
 800891c:	d002      	beq.n	8008924 <USB_GetDevSpeed+0x26>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	2b06      	cmp	r3, #6
 8008922:	d102      	bne.n	800892a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008924:	2302      	movs	r3, #2
 8008926:	75fb      	strb	r3, [r7, #23]
 8008928:	e001      	b.n	800892e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800892a:	230f      	movs	r3, #15
 800892c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800892e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008930:	4618      	mov	r0, r3
 8008932:	371c      	adds	r7, #28
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr

0800893c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	781b      	ldrb	r3, [r3, #0]
 800894e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	785b      	ldrb	r3, [r3, #1]
 8008954:	2b01      	cmp	r3, #1
 8008956:	d13a      	bne.n	80089ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800895e:	69da      	ldr	r2, [r3, #28]
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	781b      	ldrb	r3, [r3, #0]
 8008964:	f003 030f 	and.w	r3, r3, #15
 8008968:	2101      	movs	r1, #1
 800896a:	fa01 f303 	lsl.w	r3, r1, r3
 800896e:	b29b      	uxth	r3, r3
 8008970:	68f9      	ldr	r1, [r7, #12]
 8008972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008976:	4313      	orrs	r3, r2
 8008978:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	015a      	lsls	r2, r3, #5
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4413      	add	r3, r2
 8008982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800898c:	2b00      	cmp	r3, #0
 800898e:	d155      	bne.n	8008a3c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	015a      	lsls	r2, r3, #5
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	4413      	add	r3, r2
 8008998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089a6:	683b      	ldr	r3, [r7, #0]
 80089a8:	78db      	ldrb	r3, [r3, #3]
 80089aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	059b      	lsls	r3, r3, #22
 80089b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089b4:	4313      	orrs	r3, r2
 80089b6:	68ba      	ldr	r2, [r7, #8]
 80089b8:	0151      	lsls	r1, r2, #5
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	440a      	add	r2, r1
 80089be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	e036      	b.n	8008a3c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089d4:	69da      	ldr	r2, [r3, #28]
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	f003 030f 	and.w	r3, r3, #15
 80089de:	2101      	movs	r1, #1
 80089e0:	fa01 f303 	lsl.w	r3, r1, r3
 80089e4:	041b      	lsls	r3, r3, #16
 80089e6:	68f9      	ldr	r1, [r7, #12]
 80089e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089ec:	4313      	orrs	r3, r2
 80089ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80089f0:	68bb      	ldr	r3, [r7, #8]
 80089f2:	015a      	lsls	r2, r3, #5
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	4413      	add	r3, r2
 80089f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d11a      	bne.n	8008a3c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a12:	681a      	ldr	r2, [r3, #0]
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a1c:	683b      	ldr	r3, [r7, #0]
 8008a1e:	78db      	ldrb	r3, [r3, #3]
 8008a20:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a22:	430b      	orrs	r3, r1
 8008a24:	4313      	orrs	r3, r2
 8008a26:	68ba      	ldr	r2, [r7, #8]
 8008a28:	0151      	lsls	r1, r2, #5
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	440a      	add	r2, r1
 8008a2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008a3a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr
	...

08008a4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	785b      	ldrb	r3, [r3, #1]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d161      	bne.n	8008b2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a7e:	d11f      	bne.n	8008ac0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	68fa      	ldr	r2, [r7, #12]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008a9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	015a      	lsls	r2, r3, #5
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4413      	add	r3, r2
 8008aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	68ba      	ldr	r2, [r7, #8]
 8008ab0:	0151      	lsls	r1, r2, #5
 8008ab2:	68fa      	ldr	r2, [r7, #12]
 8008ab4:	440a      	add	r2, r1
 8008ab6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008abe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	781b      	ldrb	r3, [r3, #0]
 8008acc:	f003 030f 	and.w	r3, r3, #15
 8008ad0:	2101      	movs	r1, #1
 8008ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8008ad6:	b29b      	uxth	r3, r3
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	68f9      	ldr	r1, [r7, #12]
 8008adc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ae0:	4013      	ands	r3, r2
 8008ae2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008aea:	69da      	ldr	r2, [r3, #28]
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	f003 030f 	and.w	r3, r3, #15
 8008af4:	2101      	movs	r1, #1
 8008af6:	fa01 f303 	lsl.w	r3, r1, r3
 8008afa:	b29b      	uxth	r3, r3
 8008afc:	43db      	mvns	r3, r3
 8008afe:	68f9      	ldr	r1, [r7, #12]
 8008b00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008b04:	4013      	ands	r3, r2
 8008b06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b08:	68bb      	ldr	r3, [r7, #8]
 8008b0a:	015a      	lsls	r2, r3, #5
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	4413      	add	r3, r2
 8008b10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	0159      	lsls	r1, r3, #5
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	440b      	add	r3, r1
 8008b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b22:	4619      	mov	r1, r3
 8008b24:	4b35      	ldr	r3, [pc, #212]	; (8008bfc <USB_DeactivateEndpoint+0x1b0>)
 8008b26:	4013      	ands	r3, r2
 8008b28:	600b      	str	r3, [r1, #0]
 8008b2a:	e060      	b.n	8008bee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b42:	d11f      	bne.n	8008b84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	015a      	lsls	r2, r3, #5
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4413      	add	r3, r2
 8008b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	68ba      	ldr	r2, [r7, #8]
 8008b54:	0151      	lsls	r1, r2, #5
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	440a      	add	r2, r1
 8008b5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008b62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	015a      	lsls	r2, r3, #5
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	0151      	lsls	r1, r2, #5
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	440a      	add	r2, r1
 8008b7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	781b      	ldrb	r3, [r3, #0]
 8008b90:	f003 030f 	and.w	r3, r3, #15
 8008b94:	2101      	movs	r1, #1
 8008b96:	fa01 f303 	lsl.w	r3, r1, r3
 8008b9a:	041b      	lsls	r3, r3, #16
 8008b9c:	43db      	mvns	r3, r3
 8008b9e:	68f9      	ldr	r1, [r7, #12]
 8008ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	69da      	ldr	r2, [r3, #28]
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	2101      	movs	r1, #1
 8008bba:	fa01 f303 	lsl.w	r3, r1, r3
 8008bbe:	041b      	lsls	r3, r3, #16
 8008bc0:	43db      	mvns	r3, r3
 8008bc2:	68f9      	ldr	r1, [r7, #12]
 8008bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bc8:	4013      	ands	r3, r2
 8008bca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bd8:	681a      	ldr	r2, [r3, #0]
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	0159      	lsls	r1, r3, #5
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	440b      	add	r3, r1
 8008be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008be6:	4619      	mov	r1, r3
 8008be8:	4b05      	ldr	r3, [pc, #20]	; (8008c00 <USB_DeactivateEndpoint+0x1b4>)
 8008bea:	4013      	ands	r3, r2
 8008bec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	ec337800 	.word	0xec337800
 8008c00:	eff37800 	.word	0xeff37800

08008c04 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b086      	sub	sp, #24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
 8008c0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	785b      	ldrb	r3, [r3, #1]
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	f040 810a 	bne.w	8008e36 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	695b      	ldr	r3, [r3, #20]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d132      	bne.n	8008c90 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	015a      	lsls	r2, r3, #5
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	4413      	add	r3, r2
 8008c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c36:	691b      	ldr	r3, [r3, #16]
 8008c38:	693a      	ldr	r2, [r7, #16]
 8008c3a:	0151      	lsls	r1, r2, #5
 8008c3c:	697a      	ldr	r2, [r7, #20]
 8008c3e:	440a      	add	r2, r1
 8008c40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	0151      	lsls	r1, r2, #5
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	440a      	add	r2, r1
 8008c64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c68:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	0151      	lsls	r1, r2, #5
 8008c80:	697a      	ldr	r2, [r7, #20]
 8008c82:	440a      	add	r2, r1
 8008c84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c88:	0cdb      	lsrs	r3, r3, #19
 8008c8a:	04db      	lsls	r3, r3, #19
 8008c8c:	6113      	str	r3, [r2, #16]
 8008c8e:	e074      	b.n	8008d7a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008caa:	0cdb      	lsrs	r3, r3, #19
 8008cac:	04db      	lsls	r3, r3, #19
 8008cae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	015a      	lsls	r2, r3, #5
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	4413      	add	r3, r2
 8008cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	693a      	ldr	r2, [r7, #16]
 8008cc0:	0151      	lsls	r1, r2, #5
 8008cc2:	697a      	ldr	r2, [r7, #20]
 8008cc4:	440a      	add	r2, r1
 8008cc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008cce:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008cd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	015a      	lsls	r2, r3, #5
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	4413      	add	r3, r2
 8008cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ce0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	6959      	ldr	r1, [r3, #20]
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	689b      	ldr	r3, [r3, #8]
 8008cea:	440b      	add	r3, r1
 8008cec:	1e59      	subs	r1, r3, #1
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	fbb1 f3f3 	udiv	r3, r1, r3
 8008cf6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008cf8:	4baf      	ldr	r3, [pc, #700]	; (8008fb8 <USB_EPStartXfer+0x3b4>)
 8008cfa:	400b      	ands	r3, r1
 8008cfc:	6939      	ldr	r1, [r7, #16]
 8008cfe:	0148      	lsls	r0, r1, #5
 8008d00:	6979      	ldr	r1, [r7, #20]
 8008d02:	4401      	add	r1, r0
 8008d04:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d08:	4313      	orrs	r3, r2
 8008d0a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d18:	691a      	ldr	r2, [r3, #16]
 8008d1a:	683b      	ldr	r3, [r7, #0]
 8008d1c:	695b      	ldr	r3, [r3, #20]
 8008d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d22:	6939      	ldr	r1, [r7, #16]
 8008d24:	0148      	lsls	r0, r1, #5
 8008d26:	6979      	ldr	r1, [r7, #20]
 8008d28:	4401      	add	r1, r0
 8008d2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	78db      	ldrb	r3, [r3, #3]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d11f      	bne.n	8008d7a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	015a      	lsls	r2, r3, #5
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	4413      	add	r3, r2
 8008d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d46:	691b      	ldr	r3, [r3, #16]
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	0151      	lsls	r1, r2, #5
 8008d4c:	697a      	ldr	r2, [r7, #20]
 8008d4e:	440a      	add	r2, r1
 8008d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d54:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008d58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	693a      	ldr	r2, [r7, #16]
 8008d6a:	0151      	lsls	r1, r2, #5
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	440a      	add	r2, r1
 8008d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008d78:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	693a      	ldr	r2, [r7, #16]
 8008d8a:	0151      	lsls	r1, r2, #5
 8008d8c:	697a      	ldr	r2, [r7, #20]
 8008d8e:	440a      	add	r2, r1
 8008d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008d94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008d98:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8008d9a:	683b      	ldr	r3, [r7, #0]
 8008d9c:	78db      	ldrb	r3, [r3, #3]
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d015      	beq.n	8008dce <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	695b      	ldr	r3, [r3, #20]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	f000 8100 	beq.w	8008fac <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008db2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	f003 030f 	and.w	r3, r3, #15
 8008dbc:	2101      	movs	r1, #1
 8008dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008dc2:	6979      	ldr	r1, [r7, #20]
 8008dc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008dc8:	4313      	orrs	r3, r2
 8008dca:	634b      	str	r3, [r1, #52]	; 0x34
 8008dcc:	e0ee      	b.n	8008fac <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d110      	bne.n	8008e00 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	693a      	ldr	r2, [r7, #16]
 8008dee:	0151      	lsls	r1, r2, #5
 8008df0:	697a      	ldr	r2, [r7, #20]
 8008df2:	440a      	add	r2, r1
 8008df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008df8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008dfc:	6013      	str	r3, [r2, #0]
 8008dfe:	e00f      	b.n	8008e20 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	015a      	lsls	r2, r3, #5
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	4413      	add	r3, r2
 8008e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	693a      	ldr	r2, [r7, #16]
 8008e10:	0151      	lsls	r1, r2, #5
 8008e12:	697a      	ldr	r2, [r7, #20]
 8008e14:	440a      	add	r2, r1
 8008e16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e1e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	68d9      	ldr	r1, [r3, #12]
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	781a      	ldrb	r2, [r3, #0]
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	695b      	ldr	r3, [r3, #20]
 8008e2c:	b29b      	uxth	r3, r3
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 f9e2 	bl	80091f8 <USB_WritePacket>
 8008e34:	e0ba      	b.n	8008fac <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	015a      	lsls	r2, r3, #5
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	4413      	add	r3, r2
 8008e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e42:	691b      	ldr	r3, [r3, #16]
 8008e44:	693a      	ldr	r2, [r7, #16]
 8008e46:	0151      	lsls	r1, r2, #5
 8008e48:	697a      	ldr	r2, [r7, #20]
 8008e4a:	440a      	add	r2, r1
 8008e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e50:	0cdb      	lsrs	r3, r3, #19
 8008e52:	04db      	lsls	r3, r3, #19
 8008e54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	015a      	lsls	r2, r3, #5
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	0151      	lsls	r1, r2, #5
 8008e68:	697a      	ldr	r2, [r7, #20]
 8008e6a:	440a      	add	r2, r1
 8008e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e70:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e74:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e78:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d123      	bne.n	8008eca <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	015a      	lsls	r2, r3, #5
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	4413      	add	r3, r2
 8008e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e8e:	691a      	ldr	r2, [r3, #16]
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e98:	6939      	ldr	r1, [r7, #16]
 8008e9a:	0148      	lsls	r0, r1, #5
 8008e9c:	6979      	ldr	r1, [r7, #20]
 8008e9e:	4401      	add	r1, r0
 8008ea0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	015a      	lsls	r2, r3, #5
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	4413      	add	r3, r2
 8008eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	0151      	lsls	r1, r2, #5
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	440a      	add	r2, r1
 8008ebe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ec2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ec6:	6113      	str	r3, [r2, #16]
 8008ec8:	e033      	b.n	8008f32 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	695a      	ldr	r2, [r3, #20]
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	689b      	ldr	r3, [r3, #8]
 8008ed2:	4413      	add	r3, r2
 8008ed4:	1e5a      	subs	r2, r3, #1
 8008ed6:	683b      	ldr	r3, [r7, #0]
 8008ed8:	689b      	ldr	r3, [r3, #8]
 8008eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ede:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008eec:	691a      	ldr	r2, [r3, #16]
 8008eee:	89fb      	ldrh	r3, [r7, #14]
 8008ef0:	04d9      	lsls	r1, r3, #19
 8008ef2:	4b31      	ldr	r3, [pc, #196]	; (8008fb8 <USB_EPStartXfer+0x3b4>)
 8008ef4:	400b      	ands	r3, r1
 8008ef6:	6939      	ldr	r1, [r7, #16]
 8008ef8:	0148      	lsls	r0, r1, #5
 8008efa:	6979      	ldr	r1, [r7, #20]
 8008efc:	4401      	add	r1, r0
 8008efe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f02:	4313      	orrs	r3, r2
 8008f04:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f12:	691a      	ldr	r2, [r3, #16]
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	89f9      	ldrh	r1, [r7, #14]
 8008f1a:	fb01 f303 	mul.w	r3, r1, r3
 8008f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f22:	6939      	ldr	r1, [r7, #16]
 8008f24:	0148      	lsls	r0, r1, #5
 8008f26:	6979      	ldr	r1, [r7, #20]
 8008f28:	4401      	add	r1, r0
 8008f2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	78db      	ldrb	r3, [r3, #3]
 8008f36:	2b01      	cmp	r3, #1
 8008f38:	d128      	bne.n	8008f8c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d110      	bne.n	8008f6c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	693a      	ldr	r2, [r7, #16]
 8008f5a:	0151      	lsls	r1, r2, #5
 8008f5c:	697a      	ldr	r2, [r7, #20]
 8008f5e:	440a      	add	r2, r1
 8008f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f64:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008f68:	6013      	str	r3, [r2, #0]
 8008f6a:	e00f      	b.n	8008f8c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	693a      	ldr	r2, [r7, #16]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	697a      	ldr	r2, [r7, #20]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f8a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	015a      	lsls	r2, r3, #5
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	4413      	add	r3, r2
 8008f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	693a      	ldr	r2, [r7, #16]
 8008f9c:	0151      	lsls	r1, r2, #5
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	440a      	add	r2, r1
 8008fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fa6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008faa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008fac:	2300      	movs	r3, #0
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
 8008fb6:	bf00      	nop
 8008fb8:	1ff80000 	.word	0x1ff80000

08008fbc <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b085      	sub	sp, #20
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	785b      	ldrb	r3, [r3, #1]
 8008fd4:	2b01      	cmp	r3, #1
 8008fd6:	f040 80ab 	bne.w	8009130 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d132      	bne.n	8009048 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	68ba      	ldr	r2, [r7, #8]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	68fa      	ldr	r2, [r7, #12]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ffc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009000:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	015a      	lsls	r2, r3, #5
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	4413      	add	r3, r2
 800900e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	68ba      	ldr	r2, [r7, #8]
 8009016:	0151      	lsls	r1, r2, #5
 8009018:	68fa      	ldr	r2, [r7, #12]
 800901a:	440a      	add	r2, r1
 800901c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009020:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009024:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009032:	691b      	ldr	r3, [r3, #16]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	0151      	lsls	r1, r2, #5
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	440a      	add	r2, r1
 800903c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009040:	0cdb      	lsrs	r3, r3, #19
 8009042:	04db      	lsls	r3, r3, #19
 8009044:	6113      	str	r3, [r2, #16]
 8009046:	e04e      	b.n	80090e6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	68ba      	ldr	r2, [r7, #8]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	68fa      	ldr	r2, [r7, #12]
 800905c:	440a      	add	r2, r1
 800905e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009062:	0cdb      	lsrs	r3, r3, #19
 8009064:	04db      	lsls	r3, r3, #19
 8009066:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	0151      	lsls	r1, r2, #5
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	440a      	add	r2, r1
 800907e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009082:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009086:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800908a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	695a      	ldr	r2, [r3, #20]
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	429a      	cmp	r2, r3
 8009096:	d903      	bls.n	80090a0 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8009098:	683b      	ldr	r3, [r7, #0]
 800909a:	689a      	ldr	r2, [r3, #8]
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80090a0:	68bb      	ldr	r3, [r7, #8]
 80090a2:	015a      	lsls	r2, r3, #5
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4413      	add	r3, r2
 80090a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	0151      	lsls	r1, r2, #5
 80090b2:	68fa      	ldr	r2, [r7, #12]
 80090b4:	440a      	add	r2, r1
 80090b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090ba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	015a      	lsls	r2, r3, #5
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	4413      	add	r3, r2
 80090c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090cc:	691a      	ldr	r2, [r3, #16]
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	695b      	ldr	r3, [r3, #20]
 80090d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090d6:	68b9      	ldr	r1, [r7, #8]
 80090d8:	0148      	lsls	r0, r1, #5
 80090da:	68f9      	ldr	r1, [r7, #12]
 80090dc:	4401      	add	r1, r0
 80090de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80090e2:	4313      	orrs	r3, r2
 80090e4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	68ba      	ldr	r2, [r7, #8]
 80090f6:	0151      	lsls	r1, r2, #5
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	440a      	add	r2, r1
 80090fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009100:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009104:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d06d      	beq.n	80091ea <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009116:	683b      	ldr	r3, [r7, #0]
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	f003 030f 	and.w	r3, r3, #15
 800911e:	2101      	movs	r1, #1
 8009120:	fa01 f303 	lsl.w	r3, r1, r3
 8009124:	68f9      	ldr	r1, [r7, #12]
 8009126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800912a:	4313      	orrs	r3, r2
 800912c:	634b      	str	r3, [r1, #52]	; 0x34
 800912e:	e05c      	b.n	80091ea <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4413      	add	r3, r2
 8009138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	440a      	add	r2, r1
 8009146:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800914a:	0cdb      	lsrs	r3, r3, #19
 800914c:	04db      	lsls	r3, r3, #19
 800914e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	68ba      	ldr	r2, [r7, #8]
 8009160:	0151      	lsls	r1, r2, #5
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	440a      	add	r2, r1
 8009166:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800916a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800916e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009172:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d003      	beq.n	8009184 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	683b      	ldr	r3, [r7, #0]
 8009182:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009190:	691b      	ldr	r3, [r3, #16]
 8009192:	68ba      	ldr	r2, [r7, #8]
 8009194:	0151      	lsls	r1, r2, #5
 8009196:	68fa      	ldr	r2, [r7, #12]
 8009198:	440a      	add	r2, r1
 800919a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800919e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80091a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b0:	691a      	ldr	r2, [r3, #16]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	689b      	ldr	r3, [r3, #8]
 80091b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80091ba:	68b9      	ldr	r1, [r7, #8]
 80091bc:	0148      	lsls	r0, r1, #5
 80091be:	68f9      	ldr	r1, [r7, #12]
 80091c0:	4401      	add	r1, r0
 80091c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80091c6:	4313      	orrs	r3, r2
 80091c8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	015a      	lsls	r2, r3, #5
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	4413      	add	r3, r2
 80091d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	68ba      	ldr	r2, [r7, #8]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	68fa      	ldr	r2, [r7, #12]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091e4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80091e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80091ea:	2300      	movs	r3, #0
}
 80091ec:	4618      	mov	r0, r3
 80091ee:	3714      	adds	r7, #20
 80091f0:	46bd      	mov	sp, r7
 80091f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f6:	4770      	bx	lr

080091f8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b089      	sub	sp, #36	; 0x24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	60f8      	str	r0, [r7, #12]
 8009200:	60b9      	str	r1, [r7, #8]
 8009202:	4611      	mov	r1, r2
 8009204:	461a      	mov	r2, r3
 8009206:	460b      	mov	r3, r1
 8009208:	71fb      	strb	r3, [r7, #7]
 800920a:	4613      	mov	r3, r2
 800920c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8009216:	88bb      	ldrh	r3, [r7, #4]
 8009218:	3303      	adds	r3, #3
 800921a:	089b      	lsrs	r3, r3, #2
 800921c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800921e:	2300      	movs	r3, #0
 8009220:	61bb      	str	r3, [r7, #24]
 8009222:	e018      	b.n	8009256 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	031a      	lsls	r2, r3, #12
 8009228:	697b      	ldr	r3, [r7, #20]
 800922a:	4413      	add	r3, r2
 800922c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009230:	461a      	mov	r2, r3
 8009232:	69fb      	ldr	r3, [r7, #28]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	6013      	str	r3, [r2, #0]
    pSrc++;
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	3301      	adds	r3, #1
 800923c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	3301      	adds	r3, #1
 8009242:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8009244:	69fb      	ldr	r3, [r7, #28]
 8009246:	3301      	adds	r3, #1
 8009248:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	3301      	adds	r3, #1
 800924e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	3301      	adds	r3, #1
 8009254:	61bb      	str	r3, [r7, #24]
 8009256:	69ba      	ldr	r2, [r7, #24]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	429a      	cmp	r2, r3
 800925c:	d3e2      	bcc.n	8009224 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800925e:	2300      	movs	r3, #0
}
 8009260:	4618      	mov	r0, r3
 8009262:	3724      	adds	r7, #36	; 0x24
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800926c:	b480      	push	{r7}
 800926e:	b08b      	sub	sp, #44	; 0x2c
 8009270:	af00      	add	r7, sp, #0
 8009272:	60f8      	str	r0, [r7, #12]
 8009274:	60b9      	str	r1, [r7, #8]
 8009276:	4613      	mov	r3, r2
 8009278:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800927e:	68bb      	ldr	r3, [r7, #8]
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009282:	88fb      	ldrh	r3, [r7, #6]
 8009284:	089b      	lsrs	r3, r3, #2
 8009286:	b29b      	uxth	r3, r3
 8009288:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800928a:	88fb      	ldrh	r3, [r7, #6]
 800928c:	f003 0303 	and.w	r3, r3, #3
 8009290:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009292:	2300      	movs	r3, #0
 8009294:	623b      	str	r3, [r7, #32]
 8009296:	e014      	b.n	80092c2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009298:	69bb      	ldr	r3, [r7, #24]
 800929a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800929e:	681a      	ldr	r2, [r3, #0]
 80092a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80092a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092a6:	3301      	adds	r3, #1
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ac:	3301      	adds	r3, #1
 80092ae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b2:	3301      	adds	r3, #1
 80092b4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b8:	3301      	adds	r3, #1
 80092ba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80092bc:	6a3b      	ldr	r3, [r7, #32]
 80092be:	3301      	adds	r3, #1
 80092c0:	623b      	str	r3, [r7, #32]
 80092c2:	6a3a      	ldr	r2, [r7, #32]
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d3e6      	bcc.n	8009298 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80092ca:	8bfb      	ldrh	r3, [r7, #30]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d01e      	beq.n	800930e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80092d0:	2300      	movs	r3, #0
 80092d2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80092d4:	69bb      	ldr	r3, [r7, #24]
 80092d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092da:	461a      	mov	r2, r3
 80092dc:	f107 0310 	add.w	r3, r7, #16
 80092e0:	6812      	ldr	r2, [r2, #0]
 80092e2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	00db      	lsls	r3, r3, #3
 80092ec:	fa22 f303 	lsr.w	r3, r2, r3
 80092f0:	b2da      	uxtb	r2, r3
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	701a      	strb	r2, [r3, #0]
      i++;
 80092f6:	6a3b      	ldr	r3, [r7, #32]
 80092f8:	3301      	adds	r3, #1
 80092fa:	623b      	str	r3, [r7, #32]
      pDest++;
 80092fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fe:	3301      	adds	r3, #1
 8009300:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009302:	8bfb      	ldrh	r3, [r7, #30]
 8009304:	3b01      	subs	r3, #1
 8009306:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009308:	8bfb      	ldrh	r3, [r7, #30]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1ea      	bne.n	80092e4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009310:	4618      	mov	r0, r3
 8009312:	372c      	adds	r7, #44	; 0x2c
 8009314:	46bd      	mov	sp, r7
 8009316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800931a:	4770      	bx	lr

0800931c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800931c:	b480      	push	{r7}
 800931e:	b085      	sub	sp, #20
 8009320:	af00      	add	r7, sp, #0
 8009322:	6078      	str	r0, [r7, #4]
 8009324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800932a:	683b      	ldr	r3, [r7, #0]
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d12c      	bne.n	8009392 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4413      	add	r3, r2
 8009340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	2b00      	cmp	r3, #0
 8009348:	db12      	blt.n	8009370 <USB_EPSetStall+0x54>
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00f      	beq.n	8009370 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	68ba      	ldr	r2, [r7, #8]
 8009360:	0151      	lsls	r1, r2, #5
 8009362:	68fa      	ldr	r2, [r7, #12]
 8009364:	440a      	add	r2, r1
 8009366:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800936a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800936e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	015a      	lsls	r2, r3, #5
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	4413      	add	r3, r2
 8009378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	0151      	lsls	r1, r2, #5
 8009382:	68fa      	ldr	r2, [r7, #12]
 8009384:	440a      	add	r2, r1
 8009386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800938a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800938e:	6013      	str	r3, [r2, #0]
 8009390:	e02b      	b.n	80093ea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	015a      	lsls	r2, r3, #5
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	4413      	add	r3, r2
 800939a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	db12      	blt.n	80093ca <USB_EPSetStall+0xae>
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d00f      	beq.n	80093ca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68ba      	ldr	r2, [r7, #8]
 80093ba:	0151      	lsls	r1, r2, #5
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	440a      	add	r2, r1
 80093c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093c4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093c8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	015a      	lsls	r2, r3, #5
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	4413      	add	r3, r2
 80093d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	68ba      	ldr	r2, [r7, #8]
 80093da:	0151      	lsls	r1, r2, #5
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	440a      	add	r2, r1
 80093e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093e8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80093ea:	2300      	movs	r3, #0
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3714      	adds	r7, #20
 80093f0:	46bd      	mov	sp, r7
 80093f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f6:	4770      	bx	lr

080093f8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80093f8:	b480      	push	{r7}
 80093fa:	b085      	sub	sp, #20
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d128      	bne.n	8009466 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	015a      	lsls	r2, r3, #5
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	4413      	add	r3, r2
 800941c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68ba      	ldr	r2, [r7, #8]
 8009424:	0151      	lsls	r1, r2, #5
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	440a      	add	r2, r1
 800942a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800942e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009432:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	78db      	ldrb	r3, [r3, #3]
 8009438:	2b03      	cmp	r3, #3
 800943a:	d003      	beq.n	8009444 <USB_EPClearStall+0x4c>
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	78db      	ldrb	r3, [r3, #3]
 8009440:	2b02      	cmp	r3, #2
 8009442:	d138      	bne.n	80094b6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	015a      	lsls	r2, r3, #5
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4413      	add	r3, r2
 800944c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	0151      	lsls	r1, r2, #5
 8009456:	68fa      	ldr	r2, [r7, #12]
 8009458:	440a      	add	r2, r1
 800945a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800945e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009462:	6013      	str	r3, [r2, #0]
 8009464:	e027      	b.n	80094b6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009466:	68bb      	ldr	r3, [r7, #8]
 8009468:	015a      	lsls	r2, r3, #5
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	4413      	add	r3, r2
 800946e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	0151      	lsls	r1, r2, #5
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	440a      	add	r2, r1
 800947c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009480:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009484:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	78db      	ldrb	r3, [r3, #3]
 800948a:	2b03      	cmp	r3, #3
 800948c:	d003      	beq.n	8009496 <USB_EPClearStall+0x9e>
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	78db      	ldrb	r3, [r3, #3]
 8009492:	2b02      	cmp	r3, #2
 8009494:	d10f      	bne.n	80094b6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094b4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80094e6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ee:	681a      	ldr	r2, [r3, #0]
 80094f0:	78fb      	ldrb	r3, [r7, #3]
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80094f8:	68f9      	ldr	r1, [r7, #12]
 80094fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80094fe:	4313      	orrs	r3, r2
 8009500:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009502:	2300      	movs	r3, #0
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009510:	b480      	push	{r7}
 8009512:	b085      	sub	sp, #20
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800952a:	f023 0303 	bic.w	r3, r3, #3
 800952e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009536:	685b      	ldr	r3, [r3, #4]
 8009538:	68fa      	ldr	r2, [r7, #12]
 800953a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800953e:	f023 0302 	bic.w	r3, r3, #2
 8009542:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009544:	2300      	movs	r3, #0
}
 8009546:	4618      	mov	r0, r3
 8009548:	3714      	adds	r7, #20
 800954a:	46bd      	mov	sp, r7
 800954c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009550:	4770      	bx	lr

08009552 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009552:	b480      	push	{r7}
 8009554:	b085      	sub	sp, #20
 8009556:	af00      	add	r7, sp, #0
 8009558:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800956c:	f023 0303 	bic.w	r3, r3, #3
 8009570:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009578:	685b      	ldr	r3, [r3, #4]
 800957a:	68fa      	ldr	r2, [r7, #12]
 800957c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009580:	f043 0302 	orr.w	r3, r3, #2
 8009584:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009586:	2300      	movs	r3, #0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3714      	adds	r7, #20
 800958c:	46bd      	mov	sp, r7
 800958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009592:	4770      	bx	lr

08009594 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009594:	b480      	push	{r7}
 8009596:	b085      	sub	sp, #20
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	695b      	ldr	r3, [r3, #20]
 80095a0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	4013      	ands	r3, r2
 80095aa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095ac:	68fb      	ldr	r3, [r7, #12]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr

080095ba <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095ba:	b480      	push	{r7}
 80095bc:	b085      	sub	sp, #20
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095cc:	699b      	ldr	r3, [r3, #24]
 80095ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	68ba      	ldr	r2, [r7, #8]
 80095da:	4013      	ands	r3, r2
 80095dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	0c1b      	lsrs	r3, r3, #16
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr

080095ee <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095ee:	b480      	push	{r7}
 80095f0:	b085      	sub	sp, #20
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009600:	699b      	ldr	r3, [r3, #24]
 8009602:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800960a:	69db      	ldr	r3, [r3, #28]
 800960c:	68ba      	ldr	r2, [r7, #8]
 800960e:	4013      	ands	r3, r2
 8009610:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	b29b      	uxth	r3, r3
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009622:	b480      	push	{r7}
 8009624:	b085      	sub	sp, #20
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
 800962a:	460b      	mov	r3, r1
 800962c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009632:	78fb      	ldrb	r3, [r7, #3]
 8009634:	015a      	lsls	r2, r3, #5
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	4413      	add	r3, r2
 800963a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800963e:	689b      	ldr	r3, [r3, #8]
 8009640:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009648:	695b      	ldr	r3, [r3, #20]
 800964a:	68ba      	ldr	r2, [r7, #8]
 800964c:	4013      	ands	r3, r2
 800964e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009650:	68bb      	ldr	r3, [r7, #8]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr

0800965e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800965e:	b480      	push	{r7}
 8009660:	b087      	sub	sp, #28
 8009662:	af00      	add	r7, sp, #0
 8009664:	6078      	str	r0, [r7, #4]
 8009666:	460b      	mov	r3, r1
 8009668:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800967e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009680:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	f003 030f 	and.w	r3, r3, #15
 8009688:	68fa      	ldr	r2, [r7, #12]
 800968a:	fa22 f303 	lsr.w	r3, r2, r3
 800968e:	01db      	lsls	r3, r3, #7
 8009690:	b2db      	uxtb	r3, r3
 8009692:	693a      	ldr	r2, [r7, #16]
 8009694:	4313      	orrs	r3, r2
 8009696:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	015a      	lsls	r2, r3, #5
 800969c:	697b      	ldr	r3, [r7, #20]
 800969e:	4413      	add	r3, r2
 80096a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4013      	ands	r3, r2
 80096aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096ac:	68bb      	ldr	r3, [r7, #8]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	371c      	adds	r7, #28
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b083      	sub	sp, #12
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	f003 0301 	and.w	r3, r3, #1
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	370c      	adds	r7, #12
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr

080096d6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80096d6:	b480      	push	{r7}
 80096d8:	b085      	sub	sp, #20
 80096da:	af00      	add	r7, sp, #0
 80096dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68fa      	ldr	r2, [r7, #12]
 80096ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096f0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80096f4:	f023 0307 	bic.w	r3, r3, #7
 80096f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800970c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800970e:	2300      	movs	r3, #0
}
 8009710:	4618      	mov	r0, r3
 8009712:	3714      	adds	r7, #20
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr

0800971c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 800971c:	b480      	push	{r7}
 800971e:	b085      	sub	sp, #20
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
 8009724:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	333c      	adds	r3, #60	; 0x3c
 800972e:	3304      	adds	r3, #4
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	4a1c      	ldr	r2, [pc, #112]	; (80097a8 <USB_EP0_OutStart+0x8c>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d90a      	bls.n	8009752 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800974c:	d101      	bne.n	8009752 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 800974e:	2300      	movs	r3, #0
 8009750:	e024      	b.n	800979c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009758:	461a      	mov	r2, r3
 800975a:	2300      	movs	r3, #0
 800975c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009764:	691b      	ldr	r3, [r3, #16]
 8009766:	68fa      	ldr	r2, [r7, #12]
 8009768:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800976c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009770:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	68fa      	ldr	r2, [r7, #12]
 800977c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009780:	f043 0318 	orr.w	r3, r3, #24
 8009784:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009794:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009798:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 800979a:	2300      	movs	r3, #0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3714      	adds	r7, #20
 80097a0:	46bd      	mov	sp, r7
 80097a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a6:	4770      	bx	lr
 80097a8:	4f54300a 	.word	0x4f54300a

080097ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	3301      	adds	r3, #1
 80097bc:	60fb      	str	r3, [r7, #12]
 80097be:	4a13      	ldr	r2, [pc, #76]	; (800980c <USB_CoreReset+0x60>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d901      	bls.n	80097c8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 80097c4:	2303      	movs	r3, #3
 80097c6:	e01a      	b.n	80097fe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	daf3      	bge.n	80097b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	691b      	ldr	r3, [r3, #16]
 80097d8:	f043 0201 	orr.w	r2, r3, #1
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	3301      	adds	r3, #1
 80097e4:	60fb      	str	r3, [r7, #12]
 80097e6:	4a09      	ldr	r2, [pc, #36]	; (800980c <USB_CoreReset+0x60>)
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d901      	bls.n	80097f0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 80097ec:	2303      	movs	r3, #3
 80097ee:	e006      	b.n	80097fe <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	691b      	ldr	r3, [r3, #16]
 80097f4:	f003 0301 	and.w	r3, r3, #1
 80097f8:	2b01      	cmp	r3, #1
 80097fa:	d0f1      	beq.n	80097e0 <USB_CoreReset+0x34>

  return HAL_OK;
 80097fc:	2300      	movs	r3, #0
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	00030d40 	.word	0x00030d40

08009810 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800981c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009820:	f002 fa86 	bl	800bd30 <USBD_static_malloc>
 8009824:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d105      	bne.n	8009838 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2200      	movs	r2, #0
 8009830:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009834:	2302      	movs	r3, #2
 8009836:	e066      	b.n	8009906 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	7c1b      	ldrb	r3, [r3, #16]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d119      	bne.n	800987c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009848:	f44f 7300 	mov.w	r3, #512	; 0x200
 800984c:	2202      	movs	r2, #2
 800984e:	2181      	movs	r1, #129	; 0x81
 8009850:	6878      	ldr	r0, [r7, #4]
 8009852:	f002 f859 	bl	800b908 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800985c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009860:	2202      	movs	r2, #2
 8009862:	2101      	movs	r1, #1
 8009864:	6878      	ldr	r0, [r7, #4]
 8009866:	f002 f84f 	bl	800b908 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2201      	movs	r2, #1
 800986e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2210      	movs	r2, #16
 8009876:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800987a:	e016      	b.n	80098aa <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800987c:	2340      	movs	r3, #64	; 0x40
 800987e:	2202      	movs	r2, #2
 8009880:	2181      	movs	r1, #129	; 0x81
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f002 f840 	bl	800b908 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2201      	movs	r2, #1
 800988c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800988e:	2340      	movs	r3, #64	; 0x40
 8009890:	2202      	movs	r2, #2
 8009892:	2101      	movs	r1, #1
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f002 f837 	bl	800b908 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2210      	movs	r2, #16
 80098a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80098aa:	2308      	movs	r3, #8
 80098ac:	2203      	movs	r2, #3
 80098ae:	2182      	movs	r1, #130	; 0x82
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f002 f829 	bl	800b908 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2200      	movs	r2, #0
 80098cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	7c1b      	ldrb	r3, [r3, #16]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d109      	bne.n	80098f4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80098ea:	2101      	movs	r1, #1
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f002 f985 	bl	800bbfc <USBD_LL_PrepareReceive>
 80098f2:	e007      	b.n	8009904 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80098fa:	2340      	movs	r3, #64	; 0x40
 80098fc:	2101      	movs	r1, #1
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f002 f97c 	bl	800bbfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3710      	adds	r7, #16
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	460b      	mov	r3, r1
 8009918:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800991a:	2181      	movs	r1, #129	; 0x81
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f002 f831 	bl	800b984 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009928:	2101      	movs	r1, #1
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f002 f82a 	bl	800b984 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009938:	2182      	movs	r1, #130	; 0x82
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f002 f822 	bl	800b984 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2200      	movs	r2, #0
 8009944:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2200      	movs	r2, #0
 800994c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009956:	2b00      	cmp	r3, #0
 8009958:	d00e      	beq.n	8009978 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009960:	685b      	ldr	r3, [r3, #4]
 8009962:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800996a:	4618      	mov	r0, r3
 800996c:	f002 f9ee 	bl	800bd4c <USBD_static_free>
    pdev->pClassData = NULL;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2200      	movs	r2, #0
 8009974:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3708      	adds	r7, #8
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
	...

08009984 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009994:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009996:	2300      	movs	r3, #0
 8009998:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800999a:	2300      	movs	r3, #0
 800999c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80099a2:	693b      	ldr	r3, [r7, #16]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80099a8:	2303      	movs	r3, #3
 80099aa:	e0af      	b.n	8009b0c <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d03f      	beq.n	8009a38 <USBD_CDC_Setup+0xb4>
 80099b8:	2b20      	cmp	r3, #32
 80099ba:	f040 809f 	bne.w	8009afc <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	88db      	ldrh	r3, [r3, #6]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d02e      	beq.n	8009a24 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	b25b      	sxtb	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	da16      	bge.n	80099fe <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80099dc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	88d2      	ldrh	r2, [r2, #6]
 80099e2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	88db      	ldrh	r3, [r3, #6]
 80099e8:	2b07      	cmp	r3, #7
 80099ea:	bf28      	it	cs
 80099ec:	2307      	movcs	r3, #7
 80099ee:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	89fa      	ldrh	r2, [r7, #14]
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f001 fb13 	bl	800b022 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80099fc:	e085      	b.n	8009b0a <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	785a      	ldrb	r2, [r3, #1]
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	88db      	ldrh	r3, [r3, #6]
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8009a14:	6939      	ldr	r1, [r7, #16]
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	88db      	ldrh	r3, [r3, #6]
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f001 fb2c 	bl	800b07a <USBD_CtlPrepareRx>
      break;
 8009a22:	e072      	b.n	8009b0a <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a2a:	689b      	ldr	r3, [r3, #8]
 8009a2c:	683a      	ldr	r2, [r7, #0]
 8009a2e:	7850      	ldrb	r0, [r2, #1]
 8009a30:	2200      	movs	r2, #0
 8009a32:	6839      	ldr	r1, [r7, #0]
 8009a34:	4798      	blx	r3
      break;
 8009a36:	e068      	b.n	8009b0a <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	785b      	ldrb	r3, [r3, #1]
 8009a3c:	2b0b      	cmp	r3, #11
 8009a3e:	d852      	bhi.n	8009ae6 <USBD_CDC_Setup+0x162>
 8009a40:	a201      	add	r2, pc, #4	; (adr r2, 8009a48 <USBD_CDC_Setup+0xc4>)
 8009a42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a46:	bf00      	nop
 8009a48:	08009a79 	.word	0x08009a79
 8009a4c:	08009af5 	.word	0x08009af5
 8009a50:	08009ae7 	.word	0x08009ae7
 8009a54:	08009ae7 	.word	0x08009ae7
 8009a58:	08009ae7 	.word	0x08009ae7
 8009a5c:	08009ae7 	.word	0x08009ae7
 8009a60:	08009ae7 	.word	0x08009ae7
 8009a64:	08009ae7 	.word	0x08009ae7
 8009a68:	08009ae7 	.word	0x08009ae7
 8009a6c:	08009ae7 	.word	0x08009ae7
 8009a70:	08009aa3 	.word	0x08009aa3
 8009a74:	08009acd 	.word	0x08009acd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b03      	cmp	r3, #3
 8009a82:	d107      	bne.n	8009a94 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009a84:	f107 030a 	add.w	r3, r7, #10
 8009a88:	2202      	movs	r2, #2
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 fac8 	bl	800b022 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009a92:	e032      	b.n	8009afa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009a94:	6839      	ldr	r1, [r7, #0]
 8009a96:	6878      	ldr	r0, [r7, #4]
 8009a98:	f001 fa52 	bl	800af40 <USBD_CtlError>
            ret = USBD_FAIL;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	75fb      	strb	r3, [r7, #23]
          break;
 8009aa0:	e02b      	b.n	8009afa <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	2b03      	cmp	r3, #3
 8009aac:	d107      	bne.n	8009abe <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009aae:	f107 030d 	add.w	r3, r7, #13
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f001 fab3 	bl	800b022 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009abc:	e01d      	b.n	8009afa <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f001 fa3d 	bl	800af40 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	75fb      	strb	r3, [r7, #23]
          break;
 8009aca:	e016      	b.n	8009afa <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ad2:	b2db      	uxtb	r3, r3
 8009ad4:	2b03      	cmp	r3, #3
 8009ad6:	d00f      	beq.n	8009af8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 fa30 	bl	800af40 <USBD_CtlError>
            ret = USBD_FAIL;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009ae4:	e008      	b.n	8009af8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009ae6:	6839      	ldr	r1, [r7, #0]
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f001 fa29 	bl	800af40 <USBD_CtlError>
          ret = USBD_FAIL;
 8009aee:	2303      	movs	r3, #3
 8009af0:	75fb      	strb	r3, [r7, #23]
          break;
 8009af2:	e002      	b.n	8009afa <USBD_CDC_Setup+0x176>
          break;
 8009af4:	bf00      	nop
 8009af6:	e008      	b.n	8009b0a <USBD_CDC_Setup+0x186>
          break;
 8009af8:	bf00      	nop
      }
      break;
 8009afa:	e006      	b.n	8009b0a <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8009afc:	6839      	ldr	r1, [r7, #0]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f001 fa1e 	bl	800af40 <USBD_CtlError>
      ret = USBD_FAIL;
 8009b04:	2303      	movs	r3, #3
 8009b06:	75fb      	strb	r3, [r7, #23]
      break;
 8009b08:	bf00      	nop
  }

  return (uint8_t)ret;
 8009b0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3718      	adds	r7, #24
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009b26:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d101      	bne.n	8009b36 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e04f      	b.n	8009bd6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009b3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009b3e:	78fa      	ldrb	r2, [r7, #3]
 8009b40:	6879      	ldr	r1, [r7, #4]
 8009b42:	4613      	mov	r3, r2
 8009b44:	009b      	lsls	r3, r3, #2
 8009b46:	4413      	add	r3, r2
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	440b      	add	r3, r1
 8009b4c:	3318      	adds	r3, #24
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d029      	beq.n	8009ba8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009b54:	78fa      	ldrb	r2, [r7, #3]
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	440b      	add	r3, r1
 8009b62:	3318      	adds	r3, #24
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	78f9      	ldrb	r1, [r7, #3]
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	1a5b      	subs	r3, r3, r1
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4403      	add	r3, r0
 8009b74:	3344      	adds	r3, #68	; 0x44
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	fbb2 f1f3 	udiv	r1, r2, r3
 8009b7c:	fb01 f303 	mul.w	r3, r1, r3
 8009b80:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d110      	bne.n	8009ba8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8009b86:	78fa      	ldrb	r2, [r7, #3]
 8009b88:	6879      	ldr	r1, [r7, #4]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	4413      	add	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	440b      	add	r3, r1
 8009b94:	3318      	adds	r3, #24
 8009b96:	2200      	movs	r2, #0
 8009b98:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009b9a:	78f9      	ldrb	r1, [r7, #3]
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	6878      	ldr	r0, [r7, #4]
 8009ba2:	f001 fff3 	bl	800bb8c <USBD_LL_Transmit>
 8009ba6:	e015      	b.n	8009bd4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2200      	movs	r2, #0
 8009bac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d00b      	beq.n	8009bd4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8009bca:	68ba      	ldr	r2, [r7, #8]
 8009bcc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8009bd0:	78fa      	ldrb	r2, [r7, #3]
 8009bd2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3710      	adds	r7, #16
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	460b      	mov	r3, r1
 8009be8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bf0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d101      	bne.n	8009c00 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e015      	b.n	8009c2c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009c00:	78fb      	ldrb	r3, [r7, #3]
 8009c02:	4619      	mov	r1, r3
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f002 f831 	bl	800bc6c <USBD_LL_GetRxDataSize>
 8009c0a:	4602      	mov	r2, r0
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c18:	68db      	ldr	r3, [r3, #12]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8009c26:	4611      	mov	r1, r2
 8009c28:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009c2a:	2300      	movs	r3, #0
}
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009c42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d101      	bne.n	8009c4e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8009c4a:	2303      	movs	r3, #3
 8009c4c:	e01b      	b.n	8009c86 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d015      	beq.n	8009c84 <USBD_CDC_EP0_RxReady+0x50>
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8009c5e:	2bff      	cmp	r3, #255	; 0xff
 8009c60:	d010      	beq.n	8009c84 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	68fa      	ldr	r2, [r7, #12]
 8009c6c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8009c70:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009c78:	b292      	uxth	r2, r2
 8009c7a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	22ff      	movs	r2, #255	; 0xff
 8009c80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	3710      	adds	r7, #16
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
	...

08009c90 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009c90:	b480      	push	{r7}
 8009c92:	b083      	sub	sp, #12
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2243      	movs	r2, #67	; 0x43
 8009c9c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8009c9e:	4b03      	ldr	r3, [pc, #12]	; (8009cac <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	370c      	adds	r7, #12
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009caa:	4770      	bx	lr
 8009cac:	20000094 	.word	0x20000094

08009cb0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2243      	movs	r2, #67	; 0x43
 8009cbc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8009cbe:	4b03      	ldr	r3, [pc, #12]	; (8009ccc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	370c      	adds	r7, #12
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cca:	4770      	bx	lr
 8009ccc:	20000050 	.word	0x20000050

08009cd0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009cd0:	b480      	push	{r7}
 8009cd2:	b083      	sub	sp, #12
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2243      	movs	r2, #67	; 0x43
 8009cdc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8009cde:	4b03      	ldr	r3, [pc, #12]	; (8009cec <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	370c      	adds	r7, #12
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cea:	4770      	bx	lr
 8009cec:	200000d8 	.word	0x200000d8

08009cf0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009cf0:	b480      	push	{r7}
 8009cf2:	b083      	sub	sp, #12
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	220a      	movs	r2, #10
 8009cfc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009cfe:	4b03      	ldr	r3, [pc, #12]	; (8009d0c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	370c      	adds	r7, #12
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr
 8009d0c:	2000000c 	.word	0x2000000c

08009d10 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b083      	sub	sp, #12
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e004      	b.n	8009d2e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b087      	sub	sp, #28
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d4c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8009d4e:	697b      	ldr	r3, [r7, #20]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009d54:	2303      	movs	r3, #3
 8009d56:	e008      	b.n	8009d6a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8009d68:	2300      	movs	r3, #0
}
 8009d6a:	4618      	mov	r0, r3
 8009d6c:	371c      	adds	r7, #28
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b085      	sub	sp, #20
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009d86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d101      	bne.n	8009d92 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8009d8e:	2303      	movs	r3, #3
 8009d90:	e004      	b.n	8009d9c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	683a      	ldr	r2, [r7, #0]
 8009d96:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8009d9a:	2300      	movs	r3, #0
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009db6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d101      	bne.n	8009dc6 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8009dc2:	2303      	movs	r3, #3
 8009dc4:	e016      	b.n	8009df4 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	7c1b      	ldrb	r3, [r3, #16]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d109      	bne.n	8009de2 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009dd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009dd8:	2101      	movs	r1, #1
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f001 ff0e 	bl	800bbfc <USBD_LL_PrepareReceive>
 8009de0:	e007      	b.n	8009df2 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009de8:	2340      	movs	r3, #64	; 0x40
 8009dea:	2101      	movs	r1, #1
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f001 ff05 	bl	800bbfc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4613      	mov	r3, r2
 8009e08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009e10:	2303      	movs	r3, #3
 8009e12:	e01f      	b.n	8009e54 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009e2c:	68bb      	ldr	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d003      	beq.n	8009e3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	79fa      	ldrb	r2, [r7, #7]
 8009e46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009e48:	68f8      	ldr	r0, [r7, #12]
 8009e4a:	f001 fce1 	bl	800b810 <USBD_LL_Init>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009e52:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e54:	4618      	mov	r0, r3
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b084      	sub	sp, #16
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009e70:	2303      	movs	r3, #3
 8009e72:	e016      	b.n	8009ea2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	683a      	ldr	r2, [r7, #0]
 8009e78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e84:	2b00      	cmp	r3, #0
 8009e86:	d00b      	beq.n	8009ea0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e90:	f107 020e 	add.w	r2, r7, #14
 8009e94:	4610      	mov	r0, r2
 8009e96:	4798      	blx	r3
 8009e98:	4602      	mov	r2, r0
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8009ea0:	2300      	movs	r3, #0
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f001 fcf6 	bl	800b8a4 <USBD_LL_Start>
 8009eb8:	4603      	mov	r3, r0
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b083      	sub	sp, #12
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b084      	sub	sp, #16
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009ee4:	2303      	movs	r3, #3
 8009ee6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d009      	beq.n	8009f06 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	78fa      	ldrb	r2, [r7, #3]
 8009efc:	4611      	mov	r1, r2
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	4798      	blx	r3
 8009f02:	4603      	mov	r3, r0
 8009f04:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3710      	adds	r7, #16
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}

08009f10 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f10:	b580      	push	{r7, lr}
 8009f12:	b082      	sub	sp, #8
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d007      	beq.n	8009f36 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	78fa      	ldrb	r2, [r7, #3]
 8009f30:	4611      	mov	r1, r2
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	4798      	blx	r3
  }

  return USBD_OK;
 8009f36:	2300      	movs	r3, #0
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3708      	adds	r7, #8
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	4618      	mov	r0, r3
 8009f54:	f000 ffba 	bl	800aecc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2201      	movs	r2, #1
 8009f5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009f66:	461a      	mov	r2, r3
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f74:	f003 031f 	and.w	r3, r3, #31
 8009f78:	2b02      	cmp	r3, #2
 8009f7a:	d01a      	beq.n	8009fb2 <USBD_LL_SetupStage+0x72>
 8009f7c:	2b02      	cmp	r3, #2
 8009f7e:	d822      	bhi.n	8009fc6 <USBD_LL_SetupStage+0x86>
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <USBD_LL_SetupStage+0x4a>
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d00a      	beq.n	8009f9e <USBD_LL_SetupStage+0x5e>
 8009f88:	e01d      	b.n	8009fc6 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009f90:	4619      	mov	r1, r3
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 fa62 	bl	800a45c <USBD_StdDevReq>
 8009f98:	4603      	mov	r3, r0
 8009f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f9c:	e020      	b.n	8009fe0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 fac6 	bl	800a538 <USBD_StdItfReq>
 8009fac:	4603      	mov	r3, r0
 8009fae:	73fb      	strb	r3, [r7, #15]
      break;
 8009fb0:	e016      	b.n	8009fe0 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009fb8:	4619      	mov	r1, r3
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fb05 	bl	800a5ca <USBD_StdEPReq>
 8009fc0:	4603      	mov	r3, r0
 8009fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8009fc4:	e00c      	b.n	8009fe0 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009fcc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009fd0:	b2db      	uxtb	r3, r3
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f001 fd0b 	bl	800b9f0 <USBD_LL_StallEP>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73fb      	strb	r3, [r7, #15]
      break;
 8009fde:	bf00      	nop
  }

  return ret;
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b086      	sub	sp, #24
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	460b      	mov	r3, r1
 8009ff4:	607a      	str	r2, [r7, #4]
 8009ff6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8009ff8:	7afb      	ldrb	r3, [r7, #11]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d138      	bne.n	800a070 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a004:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a00c:	2b03      	cmp	r3, #3
 800a00e:	d14a      	bne.n	800a0a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a010:	693b      	ldr	r3, [r7, #16]
 800a012:	689a      	ldr	r2, [r3, #8]
 800a014:	693b      	ldr	r3, [r7, #16]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	429a      	cmp	r2, r3
 800a01a:	d913      	bls.n	800a044 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a01c:	693b      	ldr	r3, [r7, #16]
 800a01e:	689a      	ldr	r2, [r3, #8]
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	1ad2      	subs	r2, r2, r3
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a02a:	693b      	ldr	r3, [r7, #16]
 800a02c:	68da      	ldr	r2, [r3, #12]
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	689b      	ldr	r3, [r3, #8]
 800a032:	4293      	cmp	r3, r2
 800a034:	bf28      	it	cs
 800a036:	4613      	movcs	r3, r2
 800a038:	461a      	mov	r2, r3
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	68f8      	ldr	r0, [r7, #12]
 800a03e:	f001 f839 	bl	800b0b4 <USBD_CtlContinueRx>
 800a042:	e030      	b.n	800a0a6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b03      	cmp	r3, #3
 800a04e:	d10b      	bne.n	800a068 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a056:	691b      	ldr	r3, [r3, #16]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d005      	beq.n	800a068 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a062:	691b      	ldr	r3, [r3, #16]
 800a064:	68f8      	ldr	r0, [r7, #12]
 800a066:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f001 f834 	bl	800b0d6 <USBD_CtlSendStatus>
 800a06e:	e01a      	b.n	800a0a6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a076:	b2db      	uxtb	r3, r3
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d114      	bne.n	800a0a6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a082:	699b      	ldr	r3, [r3, #24]
 800a084:	2b00      	cmp	r3, #0
 800a086:	d00e      	beq.n	800a0a6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a08e:	699b      	ldr	r3, [r3, #24]
 800a090:	7afa      	ldrb	r2, [r7, #11]
 800a092:	4611      	mov	r1, r2
 800a094:	68f8      	ldr	r0, [r7, #12]
 800a096:	4798      	blx	r3
 800a098:	4603      	mov	r3, r0
 800a09a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a09c:	7dfb      	ldrb	r3, [r7, #23]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d001      	beq.n	800a0a6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800a0a2:	7dfb      	ldrb	r3, [r7, #23]
 800a0a4:	e000      	b.n	800a0a8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800a0a6:	2300      	movs	r3, #0
}
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	3718      	adds	r7, #24
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	bd80      	pop	{r7, pc}

0800a0b0 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b086      	sub	sp, #24
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	607a      	str	r2, [r7, #4]
 800a0bc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a0be:	7afb      	ldrb	r3, [r7, #11]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d16b      	bne.n	800a19c <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	3314      	adds	r3, #20
 800a0c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d156      	bne.n	800a182 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	689a      	ldr	r2, [r3, #8]
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	68db      	ldr	r3, [r3, #12]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d914      	bls.n	800a10a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0e0:	693b      	ldr	r3, [r7, #16]
 800a0e2:	689a      	ldr	r2, [r3, #8]
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	1ad2      	subs	r2, r2, r3
 800a0ea:	693b      	ldr	r3, [r7, #16]
 800a0ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	689b      	ldr	r3, [r3, #8]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	6879      	ldr	r1, [r7, #4]
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f000 ffae 	bl	800b058 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	2200      	movs	r2, #0
 800a100:	2100      	movs	r1, #0
 800a102:	68f8      	ldr	r0, [r7, #12]
 800a104:	f001 fd7a 	bl	800bbfc <USBD_LL_PrepareReceive>
 800a108:	e03b      	b.n	800a182 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a10a:	693b      	ldr	r3, [r7, #16]
 800a10c:	68da      	ldr	r2, [r3, #12]
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	429a      	cmp	r2, r3
 800a114:	d11c      	bne.n	800a150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a116:	693b      	ldr	r3, [r7, #16]
 800a118:	685a      	ldr	r2, [r3, #4]
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a11e:	429a      	cmp	r2, r3
 800a120:	d316      	bcc.n	800a150 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a122:	693b      	ldr	r3, [r7, #16]
 800a124:	685a      	ldr	r2, [r3, #4]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a12c:	429a      	cmp	r2, r3
 800a12e:	d20f      	bcs.n	800a150 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a130:	2200      	movs	r2, #0
 800a132:	2100      	movs	r1, #0
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f000 ff8f 	bl	800b058 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	2200      	movs	r2, #0
 800a13e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a142:	2300      	movs	r3, #0
 800a144:	2200      	movs	r2, #0
 800a146:	2100      	movs	r1, #0
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f001 fd57 	bl	800bbfc <USBD_LL_PrepareReceive>
 800a14e:	e018      	b.n	800a182 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b03      	cmp	r3, #3
 800a15a:	d10b      	bne.n	800a174 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d005      	beq.n	800a174 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a16e:	68db      	ldr	r3, [r3, #12]
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a174:	2180      	movs	r1, #128	; 0x80
 800a176:	68f8      	ldr	r0, [r7, #12]
 800a178:	f001 fc3a 	bl	800b9f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f000 ffbd 	bl	800b0fc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a188:	2b01      	cmp	r3, #1
 800a18a:	d122      	bne.n	800a1d2 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a18c:	68f8      	ldr	r0, [r7, #12]
 800a18e:	f7ff fe98 	bl	8009ec2 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	2200      	movs	r2, #0
 800a196:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a19a:	e01a      	b.n	800a1d2 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a1a2:	b2db      	uxtb	r3, r3
 800a1a4:	2b03      	cmp	r3, #3
 800a1a6:	d114      	bne.n	800a1d2 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ae:	695b      	ldr	r3, [r3, #20]
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d00e      	beq.n	800a1d2 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1ba:	695b      	ldr	r3, [r3, #20]
 800a1bc:	7afa      	ldrb	r2, [r7, #11]
 800a1be:	4611      	mov	r1, r2
 800a1c0:	68f8      	ldr	r0, [r7, #12]
 800a1c2:	4798      	blx	r3
 800a1c4:	4603      	mov	r3, r0
 800a1c6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800a1c8:	7dfb      	ldrb	r3, [r7, #23]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d001      	beq.n	800a1d2 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800a1ce:	7dfb      	ldrb	r3, [r7, #23]
 800a1d0:	e000      	b.n	800a1d4 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800a1d2:	2300      	movs	r3, #0
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2201      	movs	r2, #1
 800a1e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e02f      	b.n	800a270 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00f      	beq.n	800a23a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d009      	beq.n	800a23a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a22c:	685b      	ldr	r3, [r3, #4]
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	6852      	ldr	r2, [r2, #4]
 800a232:	b2d2      	uxtb	r2, r2
 800a234:	4611      	mov	r1, r2
 800a236:	6878      	ldr	r0, [r7, #4]
 800a238:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a23a:	2340      	movs	r3, #64	; 0x40
 800a23c:	2200      	movs	r2, #0
 800a23e:	2100      	movs	r1, #0
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	f001 fb61 	bl	800b908 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2201      	movs	r2, #1
 800a24a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2240      	movs	r2, #64	; 0x40
 800a252:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a256:	2340      	movs	r3, #64	; 0x40
 800a258:	2200      	movs	r2, #0
 800a25a:	2180      	movs	r1, #128	; 0x80
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 fb53 	bl	800b908 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2201      	movs	r2, #1
 800a266:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2240      	movs	r2, #64	; 0x40
 800a26c:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a26e:	2300      	movs	r3, #0
}
 800a270:	4618      	mov	r0, r3
 800a272:	3708      	adds	r7, #8
 800a274:	46bd      	mov	sp, r7
 800a276:	bd80      	pop	{r7, pc}

0800a278 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	78fa      	ldrb	r2, [r7, #3]
 800a288:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a28a:	2300      	movs	r3, #0
}
 800a28c:	4618      	mov	r0, r3
 800a28e:	370c      	adds	r7, #12
 800a290:	46bd      	mov	sp, r7
 800a292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a296:	4770      	bx	lr

0800a298 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a298:	b480      	push	{r7}
 800a29a:	b083      	sub	sp, #12
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2a6:	b2da      	uxtb	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	2204      	movs	r2, #4
 800a2b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a2b6:	2300      	movs	r3, #0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	370c      	adds	r7, #12
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c2:	4770      	bx	lr

0800a2c4 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b083      	sub	sp, #12
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b04      	cmp	r3, #4
 800a2d6:	d106      	bne.n	800a2e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a2de:	b2da      	uxtb	r2, r3
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a2e6:	2300      	movs	r3, #0
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b082      	sub	sp, #8
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a302:	2b00      	cmp	r3, #0
 800a304:	d101      	bne.n	800a30a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800a306:	2303      	movs	r3, #3
 800a308:	e012      	b.n	800a330 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a310:	b2db      	uxtb	r3, r3
 800a312:	2b03      	cmp	r3, #3
 800a314:	d10b      	bne.n	800a32e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a31c:	69db      	ldr	r3, [r3, #28]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d005      	beq.n	800a32e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a328:	69db      	ldr	r3, [r3, #28]
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
 800a340:	460b      	mov	r3, r1
 800a342:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d101      	bne.n	800a352 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a34e:	2303      	movs	r3, #3
 800a350:	e014      	b.n	800a37c <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d10d      	bne.n	800a37a <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a364:	6a1b      	ldr	r3, [r3, #32]
 800a366:	2b00      	cmp	r3, #0
 800a368:	d007      	beq.n	800a37a <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a370:	6a1b      	ldr	r3, [r3, #32]
 800a372:	78fa      	ldrb	r2, [r7, #3]
 800a374:	4611      	mov	r1, r2
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a37a:	2300      	movs	r3, #0
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3708      	adds	r7, #8
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}

0800a384 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b082      	sub	sp, #8
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	460b      	mov	r3, r1
 800a38e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a396:	2b00      	cmp	r3, #0
 800a398:	d101      	bne.n	800a39e <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e014      	b.n	800a3c8 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	2b03      	cmp	r3, #3
 800a3a8:	d10d      	bne.n	800a3c6 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d007      	beq.n	800a3c6 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	78fa      	ldrb	r2, [r7, #3]
 800a3c0:	4611      	mov	r1, r2
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3c6:	2300      	movs	r3, #0
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3708      	adds	r7, #8
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	bd80      	pop	{r7, pc}

0800a3d0 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	370c      	adds	r7, #12
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e4:	4770      	bx	lr

0800a3e6 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b082      	sub	sp, #8
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2201      	movs	r2, #1
 800a3f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d009      	beq.n	800a414 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	687a      	ldr	r2, [r7, #4]
 800a40a:	6852      	ldr	r2, [r2, #4]
 800a40c:	b2d2      	uxtb	r2, r2
 800a40e:	4611      	mov	r1, r2
 800a410:	6878      	ldr	r0, [r7, #4]
 800a412:	4798      	blx	r3
  }

  return USBD_OK;
 800a414:	2300      	movs	r3, #0
}
 800a416:	4618      	mov	r0, r3
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a41e:	b480      	push	{r7}
 800a420:	b087      	sub	sp, #28
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	3301      	adds	r3, #1
 800a434:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a43c:	8a3b      	ldrh	r3, [r7, #16]
 800a43e:	021b      	lsls	r3, r3, #8
 800a440:	b21a      	sxth	r2, r3
 800a442:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a446:	4313      	orrs	r3, r2
 800a448:	b21b      	sxth	r3, r3
 800a44a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a44c:	89fb      	ldrh	r3, [r7, #14]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	371c      	adds	r7, #28
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr
	...

0800a45c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b084      	sub	sp, #16
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
 800a464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	781b      	ldrb	r3, [r3, #0]
 800a46e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a472:	2b40      	cmp	r3, #64	; 0x40
 800a474:	d005      	beq.n	800a482 <USBD_StdDevReq+0x26>
 800a476:	2b40      	cmp	r3, #64	; 0x40
 800a478:	d853      	bhi.n	800a522 <USBD_StdDevReq+0xc6>
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d00b      	beq.n	800a496 <USBD_StdDevReq+0x3a>
 800a47e:	2b20      	cmp	r3, #32
 800a480:	d14f      	bne.n	800a522 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	4798      	blx	r3
 800a490:	4603      	mov	r3, r0
 800a492:	73fb      	strb	r3, [r7, #15]
      break;
 800a494:	e04a      	b.n	800a52c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a496:	683b      	ldr	r3, [r7, #0]
 800a498:	785b      	ldrb	r3, [r3, #1]
 800a49a:	2b09      	cmp	r3, #9
 800a49c:	d83b      	bhi.n	800a516 <USBD_StdDevReq+0xba>
 800a49e:	a201      	add	r2, pc, #4	; (adr r2, 800a4a4 <USBD_StdDevReq+0x48>)
 800a4a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a4:	0800a4f9 	.word	0x0800a4f9
 800a4a8:	0800a50d 	.word	0x0800a50d
 800a4ac:	0800a517 	.word	0x0800a517
 800a4b0:	0800a503 	.word	0x0800a503
 800a4b4:	0800a517 	.word	0x0800a517
 800a4b8:	0800a4d7 	.word	0x0800a4d7
 800a4bc:	0800a4cd 	.word	0x0800a4cd
 800a4c0:	0800a517 	.word	0x0800a517
 800a4c4:	0800a4ef 	.word	0x0800a4ef
 800a4c8:	0800a4e1 	.word	0x0800a4e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a4cc:	6839      	ldr	r1, [r7, #0]
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 f9de 	bl	800a890 <USBD_GetDescriptor>
          break;
 800a4d4:	e024      	b.n	800a520 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a4d6:	6839      	ldr	r1, [r7, #0]
 800a4d8:	6878      	ldr	r0, [r7, #4]
 800a4da:	f000 fb6d 	bl	800abb8 <USBD_SetAddress>
          break;
 800a4de:	e01f      	b.n	800a520 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a4e0:	6839      	ldr	r1, [r7, #0]
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 fbac 	bl	800ac40 <USBD_SetConfig>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	73fb      	strb	r3, [r7, #15]
          break;
 800a4ec:	e018      	b.n	800a520 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fc4b 	bl	800ad8c <USBD_GetConfig>
          break;
 800a4f6:	e013      	b.n	800a520 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fc7c 	bl	800adf8 <USBD_GetStatus>
          break;
 800a500:	e00e      	b.n	800a520 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f000 fcab 	bl	800ae60 <USBD_SetFeature>
          break;
 800a50a:	e009      	b.n	800a520 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a50c:	6839      	ldr	r1, [r7, #0]
 800a50e:	6878      	ldr	r0, [r7, #4]
 800a510:	f000 fcba 	bl	800ae88 <USBD_ClrFeature>
          break;
 800a514:	e004      	b.n	800a520 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a516:	6839      	ldr	r1, [r7, #0]
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f000 fd11 	bl	800af40 <USBD_CtlError>
          break;
 800a51e:	bf00      	nop
      }
      break;
 800a520:	e004      	b.n	800a52c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800a522:	6839      	ldr	r1, [r7, #0]
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fd0b 	bl	800af40 <USBD_CtlError>
      break;
 800a52a:	bf00      	nop
  }

  return ret;
 800a52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop

0800a538 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a542:	2300      	movs	r3, #0
 800a544:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a54e:	2b40      	cmp	r3, #64	; 0x40
 800a550:	d005      	beq.n	800a55e <USBD_StdItfReq+0x26>
 800a552:	2b40      	cmp	r3, #64	; 0x40
 800a554:	d82f      	bhi.n	800a5b6 <USBD_StdItfReq+0x7e>
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <USBD_StdItfReq+0x26>
 800a55a:	2b20      	cmp	r3, #32
 800a55c:	d12b      	bne.n	800a5b6 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a564:	b2db      	uxtb	r3, r3
 800a566:	3b01      	subs	r3, #1
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d81d      	bhi.n	800a5a8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	889b      	ldrh	r3, [r3, #4]
 800a570:	b2db      	uxtb	r3, r3
 800a572:	2b01      	cmp	r3, #1
 800a574:	d813      	bhi.n	800a59e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	6839      	ldr	r1, [r7, #0]
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	4798      	blx	r3
 800a584:	4603      	mov	r3, r0
 800a586:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	88db      	ldrh	r3, [r3, #6]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d110      	bne.n	800a5b2 <USBD_StdItfReq+0x7a>
 800a590:	7bfb      	ldrb	r3, [r7, #15]
 800a592:	2b00      	cmp	r3, #0
 800a594:	d10d      	bne.n	800a5b2 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	f000 fd9d 	bl	800b0d6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a59c:	e009      	b.n	800a5b2 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800a59e:	6839      	ldr	r1, [r7, #0]
 800a5a0:	6878      	ldr	r0, [r7, #4]
 800a5a2:	f000 fccd 	bl	800af40 <USBD_CtlError>
          break;
 800a5a6:	e004      	b.n	800a5b2 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800a5a8:	6839      	ldr	r1, [r7, #0]
 800a5aa:	6878      	ldr	r0, [r7, #4]
 800a5ac:	f000 fcc8 	bl	800af40 <USBD_CtlError>
          break;
 800a5b0:	e000      	b.n	800a5b4 <USBD_StdItfReq+0x7c>
          break;
 800a5b2:	bf00      	nop
      }
      break;
 800a5b4:	e004      	b.n	800a5c0 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800a5b6:	6839      	ldr	r1, [r7, #0]
 800a5b8:	6878      	ldr	r0, [r7, #4]
 800a5ba:	f000 fcc1 	bl	800af40 <USBD_CtlError>
      break;
 800a5be:	bf00      	nop
  }

  return ret;
 800a5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	3710      	adds	r7, #16
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	bd80      	pop	{r7, pc}

0800a5ca <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b084      	sub	sp, #16
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
 800a5d2:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	889b      	ldrh	r3, [r3, #4]
 800a5dc:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	781b      	ldrb	r3, [r3, #0]
 800a5e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5e6:	2b40      	cmp	r3, #64	; 0x40
 800a5e8:	d007      	beq.n	800a5fa <USBD_StdEPReq+0x30>
 800a5ea:	2b40      	cmp	r3, #64	; 0x40
 800a5ec:	f200 8145 	bhi.w	800a87a <USBD_StdEPReq+0x2b0>
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d00c      	beq.n	800a60e <USBD_StdEPReq+0x44>
 800a5f4:	2b20      	cmp	r3, #32
 800a5f6:	f040 8140 	bne.w	800a87a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a600:	689b      	ldr	r3, [r3, #8]
 800a602:	6839      	ldr	r1, [r7, #0]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	4798      	blx	r3
 800a608:	4603      	mov	r3, r0
 800a60a:	73fb      	strb	r3, [r7, #15]
      break;
 800a60c:	e13a      	b.n	800a884 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	785b      	ldrb	r3, [r3, #1]
 800a612:	2b03      	cmp	r3, #3
 800a614:	d007      	beq.n	800a626 <USBD_StdEPReq+0x5c>
 800a616:	2b03      	cmp	r3, #3
 800a618:	f300 8129 	bgt.w	800a86e <USBD_StdEPReq+0x2a4>
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d07f      	beq.n	800a720 <USBD_StdEPReq+0x156>
 800a620:	2b01      	cmp	r3, #1
 800a622:	d03c      	beq.n	800a69e <USBD_StdEPReq+0xd4>
 800a624:	e123      	b.n	800a86e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	2b02      	cmp	r3, #2
 800a630:	d002      	beq.n	800a638 <USBD_StdEPReq+0x6e>
 800a632:	2b03      	cmp	r3, #3
 800a634:	d016      	beq.n	800a664 <USBD_StdEPReq+0x9a>
 800a636:	e02c      	b.n	800a692 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a638:	7bbb      	ldrb	r3, [r7, #14]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d00d      	beq.n	800a65a <USBD_StdEPReq+0x90>
 800a63e:	7bbb      	ldrb	r3, [r7, #14]
 800a640:	2b80      	cmp	r3, #128	; 0x80
 800a642:	d00a      	beq.n	800a65a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a644:	7bbb      	ldrb	r3, [r7, #14]
 800a646:	4619      	mov	r1, r3
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f001 f9d1 	bl	800b9f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a64e:	2180      	movs	r1, #128	; 0x80
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f001 f9cd 	bl	800b9f0 <USBD_LL_StallEP>
 800a656:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a658:	e020      	b.n	800a69c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800a65a:	6839      	ldr	r1, [r7, #0]
 800a65c:	6878      	ldr	r0, [r7, #4]
 800a65e:	f000 fc6f 	bl	800af40 <USBD_CtlError>
              break;
 800a662:	e01b      	b.n	800a69c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	885b      	ldrh	r3, [r3, #2]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d10e      	bne.n	800a68a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a66c:	7bbb      	ldrb	r3, [r7, #14]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d00b      	beq.n	800a68a <USBD_StdEPReq+0xc0>
 800a672:	7bbb      	ldrb	r3, [r7, #14]
 800a674:	2b80      	cmp	r3, #128	; 0x80
 800a676:	d008      	beq.n	800a68a <USBD_StdEPReq+0xc0>
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	88db      	ldrh	r3, [r3, #6]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d104      	bne.n	800a68a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a680:	7bbb      	ldrb	r3, [r7, #14]
 800a682:	4619      	mov	r1, r3
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 f9b3 	bl	800b9f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fd23 	bl	800b0d6 <USBD_CtlSendStatus>

              break;
 800a690:	e004      	b.n	800a69c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800a692:	6839      	ldr	r1, [r7, #0]
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 fc53 	bl	800af40 <USBD_CtlError>
              break;
 800a69a:	bf00      	nop
          }
          break;
 800a69c:	e0ec      	b.n	800a878 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a4:	b2db      	uxtb	r3, r3
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d002      	beq.n	800a6b0 <USBD_StdEPReq+0xe6>
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d016      	beq.n	800a6dc <USBD_StdEPReq+0x112>
 800a6ae:	e030      	b.n	800a712 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00d      	beq.n	800a6d2 <USBD_StdEPReq+0x108>
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	2b80      	cmp	r3, #128	; 0x80
 800a6ba:	d00a      	beq.n	800a6d2 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6bc:	7bbb      	ldrb	r3, [r7, #14]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 f995 	bl	800b9f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6c6:	2180      	movs	r1, #128	; 0x80
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f001 f991 	bl	800b9f0 <USBD_LL_StallEP>
 800a6ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a6d0:	e025      	b.n	800a71e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800a6d2:	6839      	ldr	r1, [r7, #0]
 800a6d4:	6878      	ldr	r0, [r7, #4]
 800a6d6:	f000 fc33 	bl	800af40 <USBD_CtlError>
              break;
 800a6da:	e020      	b.n	800a71e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a6dc:	683b      	ldr	r3, [r7, #0]
 800a6de:	885b      	ldrh	r3, [r3, #2]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d11b      	bne.n	800a71c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a6e4:	7bbb      	ldrb	r3, [r7, #14]
 800a6e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d004      	beq.n	800a6f8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6ee:	7bbb      	ldrb	r3, [r7, #14]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f001 f9b2 	bl	800ba5c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fcec 	bl	800b0d6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a704:	689b      	ldr	r3, [r3, #8]
 800a706:	6839      	ldr	r1, [r7, #0]
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	4798      	blx	r3
 800a70c:	4603      	mov	r3, r0
 800a70e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800a710:	e004      	b.n	800a71c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800a712:	6839      	ldr	r1, [r7, #0]
 800a714:	6878      	ldr	r0, [r7, #4]
 800a716:	f000 fc13 	bl	800af40 <USBD_CtlError>
              break;
 800a71a:	e000      	b.n	800a71e <USBD_StdEPReq+0x154>
              break;
 800a71c:	bf00      	nop
          }
          break;
 800a71e:	e0ab      	b.n	800a878 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a726:	b2db      	uxtb	r3, r3
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d002      	beq.n	800a732 <USBD_StdEPReq+0x168>
 800a72c:	2b03      	cmp	r3, #3
 800a72e:	d032      	beq.n	800a796 <USBD_StdEPReq+0x1cc>
 800a730:	e097      	b.n	800a862 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a732:	7bbb      	ldrb	r3, [r7, #14]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d007      	beq.n	800a748 <USBD_StdEPReq+0x17e>
 800a738:	7bbb      	ldrb	r3, [r7, #14]
 800a73a:	2b80      	cmp	r3, #128	; 0x80
 800a73c:	d004      	beq.n	800a748 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800a73e:	6839      	ldr	r1, [r7, #0]
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fbfd 	bl	800af40 <USBD_CtlError>
                break;
 800a746:	e091      	b.n	800a86c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	da0b      	bge.n	800a768 <USBD_StdEPReq+0x19e>
 800a750:	7bbb      	ldrb	r3, [r7, #14]
 800a752:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a756:	4613      	mov	r3, r2
 800a758:	009b      	lsls	r3, r3, #2
 800a75a:	4413      	add	r3, r2
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	3310      	adds	r3, #16
 800a760:	687a      	ldr	r2, [r7, #4]
 800a762:	4413      	add	r3, r2
 800a764:	3304      	adds	r3, #4
 800a766:	e00b      	b.n	800a780 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a768:	7bbb      	ldrb	r3, [r7, #14]
 800a76a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a76e:	4613      	mov	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	4413      	add	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	4413      	add	r3, r2
 800a77e:	3304      	adds	r3, #4
 800a780:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	2200      	movs	r2, #0
 800a786:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a788:	68bb      	ldr	r3, [r7, #8]
 800a78a:	2202      	movs	r2, #2
 800a78c:	4619      	mov	r1, r3
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f000 fc47 	bl	800b022 <USBD_CtlSendData>
              break;
 800a794:	e06a      	b.n	800a86c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a796:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	da11      	bge.n	800a7c2 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a79e:	7bbb      	ldrb	r3, [r7, #14]
 800a7a0:	f003 020f 	and.w	r2, r3, #15
 800a7a4:	6879      	ldr	r1, [r7, #4]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	009b      	lsls	r3, r3, #2
 800a7aa:	4413      	add	r3, r2
 800a7ac:	009b      	lsls	r3, r3, #2
 800a7ae:	440b      	add	r3, r1
 800a7b0:	3324      	adds	r3, #36	; 0x24
 800a7b2:	881b      	ldrh	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d117      	bne.n	800a7e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a7b8:	6839      	ldr	r1, [r7, #0]
 800a7ba:	6878      	ldr	r0, [r7, #4]
 800a7bc:	f000 fbc0 	bl	800af40 <USBD_CtlError>
                  break;
 800a7c0:	e054      	b.n	800a86c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7c2:	7bbb      	ldrb	r3, [r7, #14]
 800a7c4:	f003 020f 	and.w	r2, r3, #15
 800a7c8:	6879      	ldr	r1, [r7, #4]
 800a7ca:	4613      	mov	r3, r2
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	4413      	add	r3, r2
 800a7d0:	009b      	lsls	r3, r3, #2
 800a7d2:	440b      	add	r3, r1
 800a7d4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7d8:	881b      	ldrh	r3, [r3, #0]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d104      	bne.n	800a7e8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800a7de:	6839      	ldr	r1, [r7, #0]
 800a7e0:	6878      	ldr	r0, [r7, #4]
 800a7e2:	f000 fbad 	bl	800af40 <USBD_CtlError>
                  break;
 800a7e6:	e041      	b.n	800a86c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	da0b      	bge.n	800a808 <USBD_StdEPReq+0x23e>
 800a7f0:	7bbb      	ldrb	r3, [r7, #14]
 800a7f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4413      	add	r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	3310      	adds	r3, #16
 800a800:	687a      	ldr	r2, [r7, #4]
 800a802:	4413      	add	r3, r2
 800a804:	3304      	adds	r3, #4
 800a806:	e00b      	b.n	800a820 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a80e:	4613      	mov	r3, r2
 800a810:	009b      	lsls	r3, r3, #2
 800a812:	4413      	add	r3, r2
 800a814:	009b      	lsls	r3, r3, #2
 800a816:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	4413      	add	r3, r2
 800a81e:	3304      	adds	r3, #4
 800a820:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a822:	7bbb      	ldrb	r3, [r7, #14]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d002      	beq.n	800a82e <USBD_StdEPReq+0x264>
 800a828:	7bbb      	ldrb	r3, [r7, #14]
 800a82a:	2b80      	cmp	r3, #128	; 0x80
 800a82c:	d103      	bne.n	800a836 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800a82e:	68bb      	ldr	r3, [r7, #8]
 800a830:	2200      	movs	r2, #0
 800a832:	601a      	str	r2, [r3, #0]
 800a834:	e00e      	b.n	800a854 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a836:	7bbb      	ldrb	r3, [r7, #14]
 800a838:	4619      	mov	r1, r3
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 f944 	bl	800bac8 <USBD_LL_IsStallEP>
 800a840:	4603      	mov	r3, r0
 800a842:	2b00      	cmp	r3, #0
 800a844:	d003      	beq.n	800a84e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2201      	movs	r2, #1
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	e002      	b.n	800a854 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	2200      	movs	r2, #0
 800a852:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2202      	movs	r2, #2
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fbe1 	bl	800b022 <USBD_CtlSendData>
              break;
 800a860:	e004      	b.n	800a86c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fb6b 	bl	800af40 <USBD_CtlError>
              break;
 800a86a:	bf00      	nop
          }
          break;
 800a86c:	e004      	b.n	800a878 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fb65 	bl	800af40 <USBD_CtlError>
          break;
 800a876:	bf00      	nop
      }
      break;
 800a878:	e004      	b.n	800a884 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800a87a:	6839      	ldr	r1, [r7, #0]
 800a87c:	6878      	ldr	r0, [r7, #4]
 800a87e:	f000 fb5f 	bl	800af40 <USBD_CtlError>
      break;
 800a882:	bf00      	nop
  }

  return ret;
 800a884:	7bfb      	ldrb	r3, [r7, #15]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3710      	adds	r7, #16
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
	...

0800a890 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b084      	sub	sp, #16
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a89a:	2300      	movs	r3, #0
 800a89c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	885b      	ldrh	r3, [r3, #2]
 800a8aa:	0a1b      	lsrs	r3, r3, #8
 800a8ac:	b29b      	uxth	r3, r3
 800a8ae:	3b01      	subs	r3, #1
 800a8b0:	2b0e      	cmp	r3, #14
 800a8b2:	f200 8152 	bhi.w	800ab5a <USBD_GetDescriptor+0x2ca>
 800a8b6:	a201      	add	r2, pc, #4	; (adr r2, 800a8bc <USBD_GetDescriptor+0x2c>)
 800a8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8bc:	0800a92d 	.word	0x0800a92d
 800a8c0:	0800a945 	.word	0x0800a945
 800a8c4:	0800a985 	.word	0x0800a985
 800a8c8:	0800ab5b 	.word	0x0800ab5b
 800a8cc:	0800ab5b 	.word	0x0800ab5b
 800a8d0:	0800aafb 	.word	0x0800aafb
 800a8d4:	0800ab27 	.word	0x0800ab27
 800a8d8:	0800ab5b 	.word	0x0800ab5b
 800a8dc:	0800ab5b 	.word	0x0800ab5b
 800a8e0:	0800ab5b 	.word	0x0800ab5b
 800a8e4:	0800ab5b 	.word	0x0800ab5b
 800a8e8:	0800ab5b 	.word	0x0800ab5b
 800a8ec:	0800ab5b 	.word	0x0800ab5b
 800a8f0:	0800ab5b 	.word	0x0800ab5b
 800a8f4:	0800a8f9 	.word	0x0800a8f9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8fe:	69db      	ldr	r3, [r3, #28]
 800a900:	2b00      	cmp	r3, #0
 800a902:	d00b      	beq.n	800a91c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	7c12      	ldrb	r2, [r2, #16]
 800a910:	f107 0108 	add.w	r1, r7, #8
 800a914:	4610      	mov	r0, r2
 800a916:	4798      	blx	r3
 800a918:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a91a:	e126      	b.n	800ab6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6878      	ldr	r0, [r7, #4]
 800a920:	f000 fb0e 	bl	800af40 <USBD_CtlError>
        err++;
 800a924:	7afb      	ldrb	r3, [r7, #11]
 800a926:	3301      	adds	r3, #1
 800a928:	72fb      	strb	r3, [r7, #11]
      break;
 800a92a:	e11e      	b.n	800ab6a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	7c12      	ldrb	r2, [r2, #16]
 800a938:	f107 0108 	add.w	r1, r7, #8
 800a93c:	4610      	mov	r0, r2
 800a93e:	4798      	blx	r3
 800a940:	60f8      	str	r0, [r7, #12]
      break;
 800a942:	e112      	b.n	800ab6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	7c1b      	ldrb	r3, [r3, #16]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10d      	bne.n	800a968 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a954:	f107 0208 	add.w	r2, r7, #8
 800a958:	4610      	mov	r0, r2
 800a95a:	4798      	blx	r3
 800a95c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3301      	adds	r3, #1
 800a962:	2202      	movs	r2, #2
 800a964:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a966:	e100      	b.n	800ab6a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a96e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a970:	f107 0208 	add.w	r2, r7, #8
 800a974:	4610      	mov	r0, r2
 800a976:	4798      	blx	r3
 800a978:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3301      	adds	r3, #1
 800a97e:	2202      	movs	r2, #2
 800a980:	701a      	strb	r2, [r3, #0]
      break;
 800a982:	e0f2      	b.n	800ab6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a984:	683b      	ldr	r3, [r7, #0]
 800a986:	885b      	ldrh	r3, [r3, #2]
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	2b05      	cmp	r3, #5
 800a98c:	f200 80ac 	bhi.w	800aae8 <USBD_GetDescriptor+0x258>
 800a990:	a201      	add	r2, pc, #4	; (adr r2, 800a998 <USBD_GetDescriptor+0x108>)
 800a992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a996:	bf00      	nop
 800a998:	0800a9b1 	.word	0x0800a9b1
 800a99c:	0800a9e5 	.word	0x0800a9e5
 800a9a0:	0800aa19 	.word	0x0800aa19
 800a9a4:	0800aa4d 	.word	0x0800aa4d
 800a9a8:	0800aa81 	.word	0x0800aa81
 800a9ac:	0800aab5 	.word	0x0800aab5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9b6:	685b      	ldr	r3, [r3, #4]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d00b      	beq.n	800a9d4 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c2:	685b      	ldr	r3, [r3, #4]
 800a9c4:	687a      	ldr	r2, [r7, #4]
 800a9c6:	7c12      	ldrb	r2, [r2, #16]
 800a9c8:	f107 0108 	add.w	r1, r7, #8
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	4798      	blx	r3
 800a9d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a9d2:	e091      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800a9d4:	6839      	ldr	r1, [r7, #0]
 800a9d6:	6878      	ldr	r0, [r7, #4]
 800a9d8:	f000 fab2 	bl	800af40 <USBD_CtlError>
            err++;
 800a9dc:	7afb      	ldrb	r3, [r7, #11]
 800a9de:	3301      	adds	r3, #1
 800a9e0:	72fb      	strb	r3, [r7, #11]
          break;
 800a9e2:	e089      	b.n	800aaf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ea:	689b      	ldr	r3, [r3, #8]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d00b      	beq.n	800aa08 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9f6:	689b      	ldr	r3, [r3, #8]
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	7c12      	ldrb	r2, [r2, #16]
 800a9fc:	f107 0108 	add.w	r1, r7, #8
 800aa00:	4610      	mov	r0, r2
 800aa02:	4798      	blx	r3
 800aa04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa06:	e077      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fa98 	bl	800af40 <USBD_CtlError>
            err++;
 800aa10:	7afb      	ldrb	r3, [r7, #11]
 800aa12:	3301      	adds	r3, #1
 800aa14:	72fb      	strb	r3, [r7, #11]
          break;
 800aa16:	e06f      	b.n	800aaf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d00b      	beq.n	800aa3c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2a:	68db      	ldr	r3, [r3, #12]
 800aa2c:	687a      	ldr	r2, [r7, #4]
 800aa2e:	7c12      	ldrb	r2, [r2, #16]
 800aa30:	f107 0108 	add.w	r1, r7, #8
 800aa34:	4610      	mov	r0, r2
 800aa36:	4798      	blx	r3
 800aa38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa3a:	e05d      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa3c:	6839      	ldr	r1, [r7, #0]
 800aa3e:	6878      	ldr	r0, [r7, #4]
 800aa40:	f000 fa7e 	bl	800af40 <USBD_CtlError>
            err++;
 800aa44:	7afb      	ldrb	r3, [r7, #11]
 800aa46:	3301      	adds	r3, #1
 800aa48:	72fb      	strb	r3, [r7, #11]
          break;
 800aa4a:	e055      	b.n	800aaf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa52:	691b      	ldr	r3, [r3, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00b      	beq.n	800aa70 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa5e:	691b      	ldr	r3, [r3, #16]
 800aa60:	687a      	ldr	r2, [r7, #4]
 800aa62:	7c12      	ldrb	r2, [r2, #16]
 800aa64:	f107 0108 	add.w	r1, r7, #8
 800aa68:	4610      	mov	r0, r2
 800aa6a:	4798      	blx	r3
 800aa6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aa6e:	e043      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aa70:	6839      	ldr	r1, [r7, #0]
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f000 fa64 	bl	800af40 <USBD_CtlError>
            err++;
 800aa78:	7afb      	ldrb	r3, [r7, #11]
 800aa7a:	3301      	adds	r3, #1
 800aa7c:	72fb      	strb	r3, [r7, #11]
          break;
 800aa7e:	e03b      	b.n	800aaf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa86:	695b      	ldr	r3, [r3, #20]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00b      	beq.n	800aaa4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa92:	695b      	ldr	r3, [r3, #20]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	7c12      	ldrb	r2, [r2, #16]
 800aa98:	f107 0108 	add.w	r1, r7, #8
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	4798      	blx	r3
 800aaa0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aaa2:	e029      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aaa4:	6839      	ldr	r1, [r7, #0]
 800aaa6:	6878      	ldr	r0, [r7, #4]
 800aaa8:	f000 fa4a 	bl	800af40 <USBD_CtlError>
            err++;
 800aaac:	7afb      	ldrb	r3, [r7, #11]
 800aaae:	3301      	adds	r3, #1
 800aab0:	72fb      	strb	r3, [r7, #11]
          break;
 800aab2:	e021      	b.n	800aaf8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaba:	699b      	ldr	r3, [r3, #24]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00b      	beq.n	800aad8 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aac6:	699b      	ldr	r3, [r3, #24]
 800aac8:	687a      	ldr	r2, [r7, #4]
 800aaca:	7c12      	ldrb	r2, [r2, #16]
 800aacc:	f107 0108 	add.w	r1, r7, #8
 800aad0:	4610      	mov	r0, r2
 800aad2:	4798      	blx	r3
 800aad4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800aad6:	e00f      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800aad8:	6839      	ldr	r1, [r7, #0]
 800aada:	6878      	ldr	r0, [r7, #4]
 800aadc:	f000 fa30 	bl	800af40 <USBD_CtlError>
            err++;
 800aae0:	7afb      	ldrb	r3, [r7, #11]
 800aae2:	3301      	adds	r3, #1
 800aae4:	72fb      	strb	r3, [r7, #11]
          break;
 800aae6:	e007      	b.n	800aaf8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800aae8:	6839      	ldr	r1, [r7, #0]
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fa28 	bl	800af40 <USBD_CtlError>
          err++;
 800aaf0:	7afb      	ldrb	r3, [r7, #11]
 800aaf2:	3301      	adds	r3, #1
 800aaf4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800aaf6:	bf00      	nop
      }
      break;
 800aaf8:	e037      	b.n	800ab6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	7c1b      	ldrb	r3, [r3, #16]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d109      	bne.n	800ab16 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab0a:	f107 0208 	add.w	r2, r7, #8
 800ab0e:	4610      	mov	r0, r2
 800ab10:	4798      	blx	r3
 800ab12:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab14:	e029      	b.n	800ab6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab16:	6839      	ldr	r1, [r7, #0]
 800ab18:	6878      	ldr	r0, [r7, #4]
 800ab1a:	f000 fa11 	bl	800af40 <USBD_CtlError>
        err++;
 800ab1e:	7afb      	ldrb	r3, [r7, #11]
 800ab20:	3301      	adds	r3, #1
 800ab22:	72fb      	strb	r3, [r7, #11]
      break;
 800ab24:	e021      	b.n	800ab6a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	7c1b      	ldrb	r3, [r3, #16]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d10d      	bne.n	800ab4a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ab34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab36:	f107 0208 	add.w	r2, r7, #8
 800ab3a:	4610      	mov	r0, r2
 800ab3c:	4798      	blx	r3
 800ab3e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3301      	adds	r3, #1
 800ab44:	2207      	movs	r2, #7
 800ab46:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ab48:	e00f      	b.n	800ab6a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800ab4a:	6839      	ldr	r1, [r7, #0]
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 f9f7 	bl	800af40 <USBD_CtlError>
        err++;
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	3301      	adds	r3, #1
 800ab56:	72fb      	strb	r3, [r7, #11]
      break;
 800ab58:	e007      	b.n	800ab6a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800ab5a:	6839      	ldr	r1, [r7, #0]
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 f9ef 	bl	800af40 <USBD_CtlError>
      err++;
 800ab62:	7afb      	ldrb	r3, [r7, #11]
 800ab64:	3301      	adds	r3, #1
 800ab66:	72fb      	strb	r3, [r7, #11]
      break;
 800ab68:	bf00      	nop
  }

  if (err != 0U)
 800ab6a:	7afb      	ldrb	r3, [r7, #11]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d11e      	bne.n	800abae <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	88db      	ldrh	r3, [r3, #6]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d016      	beq.n	800aba6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800ab78:	893b      	ldrh	r3, [r7, #8]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00e      	beq.n	800ab9c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	88da      	ldrh	r2, [r3, #6]
 800ab82:	893b      	ldrh	r3, [r7, #8]
 800ab84:	4293      	cmp	r3, r2
 800ab86:	bf28      	it	cs
 800ab88:	4613      	movcs	r3, r2
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab8e:	893b      	ldrh	r3, [r7, #8]
 800ab90:	461a      	mov	r2, r3
 800ab92:	68f9      	ldr	r1, [r7, #12]
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f000 fa44 	bl	800b022 <USBD_CtlSendData>
 800ab9a:	e009      	b.n	800abb0 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ab9c:	6839      	ldr	r1, [r7, #0]
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f9ce 	bl	800af40 <USBD_CtlError>
 800aba4:	e004      	b.n	800abb0 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 fa95 	bl	800b0d6 <USBD_CtlSendStatus>
 800abac:	e000      	b.n	800abb0 <USBD_GetDescriptor+0x320>
    return;
 800abae:	bf00      	nop
  }
}
 800abb0:	3710      	adds	r7, #16
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop

0800abb8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b084      	sub	sp, #16
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800abc2:	683b      	ldr	r3, [r7, #0]
 800abc4:	889b      	ldrh	r3, [r3, #4]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d131      	bne.n	800ac2e <USBD_SetAddress+0x76>
 800abca:	683b      	ldr	r3, [r7, #0]
 800abcc:	88db      	ldrh	r3, [r3, #6]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d12d      	bne.n	800ac2e <USBD_SetAddress+0x76>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	885b      	ldrh	r3, [r3, #2]
 800abd6:	2b7f      	cmp	r3, #127	; 0x7f
 800abd8:	d829      	bhi.n	800ac2e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	885b      	ldrh	r3, [r3, #2]
 800abde:	b2db      	uxtb	r3, r3
 800abe0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abec:	b2db      	uxtb	r3, r3
 800abee:	2b03      	cmp	r3, #3
 800abf0:	d104      	bne.n	800abfc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800abf2:	6839      	ldr	r1, [r7, #0]
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f9a3 	bl	800af40 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abfa:	e01d      	b.n	800ac38 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	7bfa      	ldrb	r2, [r7, #15]
 800ac00:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ac04:	7bfb      	ldrb	r3, [r7, #15]
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f000 ff89 	bl	800bb20 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ac0e:	6878      	ldr	r0, [r7, #4]
 800ac10:	f000 fa61 	bl	800b0d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ac14:	7bfb      	ldrb	r3, [r7, #15]
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d004      	beq.n	800ac24 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2202      	movs	r2, #2
 800ac1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac22:	e009      	b.n	800ac38 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2201      	movs	r2, #1
 800ac28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac2c:	e004      	b.n	800ac38 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 f985 	bl	800af40 <USBD_CtlError>
  }
}
 800ac36:	bf00      	nop
 800ac38:	bf00      	nop
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}

0800ac40 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac40:	b580      	push	{r7, lr}
 800ac42:	b084      	sub	sp, #16
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
 800ac48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	885b      	ldrh	r3, [r3, #2]
 800ac52:	b2da      	uxtb	r2, r3
 800ac54:	4b4c      	ldr	r3, [pc, #304]	; (800ad88 <USBD_SetConfig+0x148>)
 800ac56:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ac58:	4b4b      	ldr	r3, [pc, #300]	; (800ad88 <USBD_SetConfig+0x148>)
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	2b01      	cmp	r3, #1
 800ac5e:	d905      	bls.n	800ac6c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac60:	6839      	ldr	r1, [r7, #0]
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 f96c 	bl	800af40 <USBD_CtlError>
    return USBD_FAIL;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	e088      	b.n	800ad7e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac72:	b2db      	uxtb	r3, r3
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d002      	beq.n	800ac7e <USBD_SetConfig+0x3e>
 800ac78:	2b03      	cmp	r3, #3
 800ac7a:	d025      	beq.n	800acc8 <USBD_SetConfig+0x88>
 800ac7c:	e071      	b.n	800ad62 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ac7e:	4b42      	ldr	r3, [pc, #264]	; (800ad88 <USBD_SetConfig+0x148>)
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d01c      	beq.n	800acc0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800ac86:	4b40      	ldr	r3, [pc, #256]	; (800ad88 <USBD_SetConfig+0x148>)
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac90:	4b3d      	ldr	r3, [pc, #244]	; (800ad88 <USBD_SetConfig+0x148>)
 800ac92:	781b      	ldrb	r3, [r3, #0]
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff f91e 	bl	8009ed8 <USBD_SetClassConfig>
 800ac9c:	4603      	mov	r3, r0
 800ac9e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800aca0:	7bfb      	ldrb	r3, [r7, #15]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d004      	beq.n	800acb0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f000 f949 	bl	800af40 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acae:	e065      	b.n	800ad7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f000 fa10 	bl	800b0d6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2203      	movs	r2, #3
 800acba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800acbe:	e05d      	b.n	800ad7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f000 fa08 	bl	800b0d6 <USBD_CtlSendStatus>
      break;
 800acc6:	e059      	b.n	800ad7c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800acc8:	4b2f      	ldr	r3, [pc, #188]	; (800ad88 <USBD_SetConfig+0x148>)
 800acca:	781b      	ldrb	r3, [r3, #0]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d112      	bne.n	800acf6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2202      	movs	r2, #2
 800acd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800acd8:	4b2b      	ldr	r3, [pc, #172]	; (800ad88 <USBD_SetConfig+0x148>)
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	461a      	mov	r2, r3
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ace2:	4b29      	ldr	r3, [pc, #164]	; (800ad88 <USBD_SetConfig+0x148>)
 800ace4:	781b      	ldrb	r3, [r3, #0]
 800ace6:	4619      	mov	r1, r3
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7ff f911 	bl	8009f10 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 f9f1 	bl	800b0d6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800acf4:	e042      	b.n	800ad7c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800acf6:	4b24      	ldr	r3, [pc, #144]	; (800ad88 <USBD_SetConfig+0x148>)
 800acf8:	781b      	ldrb	r3, [r3, #0]
 800acfa:	461a      	mov	r2, r3
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d02a      	beq.n	800ad5a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	685b      	ldr	r3, [r3, #4]
 800ad08:	b2db      	uxtb	r3, r3
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f7ff f8ff 	bl	8009f10 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ad12:	4b1d      	ldr	r3, [pc, #116]	; (800ad88 <USBD_SetConfig+0x148>)
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	461a      	mov	r2, r3
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ad1c:	4b1a      	ldr	r3, [pc, #104]	; (800ad88 <USBD_SetConfig+0x148>)
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	4619      	mov	r1, r3
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f7ff f8d8 	bl	8009ed8 <USBD_SetClassConfig>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ad2c:	7bfb      	ldrb	r3, [r7, #15]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00f      	beq.n	800ad52 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800ad32:	6839      	ldr	r1, [r7, #0]
 800ad34:	6878      	ldr	r0, [r7, #4]
 800ad36:	f000 f903 	bl	800af40 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	685b      	ldr	r3, [r3, #4]
 800ad3e:	b2db      	uxtb	r3, r3
 800ad40:	4619      	mov	r1, r3
 800ad42:	6878      	ldr	r0, [r7, #4]
 800ad44:	f7ff f8e4 	bl	8009f10 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	2202      	movs	r2, #2
 800ad4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ad50:	e014      	b.n	800ad7c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f9bf 	bl	800b0d6 <USBD_CtlSendStatus>
      break;
 800ad58:	e010      	b.n	800ad7c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f9bb 	bl	800b0d6 <USBD_CtlSendStatus>
      break;
 800ad60:	e00c      	b.n	800ad7c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ad62:	6839      	ldr	r1, [r7, #0]
 800ad64:	6878      	ldr	r0, [r7, #4]
 800ad66:	f000 f8eb 	bl	800af40 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad6a:	4b07      	ldr	r3, [pc, #28]	; (800ad88 <USBD_SetConfig+0x148>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f7ff f8cd 	bl	8009f10 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ad76:	2303      	movs	r3, #3
 800ad78:	73fb      	strb	r3, [r7, #15]
      break;
 800ad7a:	bf00      	nop
  }

  return ret;
 800ad7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	3710      	adds	r7, #16
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20002a8c 	.word	0x20002a8c

0800ad8c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	88db      	ldrh	r3, [r3, #6]
 800ad9a:	2b01      	cmp	r3, #1
 800ad9c:	d004      	beq.n	800ada8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad9e:	6839      	ldr	r1, [r7, #0]
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f000 f8cd 	bl	800af40 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ada6:	e023      	b.n	800adf0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	dc02      	bgt.n	800adba <USBD_GetConfig+0x2e>
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	dc03      	bgt.n	800adc0 <USBD_GetConfig+0x34>
 800adb8:	e015      	b.n	800ade6 <USBD_GetConfig+0x5a>
 800adba:	2b03      	cmp	r3, #3
 800adbc:	d00b      	beq.n	800add6 <USBD_GetConfig+0x4a>
 800adbe:	e012      	b.n	800ade6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	2200      	movs	r2, #0
 800adc4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	3308      	adds	r3, #8
 800adca:	2201      	movs	r2, #1
 800adcc:	4619      	mov	r1, r3
 800adce:	6878      	ldr	r0, [r7, #4]
 800add0:	f000 f927 	bl	800b022 <USBD_CtlSendData>
        break;
 800add4:	e00c      	b.n	800adf0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	3304      	adds	r3, #4
 800adda:	2201      	movs	r2, #1
 800addc:	4619      	mov	r1, r3
 800adde:	6878      	ldr	r0, [r7, #4]
 800ade0:	f000 f91f 	bl	800b022 <USBD_CtlSendData>
        break;
 800ade4:	e004      	b.n	800adf0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ade6:	6839      	ldr	r1, [r7, #0]
 800ade8:	6878      	ldr	r0, [r7, #4]
 800adea:	f000 f8a9 	bl	800af40 <USBD_CtlError>
        break;
 800adee:	bf00      	nop
}
 800adf0:	bf00      	nop
 800adf2:	3708      	adds	r7, #8
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b082      	sub	sp, #8
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae08:	b2db      	uxtb	r3, r3
 800ae0a:	3b01      	subs	r3, #1
 800ae0c:	2b02      	cmp	r3, #2
 800ae0e:	d81e      	bhi.n	800ae4e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	88db      	ldrh	r3, [r3, #6]
 800ae14:	2b02      	cmp	r3, #2
 800ae16:	d004      	beq.n	800ae22 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ae18:	6839      	ldr	r1, [r7, #0]
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 f890 	bl	800af40 <USBD_CtlError>
        break;
 800ae20:	e01a      	b.n	800ae58 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2201      	movs	r2, #1
 800ae26:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d005      	beq.n	800ae3e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	68db      	ldr	r3, [r3, #12]
 800ae36:	f043 0202 	orr.w	r2, r3, #2
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	330c      	adds	r3, #12
 800ae42:	2202      	movs	r2, #2
 800ae44:	4619      	mov	r1, r3
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f8eb 	bl	800b022 <USBD_CtlSendData>
      break;
 800ae4c:	e004      	b.n	800ae58 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ae4e:	6839      	ldr	r1, [r7, #0]
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f000 f875 	bl	800af40 <USBD_CtlError>
      break;
 800ae56:	bf00      	nop
  }
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b082      	sub	sp, #8
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	885b      	ldrh	r3, [r3, #2]
 800ae6e:	2b01      	cmp	r3, #1
 800ae70:	d106      	bne.n	800ae80 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 f92b 	bl	800b0d6 <USBD_CtlSendStatus>
  }
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae98:	b2db      	uxtb	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	d80b      	bhi.n	800aeb8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	885b      	ldrh	r3, [r3, #2]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d10c      	bne.n	800aec2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f000 f910 	bl	800b0d6 <USBD_CtlSendStatus>
      }
      break;
 800aeb6:	e004      	b.n	800aec2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800aeb8:	6839      	ldr	r1, [r7, #0]
 800aeba:	6878      	ldr	r0, [r7, #4]
 800aebc:	f000 f840 	bl	800af40 <USBD_CtlError>
      break;
 800aec0:	e000      	b.n	800aec4 <USBD_ClrFeature+0x3c>
      break;
 800aec2:	bf00      	nop
  }
}
 800aec4:	bf00      	nop
 800aec6:	3708      	adds	r7, #8
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}

0800aecc <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b084      	sub	sp, #16
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
 800aed4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	781a      	ldrb	r2, [r3, #0]
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	3301      	adds	r3, #1
 800aee6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	781a      	ldrb	r2, [r3, #0]
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	3301      	adds	r3, #1
 800aef4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800aef6:	68f8      	ldr	r0, [r7, #12]
 800aef8:	f7ff fa91 	bl	800a41e <SWAPBYTE>
 800aefc:	4603      	mov	r3, r0
 800aefe:	461a      	mov	r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	3301      	adds	r3, #1
 800af08:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	3301      	adds	r3, #1
 800af0e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800af10:	68f8      	ldr	r0, [r7, #12]
 800af12:	f7ff fa84 	bl	800a41e <SWAPBYTE>
 800af16:	4603      	mov	r3, r0
 800af18:	461a      	mov	r2, r3
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	3301      	adds	r3, #1
 800af22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	3301      	adds	r3, #1
 800af28:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800af2a:	68f8      	ldr	r0, [r7, #12]
 800af2c:	f7ff fa77 	bl	800a41e <SWAPBYTE>
 800af30:	4603      	mov	r3, r0
 800af32:	461a      	mov	r2, r3
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	80da      	strh	r2, [r3, #6]
}
 800af38:	bf00      	nop
 800af3a:	3710      	adds	r7, #16
 800af3c:	46bd      	mov	sp, r7
 800af3e:	bd80      	pop	{r7, pc}

0800af40 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
 800af48:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800af4a:	2180      	movs	r1, #128	; 0x80
 800af4c:	6878      	ldr	r0, [r7, #4]
 800af4e:	f000 fd4f 	bl	800b9f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800af52:	2100      	movs	r1, #0
 800af54:	6878      	ldr	r0, [r7, #4]
 800af56:	f000 fd4b 	bl	800b9f0 <USBD_LL_StallEP>
}
 800af5a:	bf00      	nop
 800af5c:	3708      	adds	r7, #8
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b086      	sub	sp, #24
 800af66:	af00      	add	r7, sp, #0
 800af68:	60f8      	str	r0, [r7, #12]
 800af6a:	60b9      	str	r1, [r7, #8]
 800af6c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af6e:	2300      	movs	r3, #0
 800af70:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d036      	beq.n	800afe6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af7c:	6938      	ldr	r0, [r7, #16]
 800af7e:	f000 f836 	bl	800afee <USBD_GetLen>
 800af82:	4603      	mov	r3, r0
 800af84:	3301      	adds	r3, #1
 800af86:	b29b      	uxth	r3, r3
 800af88:	005b      	lsls	r3, r3, #1
 800af8a:	b29a      	uxth	r2, r3
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af90:	7dfb      	ldrb	r3, [r7, #23]
 800af92:	68ba      	ldr	r2, [r7, #8]
 800af94:	4413      	add	r3, r2
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	7812      	ldrb	r2, [r2, #0]
 800af9a:	701a      	strb	r2, [r3, #0]
  idx++;
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	3301      	adds	r3, #1
 800afa0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800afa2:	7dfb      	ldrb	r3, [r7, #23]
 800afa4:	68ba      	ldr	r2, [r7, #8]
 800afa6:	4413      	add	r3, r2
 800afa8:	2203      	movs	r2, #3
 800afaa:	701a      	strb	r2, [r3, #0]
  idx++;
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	3301      	adds	r3, #1
 800afb0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800afb2:	e013      	b.n	800afdc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800afb4:	7dfb      	ldrb	r3, [r7, #23]
 800afb6:	68ba      	ldr	r2, [r7, #8]
 800afb8:	4413      	add	r3, r2
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	7812      	ldrb	r2, [r2, #0]
 800afbe:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800afc0:	693b      	ldr	r3, [r7, #16]
 800afc2:	3301      	adds	r3, #1
 800afc4:	613b      	str	r3, [r7, #16]
    idx++;
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
 800afc8:	3301      	adds	r3, #1
 800afca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800afcc:	7dfb      	ldrb	r3, [r7, #23]
 800afce:	68ba      	ldr	r2, [r7, #8]
 800afd0:	4413      	add	r3, r2
 800afd2:	2200      	movs	r2, #0
 800afd4:	701a      	strb	r2, [r3, #0]
    idx++;
 800afd6:	7dfb      	ldrb	r3, [r7, #23]
 800afd8:	3301      	adds	r3, #1
 800afda:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	781b      	ldrb	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d1e7      	bne.n	800afb4 <USBD_GetString+0x52>
 800afe4:	e000      	b.n	800afe8 <USBD_GetString+0x86>
    return;
 800afe6:	bf00      	nop
  }
}
 800afe8:	3718      	adds	r7, #24
 800afea:	46bd      	mov	sp, r7
 800afec:	bd80      	pop	{r7, pc}

0800afee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800afee:	b480      	push	{r7}
 800aff0:	b085      	sub	sp, #20
 800aff2:	af00      	add	r7, sp, #0
 800aff4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800aff6:	2300      	movs	r3, #0
 800aff8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800affe:	e005      	b.n	800b00c <USBD_GetLen+0x1e>
  {
    len++;
 800b000:	7bfb      	ldrb	r3, [r7, #15]
 800b002:	3301      	adds	r3, #1
 800b004:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	3301      	adds	r3, #1
 800b00a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d1f5      	bne.n	800b000 <USBD_GetLen+0x12>
  }

  return len;
 800b014:	7bfb      	ldrb	r3, [r7, #15]
}
 800b016:	4618      	mov	r0, r3
 800b018:	3714      	adds	r7, #20
 800b01a:	46bd      	mov	sp, r7
 800b01c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b020:	4770      	bx	lr

0800b022 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b084      	sub	sp, #16
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2202      	movs	r2, #2
 800b032:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	687a      	ldr	r2, [r7, #4]
 800b03a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	687a      	ldr	r2, [r7, #4]
 800b040:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	2100      	movs	r1, #0
 800b048:	68f8      	ldr	r0, [r7, #12]
 800b04a:	f000 fd9f 	bl	800bb8c <USBD_LL_Transmit>

  return USBD_OK;
 800b04e:	2300      	movs	r3, #0
}
 800b050:	4618      	mov	r0, r3
 800b052:	3710      	adds	r7, #16
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}

0800b058 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b084      	sub	sp, #16
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	68ba      	ldr	r2, [r7, #8]
 800b068:	2100      	movs	r1, #0
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f000 fd8e 	bl	800bb8c <USBD_LL_Transmit>

  return USBD_OK;
 800b070:	2300      	movs	r3, #0
}
 800b072:	4618      	mov	r0, r3
 800b074:	3710      	adds	r7, #16
 800b076:	46bd      	mov	sp, r7
 800b078:	bd80      	pop	{r7, pc}

0800b07a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b07a:	b580      	push	{r7, lr}
 800b07c:	b084      	sub	sp, #16
 800b07e:	af00      	add	r7, sp, #0
 800b080:	60f8      	str	r0, [r7, #12]
 800b082:	60b9      	str	r1, [r7, #8]
 800b084:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	2203      	movs	r2, #3
 800b08a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	687a      	ldr	r2, [r7, #4]
 800b09a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	68ba      	ldr	r2, [r7, #8]
 800b0a2:	2100      	movs	r1, #0
 800b0a4:	68f8      	ldr	r0, [r7, #12]
 800b0a6:	f000 fda9 	bl	800bbfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	60f8      	str	r0, [r7, #12]
 800b0bc:	60b9      	str	r1, [r7, #8]
 800b0be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	2100      	movs	r1, #0
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f000 fd98 	bl	800bbfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0cc:	2300      	movs	r3, #0
}
 800b0ce:	4618      	mov	r0, r3
 800b0d0:	3710      	adds	r7, #16
 800b0d2:	46bd      	mov	sp, r7
 800b0d4:	bd80      	pop	{r7, pc}

0800b0d6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b0d6:	b580      	push	{r7, lr}
 800b0d8:	b082      	sub	sp, #8
 800b0da:	af00      	add	r7, sp, #0
 800b0dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2204      	movs	r2, #4
 800b0e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fd4d 	bl	800bb8c <USBD_LL_Transmit>

  return USBD_OK;
 800b0f2:	2300      	movs	r3, #0
}
 800b0f4:	4618      	mov	r0, r3
 800b0f6:	3708      	adds	r7, #8
 800b0f8:	46bd      	mov	sp, r7
 800b0fa:	bd80      	pop	{r7, pc}

0800b0fc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b082      	sub	sp, #8
 800b100:	af00      	add	r7, sp, #0
 800b102:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2205      	movs	r2, #5
 800b108:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b10c:	2300      	movs	r3, #0
 800b10e:	2200      	movs	r2, #0
 800b110:	2100      	movs	r1, #0
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 fd72 	bl	800bbfc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
	...

0800b124 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b128:	2200      	movs	r2, #0
 800b12a:	4912      	ldr	r1, [pc, #72]	; (800b174 <MX_USB_DEVICE_Init+0x50>)
 800b12c:	4812      	ldr	r0, [pc, #72]	; (800b178 <MX_USB_DEVICE_Init+0x54>)
 800b12e:	f7fe fe65 	bl	8009dfc <USBD_Init>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b138:	f7f6 fcf2 	bl	8001b20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b13c:	490f      	ldr	r1, [pc, #60]	; (800b17c <MX_USB_DEVICE_Init+0x58>)
 800b13e:	480e      	ldr	r0, [pc, #56]	; (800b178 <MX_USB_DEVICE_Init+0x54>)
 800b140:	f7fe fe8c 	bl	8009e5c <USBD_RegisterClass>
 800b144:	4603      	mov	r3, r0
 800b146:	2b00      	cmp	r3, #0
 800b148:	d001      	beq.n	800b14e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b14a:	f7f6 fce9 	bl	8001b20 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b14e:	490c      	ldr	r1, [pc, #48]	; (800b180 <MX_USB_DEVICE_Init+0x5c>)
 800b150:	4809      	ldr	r0, [pc, #36]	; (800b178 <MX_USB_DEVICE_Init+0x54>)
 800b152:	f7fe fddd 	bl	8009d10 <USBD_CDC_RegisterInterface>
 800b156:	4603      	mov	r3, r0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d001      	beq.n	800b160 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b15c:	f7f6 fce0 	bl	8001b20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b160:	4805      	ldr	r0, [pc, #20]	; (800b178 <MX_USB_DEVICE_Init+0x54>)
 800b162:	f7fe fea2 	bl	8009eaa <USBD_Start>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b16c:	f7f6 fcd8 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b170:	bf00      	nop
 800b172:	bd80      	pop	{r7, pc}
 800b174:	20000130 	.word	0x20000130
 800b178:	20002a90 	.word	0x20002a90
 800b17c:	20000018 	.word	0x20000018
 800b180:	2000011c 	.word	0x2000011c

0800b184 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b188:	2200      	movs	r2, #0
 800b18a:	4905      	ldr	r1, [pc, #20]	; (800b1a0 <CDC_Init_FS+0x1c>)
 800b18c:	4805      	ldr	r0, [pc, #20]	; (800b1a4 <CDC_Init_FS+0x20>)
 800b18e:	f7fe fdd4 	bl	8009d3a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b192:	4905      	ldr	r1, [pc, #20]	; (800b1a8 <CDC_Init_FS+0x24>)
 800b194:	4803      	ldr	r0, [pc, #12]	; (800b1a4 <CDC_Init_FS+0x20>)
 800b196:	f7fe fdee 	bl	8009d76 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b19a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	bd80      	pop	{r7, pc}
 800b1a0:	20003560 	.word	0x20003560
 800b1a4:	20002a90 	.word	0x20002a90
 800b1a8:	20002d60 	.word	0x20002d60

0800b1ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b1ac:	b480      	push	{r7}
 800b1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b1b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr

0800b1bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b083      	sub	sp, #12
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	6039      	str	r1, [r7, #0]
 800b1c6:	71fb      	strb	r3, [r7, #7]
 800b1c8:	4613      	mov	r3, r2
 800b1ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b1cc:	79fb      	ldrb	r3, [r7, #7]
 800b1ce:	2b23      	cmp	r3, #35	; 0x23
 800b1d0:	d84a      	bhi.n	800b268 <CDC_Control_FS+0xac>
 800b1d2:	a201      	add	r2, pc, #4	; (adr r2, 800b1d8 <CDC_Control_FS+0x1c>)
 800b1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1d8:	0800b269 	.word	0x0800b269
 800b1dc:	0800b269 	.word	0x0800b269
 800b1e0:	0800b269 	.word	0x0800b269
 800b1e4:	0800b269 	.word	0x0800b269
 800b1e8:	0800b269 	.word	0x0800b269
 800b1ec:	0800b269 	.word	0x0800b269
 800b1f0:	0800b269 	.word	0x0800b269
 800b1f4:	0800b269 	.word	0x0800b269
 800b1f8:	0800b269 	.word	0x0800b269
 800b1fc:	0800b269 	.word	0x0800b269
 800b200:	0800b269 	.word	0x0800b269
 800b204:	0800b269 	.word	0x0800b269
 800b208:	0800b269 	.word	0x0800b269
 800b20c:	0800b269 	.word	0x0800b269
 800b210:	0800b269 	.word	0x0800b269
 800b214:	0800b269 	.word	0x0800b269
 800b218:	0800b269 	.word	0x0800b269
 800b21c:	0800b269 	.word	0x0800b269
 800b220:	0800b269 	.word	0x0800b269
 800b224:	0800b269 	.word	0x0800b269
 800b228:	0800b269 	.word	0x0800b269
 800b22c:	0800b269 	.word	0x0800b269
 800b230:	0800b269 	.word	0x0800b269
 800b234:	0800b269 	.word	0x0800b269
 800b238:	0800b269 	.word	0x0800b269
 800b23c:	0800b269 	.word	0x0800b269
 800b240:	0800b269 	.word	0x0800b269
 800b244:	0800b269 	.word	0x0800b269
 800b248:	0800b269 	.word	0x0800b269
 800b24c:	0800b269 	.word	0x0800b269
 800b250:	0800b269 	.word	0x0800b269
 800b254:	0800b269 	.word	0x0800b269
 800b258:	0800b269 	.word	0x0800b269
 800b25c:	0800b269 	.word	0x0800b269
 800b260:	0800b269 	.word	0x0800b269
 800b264:	0800b269 	.word	0x0800b269
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b268:	bf00      	nop
  }

  return (USBD_OK);
 800b26a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b26c:	4618      	mov	r0, r3
 800b26e:	370c      	adds	r7, #12
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr

0800b278 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b082      	sub	sp, #8
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
 800b280:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b282:	6879      	ldr	r1, [r7, #4]
 800b284:	4805      	ldr	r0, [pc, #20]	; (800b29c <CDC_Receive_FS+0x24>)
 800b286:	f7fe fd76 	bl	8009d76 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b28a:	4804      	ldr	r0, [pc, #16]	; (800b29c <CDC_Receive_FS+0x24>)
 800b28c:	f7fe fd8c 	bl	8009da8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b290:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b292:	4618      	mov	r0, r3
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	20002a90 	.word	0x20002a90

0800b2a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b087      	sub	sp, #28
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	60f8      	str	r0, [r7, #12]
 800b2a8:	60b9      	str	r1, [r7, #8]
 800b2aa:	4613      	mov	r3, r2
 800b2ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b2b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
	...

0800b2c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2c4:	b480      	push	{r7}
 800b2c6:	b083      	sub	sp, #12
 800b2c8:	af00      	add	r7, sp, #0
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	6039      	str	r1, [r7, #0]
 800b2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b2d0:	683b      	ldr	r3, [r7, #0]
 800b2d2:	2212      	movs	r2, #18
 800b2d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b2d6:	4b03      	ldr	r3, [pc, #12]	; (800b2e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b2d8:	4618      	mov	r0, r3
 800b2da:	370c      	adds	r7, #12
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e2:	4770      	bx	lr
 800b2e4:	20000150 	.word	0x20000150

0800b2e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b083      	sub	sp, #12
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	4603      	mov	r3, r0
 800b2f0:	6039      	str	r1, [r7, #0]
 800b2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2204      	movs	r2, #4
 800b2f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b2fa:	4b03      	ldr	r3, [pc, #12]	; (800b308 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	370c      	adds	r7, #12
 800b300:	46bd      	mov	sp, r7
 800b302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b306:	4770      	bx	lr
 800b308:	20000170 	.word	0x20000170

0800b30c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b082      	sub	sp, #8
 800b310:	af00      	add	r7, sp, #0
 800b312:	4603      	mov	r3, r0
 800b314:	6039      	str	r1, [r7, #0]
 800b316:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b318:	79fb      	ldrb	r3, [r7, #7]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d105      	bne.n	800b32a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b31e:	683a      	ldr	r2, [r7, #0]
 800b320:	4907      	ldr	r1, [pc, #28]	; (800b340 <USBD_FS_ProductStrDescriptor+0x34>)
 800b322:	4808      	ldr	r0, [pc, #32]	; (800b344 <USBD_FS_ProductStrDescriptor+0x38>)
 800b324:	f7ff fe1d 	bl	800af62 <USBD_GetString>
 800b328:	e004      	b.n	800b334 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b32a:	683a      	ldr	r2, [r7, #0]
 800b32c:	4904      	ldr	r1, [pc, #16]	; (800b340 <USBD_FS_ProductStrDescriptor+0x34>)
 800b32e:	4805      	ldr	r0, [pc, #20]	; (800b344 <USBD_FS_ProductStrDescriptor+0x38>)
 800b330:	f7ff fe17 	bl	800af62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b334:	4b02      	ldr	r3, [pc, #8]	; (800b340 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b336:	4618      	mov	r0, r3
 800b338:	3708      	adds	r7, #8
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	20003d60 	.word	0x20003d60
 800b344:	0801097c 	.word	0x0801097c

0800b348 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b348:	b580      	push	{r7, lr}
 800b34a:	b082      	sub	sp, #8
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	4603      	mov	r3, r0
 800b350:	6039      	str	r1, [r7, #0]
 800b352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	4904      	ldr	r1, [pc, #16]	; (800b368 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b358:	4804      	ldr	r0, [pc, #16]	; (800b36c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b35a:	f7ff fe02 	bl	800af62 <USBD_GetString>
  return USBD_StrDesc;
 800b35e:	4b02      	ldr	r3, [pc, #8]	; (800b368 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b360:	4618      	mov	r0, r3
 800b362:	3708      	adds	r7, #8
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	20003d60 	.word	0x20003d60
 800b36c:	08010994 	.word	0x08010994

0800b370 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b082      	sub	sp, #8
 800b374:	af00      	add	r7, sp, #0
 800b376:	4603      	mov	r3, r0
 800b378:	6039      	str	r1, [r7, #0]
 800b37a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	221a      	movs	r2, #26
 800b380:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b382:	f000 f855 	bl	800b430 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b386:	4b02      	ldr	r3, [pc, #8]	; (800b390 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b388:	4618      	mov	r0, r3
 800b38a:	3708      	adds	r7, #8
 800b38c:	46bd      	mov	sp, r7
 800b38e:	bd80      	pop	{r7, pc}
 800b390:	20000174 	.word	0x20000174

0800b394 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	6039      	str	r1, [r7, #0]
 800b39e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b3a0:	79fb      	ldrb	r3, [r7, #7]
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d105      	bne.n	800b3b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3a6:	683a      	ldr	r2, [r7, #0]
 800b3a8:	4907      	ldr	r1, [pc, #28]	; (800b3c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b3aa:	4808      	ldr	r0, [pc, #32]	; (800b3cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b3ac:	f7ff fdd9 	bl	800af62 <USBD_GetString>
 800b3b0:	e004      	b.n	800b3bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b3b2:	683a      	ldr	r2, [r7, #0]
 800b3b4:	4904      	ldr	r1, [pc, #16]	; (800b3c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b3b6:	4805      	ldr	r0, [pc, #20]	; (800b3cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800b3b8:	f7ff fdd3 	bl	800af62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3bc:	4b02      	ldr	r3, [pc, #8]	; (800b3c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	3708      	adds	r7, #8
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd80      	pop	{r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	20003d60 	.word	0x20003d60
 800b3cc:	080109a8 	.word	0x080109a8

0800b3d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	6039      	str	r1, [r7, #0]
 800b3da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3dc:	79fb      	ldrb	r3, [r7, #7]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d105      	bne.n	800b3ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3e2:	683a      	ldr	r2, [r7, #0]
 800b3e4:	4907      	ldr	r1, [pc, #28]	; (800b404 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3e6:	4808      	ldr	r0, [pc, #32]	; (800b408 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3e8:	f7ff fdbb 	bl	800af62 <USBD_GetString>
 800b3ec:	e004      	b.n	800b3f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3ee:	683a      	ldr	r2, [r7, #0]
 800b3f0:	4904      	ldr	r1, [pc, #16]	; (800b404 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3f2:	4805      	ldr	r0, [pc, #20]	; (800b408 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3f4:	f7ff fdb5 	bl	800af62 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3f8:	4b02      	ldr	r3, [pc, #8]	; (800b404 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	20003d60 	.word	0x20003d60
 800b408:	080109b4 	.word	0x080109b4

0800b40c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b083      	sub	sp, #12
 800b410:	af00      	add	r7, sp, #0
 800b412:	4603      	mov	r3, r0
 800b414:	6039      	str	r1, [r7, #0]
 800b416:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	220c      	movs	r2, #12
 800b41c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 800b41e:	4b03      	ldr	r3, [pc, #12]	; (800b42c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 800b420:	4618      	mov	r0, r3
 800b422:	370c      	adds	r7, #12
 800b424:	46bd      	mov	sp, r7
 800b426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42a:	4770      	bx	lr
 800b42c:	20000164 	.word	0x20000164

0800b430 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b084      	sub	sp, #16
 800b434:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b436:	4b0f      	ldr	r3, [pc, #60]	; (800b474 <Get_SerialNum+0x44>)
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b43c:	4b0e      	ldr	r3, [pc, #56]	; (800b478 <Get_SerialNum+0x48>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b442:	4b0e      	ldr	r3, [pc, #56]	; (800b47c <Get_SerialNum+0x4c>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	4413      	add	r3, r2
 800b44e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d009      	beq.n	800b46a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b456:	2208      	movs	r2, #8
 800b458:	4909      	ldr	r1, [pc, #36]	; (800b480 <Get_SerialNum+0x50>)
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f000 f814 	bl	800b488 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b460:	2204      	movs	r2, #4
 800b462:	4908      	ldr	r1, [pc, #32]	; (800b484 <Get_SerialNum+0x54>)
 800b464:	68b8      	ldr	r0, [r7, #8]
 800b466:	f000 f80f 	bl	800b488 <IntToUnicode>
  }
}
 800b46a:	bf00      	nop
 800b46c:	3710      	adds	r7, #16
 800b46e:	46bd      	mov	sp, r7
 800b470:	bd80      	pop	{r7, pc}
 800b472:	bf00      	nop
 800b474:	1fff7590 	.word	0x1fff7590
 800b478:	1fff7594 	.word	0x1fff7594
 800b47c:	1fff7598 	.word	0x1fff7598
 800b480:	20000176 	.word	0x20000176
 800b484:	20000186 	.word	0x20000186

0800b488 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b488:	b480      	push	{r7}
 800b48a:	b087      	sub	sp, #28
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	60f8      	str	r0, [r7, #12]
 800b490:	60b9      	str	r1, [r7, #8]
 800b492:	4613      	mov	r3, r2
 800b494:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b496:	2300      	movs	r3, #0
 800b498:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b49a:	2300      	movs	r3, #0
 800b49c:	75fb      	strb	r3, [r7, #23]
 800b49e:	e027      	b.n	800b4f0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	0f1b      	lsrs	r3, r3, #28
 800b4a4:	2b09      	cmp	r3, #9
 800b4a6:	d80b      	bhi.n	800b4c0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	0f1b      	lsrs	r3, r3, #28
 800b4ac:	b2da      	uxtb	r2, r3
 800b4ae:	7dfb      	ldrb	r3, [r7, #23]
 800b4b0:	005b      	lsls	r3, r3, #1
 800b4b2:	4619      	mov	r1, r3
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	440b      	add	r3, r1
 800b4b8:	3230      	adds	r2, #48	; 0x30
 800b4ba:	b2d2      	uxtb	r2, r2
 800b4bc:	701a      	strb	r2, [r3, #0]
 800b4be:	e00a      	b.n	800b4d6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	0f1b      	lsrs	r3, r3, #28
 800b4c4:	b2da      	uxtb	r2, r3
 800b4c6:	7dfb      	ldrb	r3, [r7, #23]
 800b4c8:	005b      	lsls	r3, r3, #1
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	440b      	add	r3, r1
 800b4d0:	3237      	adds	r2, #55	; 0x37
 800b4d2:	b2d2      	uxtb	r2, r2
 800b4d4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	011b      	lsls	r3, r3, #4
 800b4da:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b4dc:	7dfb      	ldrb	r3, [r7, #23]
 800b4de:	005b      	lsls	r3, r3, #1
 800b4e0:	3301      	adds	r3, #1
 800b4e2:	68ba      	ldr	r2, [r7, #8]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b4ea:	7dfb      	ldrb	r3, [r7, #23]
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	75fb      	strb	r3, [r7, #23]
 800b4f0:	7dfa      	ldrb	r2, [r7, #23]
 800b4f2:	79fb      	ldrb	r3, [r7, #7]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d3d3      	bcc.n	800b4a0 <IntToUnicode+0x18>
  }
}
 800b4f8:	bf00      	nop
 800b4fa:	bf00      	nop
 800b4fc:	371c      	adds	r7, #28
 800b4fe:	46bd      	mov	sp, r7
 800b500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b504:	4770      	bx	lr
	...

0800b508 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	b0b2      	sub	sp, #200	; 0xc8
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b510:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b514:	2200      	movs	r2, #0
 800b516:	601a      	str	r2, [r3, #0]
 800b518:	605a      	str	r2, [r3, #4]
 800b51a:	609a      	str	r2, [r3, #8]
 800b51c:	60da      	str	r2, [r3, #12]
 800b51e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800b520:	f107 0318 	add.w	r3, r7, #24
 800b524:	229c      	movs	r2, #156	; 0x9c
 800b526:	2100      	movs	r1, #0
 800b528:	4618      	mov	r0, r3
 800b52a:	f000 fcdd 	bl	800bee8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b536:	d163      	bne.n	800b600 <HAL_PCD_MspInit+0xf8>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800b538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b53c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800b53e:	2300      	movs	r3, #0
 800b540:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800b544:	f107 0318 	add.w	r3, r7, #24
 800b548:	4618      	mov	r0, r3
 800b54a:	f7f9 fd79 	bl	8005040 <HAL_RCCEx_PeriphCLKConfig>
 800b54e:	4603      	mov	r3, r0
 800b550:	2b00      	cmp	r3, #0
 800b552:	d001      	beq.n	800b558 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800b554:	f7f6 fae4 	bl	8001b20 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b558:	4b2b      	ldr	r3, [pc, #172]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b55a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b55c:	4a2a      	ldr	r2, [pc, #168]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b55e:	f043 0301 	orr.w	r3, r3, #1
 800b562:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b564:	4b28      	ldr	r3, [pc, #160]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b568:	f003 0301 	and.w	r3, r3, #1
 800b56c:	617b      	str	r3, [r7, #20]
 800b56e:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = OTG_FS_DP_Pin|OTG_FS_DM_Pin;
 800b570:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b578:	2302      	movs	r3, #2
 800b57a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b57e:	2300      	movs	r3, #0
 800b580:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b584:	2303      	movs	r3, #3
 800b586:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b58a:	230a      	movs	r3, #10
 800b58c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b590:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b594:	4619      	mov	r1, r3
 800b596:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800b59a:	f7f7 fb5b 	bl	8002c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b59e:	4b1a      	ldr	r3, [pc, #104]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b5a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5a2:	4a19      	ldr	r2, [pc, #100]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b5a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b5a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b5aa:	4b17      	ldr	r3, [pc, #92]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b5ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b5b2:	613b      	str	r3, [r7, #16]
 800b5b4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b5b6:	4b14      	ldr	r3, [pc, #80]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b5b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d114      	bne.n	800b5ec <HAL_PCD_MspInit+0xe4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5c2:	4b11      	ldr	r3, [pc, #68]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b5c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5c6:	4a10      	ldr	r2, [pc, #64]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b5c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5cc:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ce:	4b0e      	ldr	r3, [pc, #56]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b5d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b5d6:	60fb      	str	r3, [r7, #12]
 800b5d8:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 800b5da:	f7f8 fe3d 	bl	8004258 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800b5de:	4b0a      	ldr	r3, [pc, #40]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b5e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e2:	4a09      	ldr	r2, [pc, #36]	; (800b608 <HAL_PCD_MspInit+0x100>)
 800b5e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b5e8:	6593      	str	r3, [r2, #88]	; 0x58
 800b5ea:	e001      	b.n	800b5f0 <HAL_PCD_MspInit+0xe8>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 800b5ec:	f7f8 fe34 	bl	8004258 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	2043      	movs	r0, #67	; 0x43
 800b5f6:	f7f7 fa3c 	bl	8002a72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b5fa:	2043      	movs	r0, #67	; 0x43
 800b5fc:	f7f7 fa55 	bl	8002aaa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b600:	bf00      	nop
 800b602:	37c8      	adds	r7, #200	; 0xc8
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}
 800b608:	40021000 	.word	0x40021000

0800b60c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b082      	sub	sp, #8
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b620:	4619      	mov	r1, r3
 800b622:	4610      	mov	r0, r2
 800b624:	f7fe fc8c 	bl	8009f40 <USBD_LL_SetupStage>
}
 800b628:	bf00      	nop
 800b62a:	3708      	adds	r7, #8
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	460b      	mov	r3, r1
 800b63a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b642:	78fa      	ldrb	r2, [r7, #3]
 800b644:	6879      	ldr	r1, [r7, #4]
 800b646:	4613      	mov	r3, r2
 800b648:	00db      	lsls	r3, r3, #3
 800b64a:	1a9b      	subs	r3, r3, r2
 800b64c:	009b      	lsls	r3, r3, #2
 800b64e:	440b      	add	r3, r1
 800b650:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b654:	681a      	ldr	r2, [r3, #0]
 800b656:	78fb      	ldrb	r3, [r7, #3]
 800b658:	4619      	mov	r1, r3
 800b65a:	f7fe fcc6 	bl	8009fea <USBD_LL_DataOutStage>
}
 800b65e:	bf00      	nop
 800b660:	3708      	adds	r7, #8
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}

0800b666 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b666:	b580      	push	{r7, lr}
 800b668:	b082      	sub	sp, #8
 800b66a:	af00      	add	r7, sp, #0
 800b66c:	6078      	str	r0, [r7, #4]
 800b66e:	460b      	mov	r3, r1
 800b670:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b678:	78fa      	ldrb	r2, [r7, #3]
 800b67a:	6879      	ldr	r1, [r7, #4]
 800b67c:	4613      	mov	r3, r2
 800b67e:	00db      	lsls	r3, r3, #3
 800b680:	1a9b      	subs	r3, r3, r2
 800b682:	009b      	lsls	r3, r3, #2
 800b684:	440b      	add	r3, r1
 800b686:	3348      	adds	r3, #72	; 0x48
 800b688:	681a      	ldr	r2, [r3, #0]
 800b68a:	78fb      	ldrb	r3, [r7, #3]
 800b68c:	4619      	mov	r1, r3
 800b68e:	f7fe fd0f 	bl	800a0b0 <USBD_LL_DataInStage>
}
 800b692:	bf00      	nop
 800b694:	3708      	adds	r7, #8
 800b696:	46bd      	mov	sp, r7
 800b698:	bd80      	pop	{r7, pc}

0800b69a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b69a:	b580      	push	{r7, lr}
 800b69c:	b082      	sub	sp, #8
 800b69e:	af00      	add	r7, sp, #0
 800b6a0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f7fe fe23 	bl	800a2f4 <USBD_LL_SOF>
}
 800b6ae:	bf00      	nop
 800b6b0:	3708      	adds	r7, #8
 800b6b2:	46bd      	mov	sp, r7
 800b6b4:	bd80      	pop	{r7, pc}

0800b6b6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6b6:	b580      	push	{r7, lr}
 800b6b8:	b084      	sub	sp, #16
 800b6ba:	af00      	add	r7, sp, #0
 800b6bc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6be:	2301      	movs	r3, #1
 800b6c0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	68db      	ldr	r3, [r3, #12]
 800b6c6:	2b02      	cmp	r3, #2
 800b6c8:	d001      	beq.n	800b6ce <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b6ca:	f7f6 fa29 	bl	8001b20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6d4:	7bfa      	ldrb	r2, [r7, #15]
 800b6d6:	4611      	mov	r1, r2
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f7fe fdcd 	bl	800a278 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fe fd79 	bl	800a1dc <USBD_LL_Reset>
}
 800b6ea:	bf00      	nop
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
	...

0800b6f4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b082      	sub	sp, #8
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	687a      	ldr	r2, [r7, #4]
 800b708:	6812      	ldr	r2, [r2, #0]
 800b70a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b70e:	f043 0301 	orr.w	r3, r3, #1
 800b712:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b71a:	4618      	mov	r0, r3
 800b71c:	f7fe fdbc 	bl	800a298 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a1b      	ldr	r3, [r3, #32]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d005      	beq.n	800b734 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b728:	4b04      	ldr	r3, [pc, #16]	; (800b73c <HAL_PCD_SuspendCallback+0x48>)
 800b72a:	691b      	ldr	r3, [r3, #16]
 800b72c:	4a03      	ldr	r2, [pc, #12]	; (800b73c <HAL_PCD_SuspendCallback+0x48>)
 800b72e:	f043 0306 	orr.w	r3, r3, #6
 800b732:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b734:	bf00      	nop
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}
 800b73c:	e000ed00 	.word	0xe000ed00

0800b740 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	687a      	ldr	r2, [r7, #4]
 800b754:	6812      	ldr	r2, [r2, #0]
 800b756:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b75a:	f023 0301 	bic.w	r3, r3, #1
 800b75e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	6a1b      	ldr	r3, [r3, #32]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d007      	beq.n	800b778 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b768:	4b08      	ldr	r3, [pc, #32]	; (800b78c <HAL_PCD_ResumeCallback+0x4c>)
 800b76a:	691b      	ldr	r3, [r3, #16]
 800b76c:	4a07      	ldr	r2, [pc, #28]	; (800b78c <HAL_PCD_ResumeCallback+0x4c>)
 800b76e:	f023 0306 	bic.w	r3, r3, #6
 800b772:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800b774:	f000 faf4 	bl	800bd60 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b77e:	4618      	mov	r0, r3
 800b780:	f7fe fda0 	bl	800a2c4 <USBD_LL_Resume>
}
 800b784:	bf00      	nop
 800b786:	3708      	adds	r7, #8
 800b788:	46bd      	mov	sp, r7
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	e000ed00 	.word	0xe000ed00

0800b790 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b082      	sub	sp, #8
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	460b      	mov	r3, r1
 800b79a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7a2:	78fa      	ldrb	r2, [r7, #3]
 800b7a4:	4611      	mov	r1, r2
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	f7fe fdec 	bl	800a384 <USBD_LL_IsoOUTIncomplete>
}
 800b7ac:	bf00      	nop
 800b7ae:	3708      	adds	r7, #8
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	bd80      	pop	{r7, pc}

0800b7b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b082      	sub	sp, #8
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7c6:	78fa      	ldrb	r2, [r7, #3]
 800b7c8:	4611      	mov	r1, r2
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	f7fe fdb4 	bl	800a338 <USBD_LL_IsoINIncomplete>
}
 800b7d0:	bf00      	nop
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	f7fe fdf2 	bl	800a3d0 <USBD_LL_DevConnected>
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}

0800b7f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b802:	4618      	mov	r0, r3
 800b804:	f7fe fdef 	bl	800a3e6 <USBD_LL_DevDisconnected>
}
 800b808:	bf00      	nop
 800b80a:	3708      	adds	r7, #8
 800b80c:	46bd      	mov	sp, r7
 800b80e:	bd80      	pop	{r7, pc}

0800b810 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b810:	b580      	push	{r7, lr}
 800b812:	b082      	sub	sp, #8
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	781b      	ldrb	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d139      	bne.n	800b894 <USBD_LL_Init+0x84>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b820:	4a1f      	ldr	r2, [pc, #124]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	4a1d      	ldr	r2, [pc, #116]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b82c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b830:	4b1b      	ldr	r3, [pc, #108]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b832:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b836:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800b838:	4b19      	ldr	r3, [pc, #100]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b83a:	2206      	movs	r2, #6
 800b83c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b83e:	4b18      	ldr	r3, [pc, #96]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b840:	2202      	movs	r2, #2
 800b842:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b844:	4b16      	ldr	r3, [pc, #88]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b846:	2200      	movs	r2, #0
 800b848:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b84a:	4b15      	ldr	r3, [pc, #84]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b84c:	2200      	movs	r2, #0
 800b84e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b850:	4b13      	ldr	r3, [pc, #76]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b852:	2200      	movs	r2, #0
 800b854:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800b856:	4b12      	ldr	r3, [pc, #72]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b858:	2200      	movs	r2, #0
 800b85a:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b85c:	4b10      	ldr	r3, [pc, #64]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b85e:	2200      	movs	r2, #0
 800b860:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b862:	4b0f      	ldr	r3, [pc, #60]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b864:	2200      	movs	r2, #0
 800b866:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b868:	480d      	ldr	r0, [pc, #52]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b86a:	f7f7 fb9d 	bl	8002fa8 <HAL_PCD_Init>
 800b86e:	4603      	mov	r3, r0
 800b870:	2b00      	cmp	r3, #0
 800b872:	d001      	beq.n	800b878 <USBD_LL_Init+0x68>
  {
    Error_Handler( );
 800b874:	f7f6 f954 	bl	8001b20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b878:	2180      	movs	r1, #128	; 0x80
 800b87a:	4809      	ldr	r0, [pc, #36]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b87c:	f7f8 fbf3 	bl	8004066 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b880:	2240      	movs	r2, #64	; 0x40
 800b882:	2100      	movs	r1, #0
 800b884:	4806      	ldr	r0, [pc, #24]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b886:	f7f8 fba7 	bl	8003fd8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b88a:	2280      	movs	r2, #128	; 0x80
 800b88c:	2101      	movs	r1, #1
 800b88e:	4804      	ldr	r0, [pc, #16]	; (800b8a0 <USBD_LL_Init+0x90>)
 800b890:	f7f8 fba2 	bl	8003fd8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b894:	2300      	movs	r3, #0
}
 800b896:	4618      	mov	r0, r3
 800b898:	3708      	adds	r7, #8
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	20003f60 	.word	0x20003f60

0800b8a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7f7 fc98 	bl	80031f0 <HAL_PCD_Start>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b8c4:	7bbb      	ldrb	r3, [r7, #14]
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	d816      	bhi.n	800b8f8 <USBD_LL_Start+0x54>
 800b8ca:	a201      	add	r2, pc, #4	; (adr r2, 800b8d0 <USBD_LL_Start+0x2c>)
 800b8cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8d0:	0800b8e1 	.word	0x0800b8e1
 800b8d4:	0800b8e7 	.word	0x0800b8e7
 800b8d8:	0800b8ed 	.word	0x0800b8ed
 800b8dc:	0800b8f3 	.word	0x0800b8f3
    case HAL_OK :
      usb_status = USBD_OK;
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b8e4:	e00b      	b.n	800b8fe <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b8e6:	2303      	movs	r3, #3
 800b8e8:	73fb      	strb	r3, [r7, #15]
    break;
 800b8ea:	e008      	b.n	800b8fe <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f0:	e005      	b.n	800b8fe <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b8f6:	e002      	b.n	800b8fe <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 800b8f8:	2303      	movs	r3, #3
 800b8fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b8fc:	bf00      	nop
  }
  return usb_status;
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b900:	4618      	mov	r0, r3
 800b902:	3710      	adds	r7, #16
 800b904:	46bd      	mov	sp, r7
 800b906:	bd80      	pop	{r7, pc}

0800b908 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b084      	sub	sp, #16
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	4608      	mov	r0, r1
 800b912:	4611      	mov	r1, r2
 800b914:	461a      	mov	r2, r3
 800b916:	4603      	mov	r3, r0
 800b918:	70fb      	strb	r3, [r7, #3]
 800b91a:	460b      	mov	r3, r1
 800b91c:	70bb      	strb	r3, [r7, #2]
 800b91e:	4613      	mov	r3, r2
 800b920:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b922:	2300      	movs	r3, #0
 800b924:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b930:	78bb      	ldrb	r3, [r7, #2]
 800b932:	883a      	ldrh	r2, [r7, #0]
 800b934:	78f9      	ldrb	r1, [r7, #3]
 800b936:	f7f8 f848 	bl	80039ca <HAL_PCD_EP_Open>
 800b93a:	4603      	mov	r3, r0
 800b93c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b93e:	7bbb      	ldrb	r3, [r7, #14]
 800b940:	2b03      	cmp	r3, #3
 800b942:	d817      	bhi.n	800b974 <USBD_LL_OpenEP+0x6c>
 800b944:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <USBD_LL_OpenEP+0x44>)
 800b946:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94a:	bf00      	nop
 800b94c:	0800b95d 	.word	0x0800b95d
 800b950:	0800b963 	.word	0x0800b963
 800b954:	0800b969 	.word	0x0800b969
 800b958:	0800b96f 	.word	0x0800b96f
    case HAL_OK :
      usb_status = USBD_OK;
 800b95c:	2300      	movs	r3, #0
 800b95e:	73fb      	strb	r3, [r7, #15]
    break;
 800b960:	e00b      	b.n	800b97a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b962:	2303      	movs	r3, #3
 800b964:	73fb      	strb	r3, [r7, #15]
    break;
 800b966:	e008      	b.n	800b97a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b968:	2301      	movs	r3, #1
 800b96a:	73fb      	strb	r3, [r7, #15]
    break;
 800b96c:	e005      	b.n	800b97a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b96e:	2303      	movs	r3, #3
 800b970:	73fb      	strb	r3, [r7, #15]
    break;
 800b972:	e002      	b.n	800b97a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 800b974:	2303      	movs	r3, #3
 800b976:	73fb      	strb	r3, [r7, #15]
    break;
 800b978:	bf00      	nop
  }
  return usb_status;
 800b97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}

0800b984 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b99e:	78fa      	ldrb	r2, [r7, #3]
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7f8 f879 	bl	8003a9a <HAL_PCD_EP_Close>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800b9ac:	7bbb      	ldrb	r3, [r7, #14]
 800b9ae:	2b03      	cmp	r3, #3
 800b9b0:	d816      	bhi.n	800b9e0 <USBD_LL_CloseEP+0x5c>
 800b9b2:	a201      	add	r2, pc, #4	; (adr r2, 800b9b8 <USBD_LL_CloseEP+0x34>)
 800b9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b8:	0800b9c9 	.word	0x0800b9c9
 800b9bc:	0800b9cf 	.word	0x0800b9cf
 800b9c0:	0800b9d5 	.word	0x0800b9d5
 800b9c4:	0800b9db 	.word	0x0800b9db
    case HAL_OK :
      usb_status = USBD_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73fb      	strb	r3, [r7, #15]
    break;
 800b9cc:	e00b      	b.n	800b9e6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b9ce:	2303      	movs	r3, #3
 800b9d0:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d2:	e008      	b.n	800b9e6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	73fb      	strb	r3, [r7, #15]
    break;
 800b9d8:	e005      	b.n	800b9e6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b9da:	2303      	movs	r3, #3
 800b9dc:	73fb      	strb	r3, [r7, #15]
    break;
 800b9de:	e002      	b.n	800b9e6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800b9e0:	2303      	movs	r3, #3
 800b9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800b9e4:	bf00      	nop
  }
  return usb_status;
 800b9e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	3710      	adds	r7, #16
 800b9ec:	46bd      	mov	sp, r7
 800b9ee:	bd80      	pop	{r7, pc}

0800b9f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
 800b9f8:	460b      	mov	r3, r1
 800b9fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba00:	2300      	movs	r3, #0
 800ba02:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba0a:	78fa      	ldrb	r2, [r7, #3]
 800ba0c:	4611      	mov	r1, r2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f7f8 f920 	bl	8003c54 <HAL_PCD_EP_SetStall>
 800ba14:	4603      	mov	r3, r0
 800ba16:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba18:	7bbb      	ldrb	r3, [r7, #14]
 800ba1a:	2b03      	cmp	r3, #3
 800ba1c:	d816      	bhi.n	800ba4c <USBD_LL_StallEP+0x5c>
 800ba1e:	a201      	add	r2, pc, #4	; (adr r2, 800ba24 <USBD_LL_StallEP+0x34>)
 800ba20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba24:	0800ba35 	.word	0x0800ba35
 800ba28:	0800ba3b 	.word	0x0800ba3b
 800ba2c:	0800ba41 	.word	0x0800ba41
 800ba30:	0800ba47 	.word	0x0800ba47
    case HAL_OK :
      usb_status = USBD_OK;
 800ba34:	2300      	movs	r3, #0
 800ba36:	73fb      	strb	r3, [r7, #15]
    break;
 800ba38:	e00b      	b.n	800ba52 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ba3a:	2303      	movs	r3, #3
 800ba3c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba3e:	e008      	b.n	800ba52 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ba40:	2301      	movs	r3, #1
 800ba42:	73fb      	strb	r3, [r7, #15]
    break;
 800ba44:	e005      	b.n	800ba52 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ba46:	2303      	movs	r3, #3
 800ba48:	73fb      	strb	r3, [r7, #15]
    break;
 800ba4a:	e002      	b.n	800ba52 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800ba4c:	2303      	movs	r3, #3
 800ba4e:	73fb      	strb	r3, [r7, #15]
    break;
 800ba50:	bf00      	nop
  }
  return usb_status;
 800ba52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b084      	sub	sp, #16
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba76:	78fa      	ldrb	r2, [r7, #3]
 800ba78:	4611      	mov	r1, r2
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7f8 f94c 	bl	8003d18 <HAL_PCD_EP_ClrStall>
 800ba80:	4603      	mov	r3, r0
 800ba82:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800ba84:	7bbb      	ldrb	r3, [r7, #14]
 800ba86:	2b03      	cmp	r3, #3
 800ba88:	d816      	bhi.n	800bab8 <USBD_LL_ClearStallEP+0x5c>
 800ba8a:	a201      	add	r2, pc, #4	; (adr r2, 800ba90 <USBD_LL_ClearStallEP+0x34>)
 800ba8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba90:	0800baa1 	.word	0x0800baa1
 800ba94:	0800baa7 	.word	0x0800baa7
 800ba98:	0800baad 	.word	0x0800baad
 800ba9c:	0800bab3 	.word	0x0800bab3
    case HAL_OK :
      usb_status = USBD_OK;
 800baa0:	2300      	movs	r3, #0
 800baa2:	73fb      	strb	r3, [r7, #15]
    break;
 800baa4:	e00b      	b.n	800babe <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800baa6:	2303      	movs	r3, #3
 800baa8:	73fb      	strb	r3, [r7, #15]
    break;
 800baaa:	e008      	b.n	800babe <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800baac:	2301      	movs	r3, #1
 800baae:	73fb      	strb	r3, [r7, #15]
    break;
 800bab0:	e005      	b.n	800babe <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bab2:	2303      	movs	r3, #3
 800bab4:	73fb      	strb	r3, [r7, #15]
    break;
 800bab6:	e002      	b.n	800babe <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800bab8:	2303      	movs	r3, #3
 800baba:	73fb      	strb	r3, [r7, #15]
    break;
 800babc:	bf00      	nop
  }
  return usb_status;
 800babe:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3710      	adds	r7, #16
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bac8:	b480      	push	{r7}
 800baca:	b085      	sub	sp, #20
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	460b      	mov	r3, r1
 800bad2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bada:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800badc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	da0b      	bge.n	800bafc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bae4:	78fb      	ldrb	r3, [r7, #3]
 800bae6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800baea:	68f9      	ldr	r1, [r7, #12]
 800baec:	4613      	mov	r3, r2
 800baee:	00db      	lsls	r3, r3, #3
 800baf0:	1a9b      	subs	r3, r3, r2
 800baf2:	009b      	lsls	r3, r3, #2
 800baf4:	440b      	add	r3, r1
 800baf6:	333e      	adds	r3, #62	; 0x3e
 800baf8:	781b      	ldrb	r3, [r3, #0]
 800bafa:	e00b      	b.n	800bb14 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bafc:	78fb      	ldrb	r3, [r7, #3]
 800bafe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800bb02:	68f9      	ldr	r1, [r7, #12]
 800bb04:	4613      	mov	r3, r2
 800bb06:	00db      	lsls	r3, r3, #3
 800bb08:	1a9b      	subs	r3, r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	440b      	add	r3, r1
 800bb0e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800bb12:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3714      	adds	r7, #20
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1e:	4770      	bx	lr

0800bb20 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b084      	sub	sp, #16
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	460b      	mov	r3, r1
 800bb2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb2c:	2300      	movs	r3, #0
 800bb2e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb30:	2300      	movs	r3, #0
 800bb32:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb3a:	78fa      	ldrb	r2, [r7, #3]
 800bb3c:	4611      	mov	r1, r2
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7f7 ff1e 	bl	8003980 <HAL_PCD_SetAddress>
 800bb44:	4603      	mov	r3, r0
 800bb46:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800bb48:	7bbb      	ldrb	r3, [r7, #14]
 800bb4a:	2b03      	cmp	r3, #3
 800bb4c:	d816      	bhi.n	800bb7c <USBD_LL_SetUSBAddress+0x5c>
 800bb4e:	a201      	add	r2, pc, #4	; (adr r2, 800bb54 <USBD_LL_SetUSBAddress+0x34>)
 800bb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb54:	0800bb65 	.word	0x0800bb65
 800bb58:	0800bb6b 	.word	0x0800bb6b
 800bb5c:	0800bb71 	.word	0x0800bb71
 800bb60:	0800bb77 	.word	0x0800bb77
    case HAL_OK :
      usb_status = USBD_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73fb      	strb	r3, [r7, #15]
    break;
 800bb68:	e00b      	b.n	800bb82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb6a:	2303      	movs	r3, #3
 800bb6c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb6e:	e008      	b.n	800bb82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb70:	2301      	movs	r3, #1
 800bb72:	73fb      	strb	r3, [r7, #15]
    break;
 800bb74:	e005      	b.n	800bb82 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb76:	2303      	movs	r3, #3
 800bb78:	73fb      	strb	r3, [r7, #15]
    break;
 800bb7a:	e002      	b.n	800bb82 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb80:	bf00      	nop
  }
  return usb_status;
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	60f8      	str	r0, [r7, #12]
 800bb94:	607a      	str	r2, [r7, #4]
 800bb96:	603b      	str	r3, [r7, #0]
 800bb98:	460b      	mov	r3, r1
 800bb9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba0:	2300      	movs	r3, #0
 800bba2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bbaa:	7af9      	ldrb	r1, [r7, #11]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	687a      	ldr	r2, [r7, #4]
 800bbb0:	f7f8 f813 	bl	8003bda <HAL_PCD_EP_Transmit>
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bbb8:	7dbb      	ldrb	r3, [r7, #22]
 800bbba:	2b03      	cmp	r3, #3
 800bbbc:	d816      	bhi.n	800bbec <USBD_LL_Transmit+0x60>
 800bbbe:	a201      	add	r2, pc, #4	; (adr r2, 800bbc4 <USBD_LL_Transmit+0x38>)
 800bbc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc4:	0800bbd5 	.word	0x0800bbd5
 800bbc8:	0800bbdb 	.word	0x0800bbdb
 800bbcc:	0800bbe1 	.word	0x0800bbe1
 800bbd0:	0800bbe7 	.word	0x0800bbe7
    case HAL_OK :
      usb_status = USBD_OK;
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	75fb      	strb	r3, [r7, #23]
    break;
 800bbd8:	e00b      	b.n	800bbf2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bbda:	2303      	movs	r3, #3
 800bbdc:	75fb      	strb	r3, [r7, #23]
    break;
 800bbde:	e008      	b.n	800bbf2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	75fb      	strb	r3, [r7, #23]
    break;
 800bbe4:	e005      	b.n	800bbf2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	75fb      	strb	r3, [r7, #23]
    break;
 800bbea:	e002      	b.n	800bbf2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 800bbec:	2303      	movs	r3, #3
 800bbee:	75fb      	strb	r3, [r7, #23]
    break;
 800bbf0:	bf00      	nop
  }
  return usb_status;
 800bbf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3718      	adds	r7, #24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b086      	sub	sp, #24
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	60f8      	str	r0, [r7, #12]
 800bc04:	607a      	str	r2, [r7, #4]
 800bc06:	603b      	str	r3, [r7, #0]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc10:	2300      	movs	r3, #0
 800bc12:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bc1a:	7af9      	ldrb	r1, [r7, #11]
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	687a      	ldr	r2, [r7, #4]
 800bc20:	f7f7 ff85 	bl	8003b2e <HAL_PCD_EP_Receive>
 800bc24:	4603      	mov	r3, r0
 800bc26:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 800bc28:	7dbb      	ldrb	r3, [r7, #22]
 800bc2a:	2b03      	cmp	r3, #3
 800bc2c:	d816      	bhi.n	800bc5c <USBD_LL_PrepareReceive+0x60>
 800bc2e:	a201      	add	r2, pc, #4	; (adr r2, 800bc34 <USBD_LL_PrepareReceive+0x38>)
 800bc30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc34:	0800bc45 	.word	0x0800bc45
 800bc38:	0800bc4b 	.word	0x0800bc4b
 800bc3c:	0800bc51 	.word	0x0800bc51
 800bc40:	0800bc57 	.word	0x0800bc57
    case HAL_OK :
      usb_status = USBD_OK;
 800bc44:	2300      	movs	r3, #0
 800bc46:	75fb      	strb	r3, [r7, #23]
    break;
 800bc48:	e00b      	b.n	800bc62 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc4a:	2303      	movs	r3, #3
 800bc4c:	75fb      	strb	r3, [r7, #23]
    break;
 800bc4e:	e008      	b.n	800bc62 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bc50:	2301      	movs	r3, #1
 800bc52:	75fb      	strb	r3, [r7, #23]
    break;
 800bc54:	e005      	b.n	800bc62 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bc56:	2303      	movs	r3, #3
 800bc58:	75fb      	strb	r3, [r7, #23]
    break;
 800bc5a:	e002      	b.n	800bc62 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800bc5c:	2303      	movs	r3, #3
 800bc5e:	75fb      	strb	r3, [r7, #23]
    break;
 800bc60:	bf00      	nop
  }
  return usb_status;
 800bc62:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	3718      	adds	r7, #24
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}

0800bc6c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bc7e:	78fa      	ldrb	r2, [r7, #3]
 800bc80:	4611      	mov	r1, r2
 800bc82:	4618      	mov	r0, r3
 800bc84:	f7f7 ff91 	bl	8003baa <HAL_PCD_EP_GetRxCount>
 800bc88:	4603      	mov	r3, r0
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3708      	adds	r7, #8
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}
	...

0800bc94 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b082      	sub	sp, #8
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800bca0:	78fb      	ldrb	r3, [r7, #3]
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d002      	beq.n	800bcac <HAL_PCDEx_LPM_Callback+0x18>
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d01f      	beq.n	800bcea <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800bcaa:	e03b      	b.n	800bd24 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	6a1b      	ldr	r3, [r3, #32]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d007      	beq.n	800bcc4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800bcb4:	f000 f854 	bl	800bd60 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bcb8:	4b1c      	ldr	r3, [pc, #112]	; (800bd2c <HAL_PCDEx_LPM_Callback+0x98>)
 800bcba:	691b      	ldr	r3, [r3, #16]
 800bcbc:	4a1b      	ldr	r2, [pc, #108]	; (800bd2c <HAL_PCDEx_LPM_Callback+0x98>)
 800bcbe:	f023 0306 	bic.w	r3, r3, #6
 800bcc2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	6812      	ldr	r2, [r2, #0]
 800bcd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bcd6:	f023 0301 	bic.w	r3, r3, #1
 800bcda:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bce2:	4618      	mov	r0, r3
 800bce4:	f7fe faee 	bl	800a2c4 <USBD_LL_Resume>
    break;
 800bce8:	e01c      	b.n	800bd24 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	6812      	ldr	r2, [r2, #0]
 800bcf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bcfc:	f043 0301 	orr.w	r3, r3, #1
 800bd00:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800bd08:	4618      	mov	r0, r3
 800bd0a:	f7fe fac5 	bl	800a298 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6a1b      	ldr	r3, [r3, #32]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d005      	beq.n	800bd22 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bd16:	4b05      	ldr	r3, [pc, #20]	; (800bd2c <HAL_PCDEx_LPM_Callback+0x98>)
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	4a04      	ldr	r2, [pc, #16]	; (800bd2c <HAL_PCDEx_LPM_Callback+0x98>)
 800bd1c:	f043 0306 	orr.w	r3, r3, #6
 800bd20:	6113      	str	r3, [r2, #16]
    break;
 800bd22:	bf00      	nop
}
 800bd24:	bf00      	nop
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	e000ed00 	.word	0xe000ed00

0800bd30 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b083      	sub	sp, #12
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bd38:	4b03      	ldr	r3, [pc, #12]	; (800bd48 <USBD_static_malloc+0x18>)
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd44:	4770      	bx	lr
 800bd46:	bf00      	nop
 800bd48:	20004368 	.word	0x20004368

0800bd4c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bd4c:	b480      	push	{r7}
 800bd4e:	b083      	sub	sp, #12
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]

}
 800bd54:	bf00      	nop
 800bd56:	370c      	adds	r7, #12
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800bd64:	f7f5 fa1c 	bl	80011a0 <SystemClock_Config>
}
 800bd68:	bf00      	nop
 800bd6a:	bd80      	pop	{r7, pc}

0800bd6c <neai_anomalydetection_init>:
 800bd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd70:	4c34      	ldr	r4, [pc, #208]	; (800be44 <neai_anomalydetection_init+0xd8>)
 800bd72:	2700      	movs	r7, #0
 800bd74:	2600      	movs	r6, #0
 800bd76:	f884 74c8 	strb.w	r7, [r4, #1224]	; 0x4c8
 800bd7a:	f884 74c9 	strb.w	r7, [r4, #1225]	; 0x4c9
 800bd7e:	f884 74ca 	strb.w	r7, [r4, #1226]	; 0x4ca
 800bd82:	f8c4 74cc 	str.w	r7, [r4, #1228]	; 0x4cc
 800bd86:	f884 74d0 	strb.w	r7, [r4, #1232]	; 0x4d0
 800bd8a:	1d25      	adds	r5, r4, #4
 800bd8c:	f204 48b4 	addw	r8, r4, #1204	; 0x4b4
 800bd90:	f845 7c04 	str.w	r7, [r5, #-4]
 800bd94:	672e      	str	r6, [r5, #112]	; 0x70
 800bd96:	676e      	str	r6, [r5, #116]	; 0x74
 800bd98:	f8c5 60e8 	str.w	r6, [r5, #232]	; 0xe8
 800bd9c:	226e      	movs	r2, #110	; 0x6e
 800bd9e:	2100      	movs	r1, #0
 800bda0:	4628      	mov	r0, r5
 800bda2:	f000 f8a1 	bl	800bee8 <memset>
 800bda6:	f105 0078 	add.w	r0, r5, #120	; 0x78
 800bdaa:	226e      	movs	r2, #110	; 0x6e
 800bdac:	2100      	movs	r1, #0
 800bdae:	35f0      	adds	r5, #240	; 0xf0
 800bdb0:	f000 f89a 	bl	800bee8 <memset>
 800bdb4:	4545      	cmp	r5, r8
 800bdb6:	d1eb      	bne.n	800bd90 <neai_anomalydetection_init+0x24>
 800bdb8:	4b23      	ldr	r3, [pc, #140]	; (800be48 <neai_anomalydetection_init+0xdc>)
 800bdba:	4924      	ldr	r1, [pc, #144]	; (800be4c <neai_anomalydetection_init+0xe0>)
 800bdbc:	6019      	str	r1, [r3, #0]
 800bdbe:	4a24      	ldr	r2, [pc, #144]	; (800be50 <neai_anomalydetection_init+0xe4>)
 800bdc0:	4b24      	ldr	r3, [pc, #144]	; (800be54 <neai_anomalydetection_init+0xe8>)
 800bdc2:	4825      	ldr	r0, [pc, #148]	; (800be58 <neai_anomalydetection_init+0xec>)
 800bdc4:	8812      	ldrh	r2, [r2, #0]
 800bdc6:	f843 0c18 	str.w	r0, [r3, #-24]
 800bdca:	4824      	ldr	r0, [pc, #144]	; (800be5c <neai_anomalydetection_init+0xf0>)
 800bdcc:	6158      	str	r0, [r3, #20]
 800bdce:	4618      	mov	r0, r3
 800bdd0:	f8c4 74e0 	str.w	r7, [r4, #1248]	; 0x4e0
 800bdd4:	4f22      	ldr	r7, [pc, #136]	; (800be60 <neai_anomalydetection_init+0xf4>)
 800bdd6:	f840 6b04 	str.w	r6, [r0], #4
 800bdda:	f843 7c10 	str.w	r7, [r3, #-16]
 800bdde:	f8df c094 	ldr.w	ip, [pc, #148]	; 800be74 <neai_anomalydetection_init+0x108>
 800bde2:	4f20      	ldr	r7, [pc, #128]	; (800be64 <neai_anomalydetection_init+0xf8>)
 800bde4:	619f      	str	r7, [r3, #24]
 800bde6:	f640 71df 	movw	r1, #4063	; 0xfdf
 800bdea:	4011      	ands	r1, r2
 800bdec:	609e      	str	r6, [r3, #8]
 800bdee:	f8c3 c010 	str.w	ip, [r3, #16]
 800bdf2:	f240 4315 	movw	r3, #1045	; 0x415
 800bdf6:	4f1c      	ldr	r7, [pc, #112]	; (800be68 <neai_anomalydetection_init+0xfc>)
 800bdf8:	6006      	str	r6, [r0, #0]
 800bdfa:	4299      	cmp	r1, r3
 800bdfc:	f04f 0001 	mov.w	r0, #1
 800be00:	602f      	str	r7, [r5, #0]
 800be02:	f884 04f0 	strb.w	r0, [r4, #1264]	; 0x4f0
 800be06:	d00c      	beq.n	800be22 <neai_anomalydetection_init+0xb6>
 800be08:	f3c2 020b 	ubfx	r2, r2, #0, #12
 800be0c:	f46f 618c 	mvn.w	r1, #1120	; 0x460
 800be10:	440a      	add	r2, r1
 800be12:	b292      	uxth	r2, r2
 800be14:	2a10      	cmp	r2, #16
 800be16:	d80f      	bhi.n	800be38 <neai_anomalydetection_init+0xcc>
 800be18:	4b14      	ldr	r3, [pc, #80]	; (800be6c <neai_anomalydetection_init+0x100>)
 800be1a:	fa23 f202 	lsr.w	r2, r3, r2
 800be1e:	07d3      	lsls	r3, r2, #31
 800be20:	d50a      	bpl.n	800be38 <neai_anomalydetection_init+0xcc>
 800be22:	4b13      	ldr	r3, [pc, #76]	; (800be70 <neai_anomalydetection_init+0x104>)
 800be24:	881b      	ldrh	r3, [r3, #0]
 800be26:	2ba5      	cmp	r3, #165	; 0xa5
 800be28:	d106      	bne.n	800be38 <neai_anomalydetection_init+0xcc>
 800be2a:	2000      	movs	r0, #0
 800be2c:	f884 04f1 	strb.w	r0, [r4, #1265]	; 0x4f1
 800be30:	f8a4 04f2 	strh.w	r0, [r4, #1266]	; 0x4f2
 800be34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be38:	207c      	movs	r0, #124	; 0x7c
 800be3a:	f884 04f1 	strb.w	r0, [r4, #1265]	; 0x4f1
 800be3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be42:	bf00      	nop
 800be44:	20000368 	.word	0x20000368
 800be48:	20000190 	.word	0x20000190
 800be4c:	3f666666 	.word	0x3f666666
 800be50:	e0042000 	.word	0xe0042000
 800be54:	2000083c 	.word	0x2000083c
 800be58:	3ef5c28f 	.word	0x3ef5c28f
 800be5c:	3ed1eb85 	.word	0x3ed1eb85
 800be60:	3f3d70a4 	.word	0x3f3d70a4
 800be64:	3f2e147b 	.word	0x3f2e147b
 800be68:	3e8a3d71 	.word	0x3e8a3d71
 800be6c:	0001800b 	.word	0x0001800b
 800be70:	1fff77f0 	.word	0x1fff77f0
 800be74:	3fc51eb8 	.word	0x3fc51eb8

0800be78 <__errno>:
 800be78:	4b01      	ldr	r3, [pc, #4]	; (800be80 <__errno+0x8>)
 800be7a:	6818      	ldr	r0, [r3, #0]
 800be7c:	4770      	bx	lr
 800be7e:	bf00      	nop
 800be80:	20000194 	.word	0x20000194

0800be84 <__libc_init_array>:
 800be84:	b570      	push	{r4, r5, r6, lr}
 800be86:	4d0d      	ldr	r5, [pc, #52]	; (800bebc <__libc_init_array+0x38>)
 800be88:	4c0d      	ldr	r4, [pc, #52]	; (800bec0 <__libc_init_array+0x3c>)
 800be8a:	1b64      	subs	r4, r4, r5
 800be8c:	10a4      	asrs	r4, r4, #2
 800be8e:	2600      	movs	r6, #0
 800be90:	42a6      	cmp	r6, r4
 800be92:	d109      	bne.n	800bea8 <__libc_init_array+0x24>
 800be94:	4d0b      	ldr	r5, [pc, #44]	; (800bec4 <__libc_init_array+0x40>)
 800be96:	4c0c      	ldr	r4, [pc, #48]	; (800bec8 <__libc_init_array+0x44>)
 800be98:	f004 fd50 	bl	801093c <_init>
 800be9c:	1b64      	subs	r4, r4, r5
 800be9e:	10a4      	asrs	r4, r4, #2
 800bea0:	2600      	movs	r6, #0
 800bea2:	42a6      	cmp	r6, r4
 800bea4:	d105      	bne.n	800beb2 <__libc_init_array+0x2e>
 800bea6:	bd70      	pop	{r4, r5, r6, pc}
 800bea8:	f855 3b04 	ldr.w	r3, [r5], #4
 800beac:	4798      	blx	r3
 800beae:	3601      	adds	r6, #1
 800beb0:	e7ee      	b.n	800be90 <__libc_init_array+0xc>
 800beb2:	f855 3b04 	ldr.w	r3, [r5], #4
 800beb6:	4798      	blx	r3
 800beb8:	3601      	adds	r6, #1
 800beba:	e7f2      	b.n	800bea2 <__libc_init_array+0x1e>
 800bebc:	08010eec 	.word	0x08010eec
 800bec0:	08010eec 	.word	0x08010eec
 800bec4:	08010eec 	.word	0x08010eec
 800bec8:	08010ef0 	.word	0x08010ef0

0800becc <memcpy>:
 800becc:	440a      	add	r2, r1
 800bece:	4291      	cmp	r1, r2
 800bed0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bed4:	d100      	bne.n	800bed8 <memcpy+0xc>
 800bed6:	4770      	bx	lr
 800bed8:	b510      	push	{r4, lr}
 800beda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bede:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bee2:	4291      	cmp	r1, r2
 800bee4:	d1f9      	bne.n	800beda <memcpy+0xe>
 800bee6:	bd10      	pop	{r4, pc}

0800bee8 <memset>:
 800bee8:	4402      	add	r2, r0
 800beea:	4603      	mov	r3, r0
 800beec:	4293      	cmp	r3, r2
 800beee:	d100      	bne.n	800bef2 <memset+0xa>
 800bef0:	4770      	bx	lr
 800bef2:	f803 1b01 	strb.w	r1, [r3], #1
 800bef6:	e7f9      	b.n	800beec <memset+0x4>

0800bef8 <__cvt>:
 800bef8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800befc:	ec55 4b10 	vmov	r4, r5, d0
 800bf00:	2d00      	cmp	r5, #0
 800bf02:	460e      	mov	r6, r1
 800bf04:	4619      	mov	r1, r3
 800bf06:	462b      	mov	r3, r5
 800bf08:	bfbb      	ittet	lt
 800bf0a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bf0e:	461d      	movlt	r5, r3
 800bf10:	2300      	movge	r3, #0
 800bf12:	232d      	movlt	r3, #45	; 0x2d
 800bf14:	700b      	strb	r3, [r1, #0]
 800bf16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bf18:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bf1c:	4691      	mov	r9, r2
 800bf1e:	f023 0820 	bic.w	r8, r3, #32
 800bf22:	bfbc      	itt	lt
 800bf24:	4622      	movlt	r2, r4
 800bf26:	4614      	movlt	r4, r2
 800bf28:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf2c:	d005      	beq.n	800bf3a <__cvt+0x42>
 800bf2e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bf32:	d100      	bne.n	800bf36 <__cvt+0x3e>
 800bf34:	3601      	adds	r6, #1
 800bf36:	2102      	movs	r1, #2
 800bf38:	e000      	b.n	800bf3c <__cvt+0x44>
 800bf3a:	2103      	movs	r1, #3
 800bf3c:	ab03      	add	r3, sp, #12
 800bf3e:	9301      	str	r3, [sp, #4]
 800bf40:	ab02      	add	r3, sp, #8
 800bf42:	9300      	str	r3, [sp, #0]
 800bf44:	ec45 4b10 	vmov	d0, r4, r5
 800bf48:	4653      	mov	r3, sl
 800bf4a:	4632      	mov	r2, r6
 800bf4c:	f001 ff30 	bl	800ddb0 <_dtoa_r>
 800bf50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bf54:	4607      	mov	r7, r0
 800bf56:	d102      	bne.n	800bf5e <__cvt+0x66>
 800bf58:	f019 0f01 	tst.w	r9, #1
 800bf5c:	d022      	beq.n	800bfa4 <__cvt+0xac>
 800bf5e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bf62:	eb07 0906 	add.w	r9, r7, r6
 800bf66:	d110      	bne.n	800bf8a <__cvt+0x92>
 800bf68:	783b      	ldrb	r3, [r7, #0]
 800bf6a:	2b30      	cmp	r3, #48	; 0x30
 800bf6c:	d10a      	bne.n	800bf84 <__cvt+0x8c>
 800bf6e:	2200      	movs	r2, #0
 800bf70:	2300      	movs	r3, #0
 800bf72:	4620      	mov	r0, r4
 800bf74:	4629      	mov	r1, r5
 800bf76:	f7f4 fdbf 	bl	8000af8 <__aeabi_dcmpeq>
 800bf7a:	b918      	cbnz	r0, 800bf84 <__cvt+0x8c>
 800bf7c:	f1c6 0601 	rsb	r6, r6, #1
 800bf80:	f8ca 6000 	str.w	r6, [sl]
 800bf84:	f8da 3000 	ldr.w	r3, [sl]
 800bf88:	4499      	add	r9, r3
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	2300      	movs	r3, #0
 800bf8e:	4620      	mov	r0, r4
 800bf90:	4629      	mov	r1, r5
 800bf92:	f7f4 fdb1 	bl	8000af8 <__aeabi_dcmpeq>
 800bf96:	b108      	cbz	r0, 800bf9c <__cvt+0xa4>
 800bf98:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf9c:	2230      	movs	r2, #48	; 0x30
 800bf9e:	9b03      	ldr	r3, [sp, #12]
 800bfa0:	454b      	cmp	r3, r9
 800bfa2:	d307      	bcc.n	800bfb4 <__cvt+0xbc>
 800bfa4:	9b03      	ldr	r3, [sp, #12]
 800bfa6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bfa8:	1bdb      	subs	r3, r3, r7
 800bfaa:	4638      	mov	r0, r7
 800bfac:	6013      	str	r3, [r2, #0]
 800bfae:	b004      	add	sp, #16
 800bfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfb4:	1c59      	adds	r1, r3, #1
 800bfb6:	9103      	str	r1, [sp, #12]
 800bfb8:	701a      	strb	r2, [r3, #0]
 800bfba:	e7f0      	b.n	800bf9e <__cvt+0xa6>

0800bfbc <__exponent>:
 800bfbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2900      	cmp	r1, #0
 800bfc2:	bfb8      	it	lt
 800bfc4:	4249      	neglt	r1, r1
 800bfc6:	f803 2b02 	strb.w	r2, [r3], #2
 800bfca:	bfb4      	ite	lt
 800bfcc:	222d      	movlt	r2, #45	; 0x2d
 800bfce:	222b      	movge	r2, #43	; 0x2b
 800bfd0:	2909      	cmp	r1, #9
 800bfd2:	7042      	strb	r2, [r0, #1]
 800bfd4:	dd2a      	ble.n	800c02c <__exponent+0x70>
 800bfd6:	f10d 0407 	add.w	r4, sp, #7
 800bfda:	46a4      	mov	ip, r4
 800bfdc:	270a      	movs	r7, #10
 800bfde:	46a6      	mov	lr, r4
 800bfe0:	460a      	mov	r2, r1
 800bfe2:	fb91 f6f7 	sdiv	r6, r1, r7
 800bfe6:	fb07 1516 	mls	r5, r7, r6, r1
 800bfea:	3530      	adds	r5, #48	; 0x30
 800bfec:	2a63      	cmp	r2, #99	; 0x63
 800bfee:	f104 34ff 	add.w	r4, r4, #4294967295
 800bff2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bff6:	4631      	mov	r1, r6
 800bff8:	dcf1      	bgt.n	800bfde <__exponent+0x22>
 800bffa:	3130      	adds	r1, #48	; 0x30
 800bffc:	f1ae 0502 	sub.w	r5, lr, #2
 800c000:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c004:	1c44      	adds	r4, r0, #1
 800c006:	4629      	mov	r1, r5
 800c008:	4561      	cmp	r1, ip
 800c00a:	d30a      	bcc.n	800c022 <__exponent+0x66>
 800c00c:	f10d 0209 	add.w	r2, sp, #9
 800c010:	eba2 020e 	sub.w	r2, r2, lr
 800c014:	4565      	cmp	r5, ip
 800c016:	bf88      	it	hi
 800c018:	2200      	movhi	r2, #0
 800c01a:	4413      	add	r3, r2
 800c01c:	1a18      	subs	r0, r3, r0
 800c01e:	b003      	add	sp, #12
 800c020:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c022:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c026:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c02a:	e7ed      	b.n	800c008 <__exponent+0x4c>
 800c02c:	2330      	movs	r3, #48	; 0x30
 800c02e:	3130      	adds	r1, #48	; 0x30
 800c030:	7083      	strb	r3, [r0, #2]
 800c032:	70c1      	strb	r1, [r0, #3]
 800c034:	1d03      	adds	r3, r0, #4
 800c036:	e7f1      	b.n	800c01c <__exponent+0x60>

0800c038 <_printf_float>:
 800c038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03c:	ed2d 8b02 	vpush	{d8}
 800c040:	b08d      	sub	sp, #52	; 0x34
 800c042:	460c      	mov	r4, r1
 800c044:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c048:	4616      	mov	r6, r2
 800c04a:	461f      	mov	r7, r3
 800c04c:	4605      	mov	r5, r0
 800c04e:	f003 f9c3 	bl	800f3d8 <_localeconv_r>
 800c052:	f8d0 a000 	ldr.w	sl, [r0]
 800c056:	4650      	mov	r0, sl
 800c058:	f7f4 f8d2 	bl	8000200 <strlen>
 800c05c:	2300      	movs	r3, #0
 800c05e:	930a      	str	r3, [sp, #40]	; 0x28
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	9305      	str	r3, [sp, #20]
 800c064:	f8d8 3000 	ldr.w	r3, [r8]
 800c068:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c06c:	3307      	adds	r3, #7
 800c06e:	f023 0307 	bic.w	r3, r3, #7
 800c072:	f103 0208 	add.w	r2, r3, #8
 800c076:	f8c8 2000 	str.w	r2, [r8]
 800c07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c07e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c082:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c086:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c08a:	9307      	str	r3, [sp, #28]
 800c08c:	f8cd 8018 	str.w	r8, [sp, #24]
 800c090:	ee08 0a10 	vmov	s16, r0
 800c094:	4b9f      	ldr	r3, [pc, #636]	; (800c314 <_printf_float+0x2dc>)
 800c096:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c09a:	f04f 32ff 	mov.w	r2, #4294967295
 800c09e:	f7f4 fd5d 	bl	8000b5c <__aeabi_dcmpun>
 800c0a2:	bb88      	cbnz	r0, 800c108 <_printf_float+0xd0>
 800c0a4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c0a8:	4b9a      	ldr	r3, [pc, #616]	; (800c314 <_printf_float+0x2dc>)
 800c0aa:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ae:	f7f4 fd37 	bl	8000b20 <__aeabi_dcmple>
 800c0b2:	bb48      	cbnz	r0, 800c108 <_printf_float+0xd0>
 800c0b4:	2200      	movs	r2, #0
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	4640      	mov	r0, r8
 800c0ba:	4649      	mov	r1, r9
 800c0bc:	f7f4 fd26 	bl	8000b0c <__aeabi_dcmplt>
 800c0c0:	b110      	cbz	r0, 800c0c8 <_printf_float+0x90>
 800c0c2:	232d      	movs	r3, #45	; 0x2d
 800c0c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0c8:	4b93      	ldr	r3, [pc, #588]	; (800c318 <_printf_float+0x2e0>)
 800c0ca:	4894      	ldr	r0, [pc, #592]	; (800c31c <_printf_float+0x2e4>)
 800c0cc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c0d0:	bf94      	ite	ls
 800c0d2:	4698      	movls	r8, r3
 800c0d4:	4680      	movhi	r8, r0
 800c0d6:	2303      	movs	r3, #3
 800c0d8:	6123      	str	r3, [r4, #16]
 800c0da:	9b05      	ldr	r3, [sp, #20]
 800c0dc:	f023 0204 	bic.w	r2, r3, #4
 800c0e0:	6022      	str	r2, [r4, #0]
 800c0e2:	f04f 0900 	mov.w	r9, #0
 800c0e6:	9700      	str	r7, [sp, #0]
 800c0e8:	4633      	mov	r3, r6
 800c0ea:	aa0b      	add	r2, sp, #44	; 0x2c
 800c0ec:	4621      	mov	r1, r4
 800c0ee:	4628      	mov	r0, r5
 800c0f0:	f000 f9d8 	bl	800c4a4 <_printf_common>
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	f040 8090 	bne.w	800c21a <_printf_float+0x1e2>
 800c0fa:	f04f 30ff 	mov.w	r0, #4294967295
 800c0fe:	b00d      	add	sp, #52	; 0x34
 800c100:	ecbd 8b02 	vpop	{d8}
 800c104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c108:	4642      	mov	r2, r8
 800c10a:	464b      	mov	r3, r9
 800c10c:	4640      	mov	r0, r8
 800c10e:	4649      	mov	r1, r9
 800c110:	f7f4 fd24 	bl	8000b5c <__aeabi_dcmpun>
 800c114:	b140      	cbz	r0, 800c128 <_printf_float+0xf0>
 800c116:	464b      	mov	r3, r9
 800c118:	2b00      	cmp	r3, #0
 800c11a:	bfbc      	itt	lt
 800c11c:	232d      	movlt	r3, #45	; 0x2d
 800c11e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c122:	487f      	ldr	r0, [pc, #508]	; (800c320 <_printf_float+0x2e8>)
 800c124:	4b7f      	ldr	r3, [pc, #508]	; (800c324 <_printf_float+0x2ec>)
 800c126:	e7d1      	b.n	800c0cc <_printf_float+0x94>
 800c128:	6863      	ldr	r3, [r4, #4]
 800c12a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c12e:	9206      	str	r2, [sp, #24]
 800c130:	1c5a      	adds	r2, r3, #1
 800c132:	d13f      	bne.n	800c1b4 <_printf_float+0x17c>
 800c134:	2306      	movs	r3, #6
 800c136:	6063      	str	r3, [r4, #4]
 800c138:	9b05      	ldr	r3, [sp, #20]
 800c13a:	6861      	ldr	r1, [r4, #4]
 800c13c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c140:	2300      	movs	r3, #0
 800c142:	9303      	str	r3, [sp, #12]
 800c144:	ab0a      	add	r3, sp, #40	; 0x28
 800c146:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c14a:	ab09      	add	r3, sp, #36	; 0x24
 800c14c:	ec49 8b10 	vmov	d0, r8, r9
 800c150:	9300      	str	r3, [sp, #0]
 800c152:	6022      	str	r2, [r4, #0]
 800c154:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c158:	4628      	mov	r0, r5
 800c15a:	f7ff fecd 	bl	800bef8 <__cvt>
 800c15e:	9b06      	ldr	r3, [sp, #24]
 800c160:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c162:	2b47      	cmp	r3, #71	; 0x47
 800c164:	4680      	mov	r8, r0
 800c166:	d108      	bne.n	800c17a <_printf_float+0x142>
 800c168:	1cc8      	adds	r0, r1, #3
 800c16a:	db02      	blt.n	800c172 <_printf_float+0x13a>
 800c16c:	6863      	ldr	r3, [r4, #4]
 800c16e:	4299      	cmp	r1, r3
 800c170:	dd41      	ble.n	800c1f6 <_printf_float+0x1be>
 800c172:	f1ab 0b02 	sub.w	fp, fp, #2
 800c176:	fa5f fb8b 	uxtb.w	fp, fp
 800c17a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c17e:	d820      	bhi.n	800c1c2 <_printf_float+0x18a>
 800c180:	3901      	subs	r1, #1
 800c182:	465a      	mov	r2, fp
 800c184:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c188:	9109      	str	r1, [sp, #36]	; 0x24
 800c18a:	f7ff ff17 	bl	800bfbc <__exponent>
 800c18e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c190:	1813      	adds	r3, r2, r0
 800c192:	2a01      	cmp	r2, #1
 800c194:	4681      	mov	r9, r0
 800c196:	6123      	str	r3, [r4, #16]
 800c198:	dc02      	bgt.n	800c1a0 <_printf_float+0x168>
 800c19a:	6822      	ldr	r2, [r4, #0]
 800c19c:	07d2      	lsls	r2, r2, #31
 800c19e:	d501      	bpl.n	800c1a4 <_printf_float+0x16c>
 800c1a0:	3301      	adds	r3, #1
 800c1a2:	6123      	str	r3, [r4, #16]
 800c1a4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d09c      	beq.n	800c0e6 <_printf_float+0xae>
 800c1ac:	232d      	movs	r3, #45	; 0x2d
 800c1ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1b2:	e798      	b.n	800c0e6 <_printf_float+0xae>
 800c1b4:	9a06      	ldr	r2, [sp, #24]
 800c1b6:	2a47      	cmp	r2, #71	; 0x47
 800c1b8:	d1be      	bne.n	800c138 <_printf_float+0x100>
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d1bc      	bne.n	800c138 <_printf_float+0x100>
 800c1be:	2301      	movs	r3, #1
 800c1c0:	e7b9      	b.n	800c136 <_printf_float+0xfe>
 800c1c2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c1c6:	d118      	bne.n	800c1fa <_printf_float+0x1c2>
 800c1c8:	2900      	cmp	r1, #0
 800c1ca:	6863      	ldr	r3, [r4, #4]
 800c1cc:	dd0b      	ble.n	800c1e6 <_printf_float+0x1ae>
 800c1ce:	6121      	str	r1, [r4, #16]
 800c1d0:	b913      	cbnz	r3, 800c1d8 <_printf_float+0x1a0>
 800c1d2:	6822      	ldr	r2, [r4, #0]
 800c1d4:	07d0      	lsls	r0, r2, #31
 800c1d6:	d502      	bpl.n	800c1de <_printf_float+0x1a6>
 800c1d8:	3301      	adds	r3, #1
 800c1da:	440b      	add	r3, r1
 800c1dc:	6123      	str	r3, [r4, #16]
 800c1de:	65a1      	str	r1, [r4, #88]	; 0x58
 800c1e0:	f04f 0900 	mov.w	r9, #0
 800c1e4:	e7de      	b.n	800c1a4 <_printf_float+0x16c>
 800c1e6:	b913      	cbnz	r3, 800c1ee <_printf_float+0x1b6>
 800c1e8:	6822      	ldr	r2, [r4, #0]
 800c1ea:	07d2      	lsls	r2, r2, #31
 800c1ec:	d501      	bpl.n	800c1f2 <_printf_float+0x1ba>
 800c1ee:	3302      	adds	r3, #2
 800c1f0:	e7f4      	b.n	800c1dc <_printf_float+0x1a4>
 800c1f2:	2301      	movs	r3, #1
 800c1f4:	e7f2      	b.n	800c1dc <_printf_float+0x1a4>
 800c1f6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c1fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1fc:	4299      	cmp	r1, r3
 800c1fe:	db05      	blt.n	800c20c <_printf_float+0x1d4>
 800c200:	6823      	ldr	r3, [r4, #0]
 800c202:	6121      	str	r1, [r4, #16]
 800c204:	07d8      	lsls	r0, r3, #31
 800c206:	d5ea      	bpl.n	800c1de <_printf_float+0x1a6>
 800c208:	1c4b      	adds	r3, r1, #1
 800c20a:	e7e7      	b.n	800c1dc <_printf_float+0x1a4>
 800c20c:	2900      	cmp	r1, #0
 800c20e:	bfd4      	ite	le
 800c210:	f1c1 0202 	rsble	r2, r1, #2
 800c214:	2201      	movgt	r2, #1
 800c216:	4413      	add	r3, r2
 800c218:	e7e0      	b.n	800c1dc <_printf_float+0x1a4>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	055a      	lsls	r2, r3, #21
 800c21e:	d407      	bmi.n	800c230 <_printf_float+0x1f8>
 800c220:	6923      	ldr	r3, [r4, #16]
 800c222:	4642      	mov	r2, r8
 800c224:	4631      	mov	r1, r6
 800c226:	4628      	mov	r0, r5
 800c228:	47b8      	blx	r7
 800c22a:	3001      	adds	r0, #1
 800c22c:	d12c      	bne.n	800c288 <_printf_float+0x250>
 800c22e:	e764      	b.n	800c0fa <_printf_float+0xc2>
 800c230:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c234:	f240 80e0 	bls.w	800c3f8 <_printf_float+0x3c0>
 800c238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c23c:	2200      	movs	r2, #0
 800c23e:	2300      	movs	r3, #0
 800c240:	f7f4 fc5a 	bl	8000af8 <__aeabi_dcmpeq>
 800c244:	2800      	cmp	r0, #0
 800c246:	d034      	beq.n	800c2b2 <_printf_float+0x27a>
 800c248:	4a37      	ldr	r2, [pc, #220]	; (800c328 <_printf_float+0x2f0>)
 800c24a:	2301      	movs	r3, #1
 800c24c:	4631      	mov	r1, r6
 800c24e:	4628      	mov	r0, r5
 800c250:	47b8      	blx	r7
 800c252:	3001      	adds	r0, #1
 800c254:	f43f af51 	beq.w	800c0fa <_printf_float+0xc2>
 800c258:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c25c:	429a      	cmp	r2, r3
 800c25e:	db02      	blt.n	800c266 <_printf_float+0x22e>
 800c260:	6823      	ldr	r3, [r4, #0]
 800c262:	07d8      	lsls	r0, r3, #31
 800c264:	d510      	bpl.n	800c288 <_printf_float+0x250>
 800c266:	ee18 3a10 	vmov	r3, s16
 800c26a:	4652      	mov	r2, sl
 800c26c:	4631      	mov	r1, r6
 800c26e:	4628      	mov	r0, r5
 800c270:	47b8      	blx	r7
 800c272:	3001      	adds	r0, #1
 800c274:	f43f af41 	beq.w	800c0fa <_printf_float+0xc2>
 800c278:	f04f 0800 	mov.w	r8, #0
 800c27c:	f104 091a 	add.w	r9, r4, #26
 800c280:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c282:	3b01      	subs	r3, #1
 800c284:	4543      	cmp	r3, r8
 800c286:	dc09      	bgt.n	800c29c <_printf_float+0x264>
 800c288:	6823      	ldr	r3, [r4, #0]
 800c28a:	079b      	lsls	r3, r3, #30
 800c28c:	f100 8105 	bmi.w	800c49a <_printf_float+0x462>
 800c290:	68e0      	ldr	r0, [r4, #12]
 800c292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c294:	4298      	cmp	r0, r3
 800c296:	bfb8      	it	lt
 800c298:	4618      	movlt	r0, r3
 800c29a:	e730      	b.n	800c0fe <_printf_float+0xc6>
 800c29c:	2301      	movs	r3, #1
 800c29e:	464a      	mov	r2, r9
 800c2a0:	4631      	mov	r1, r6
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	47b8      	blx	r7
 800c2a6:	3001      	adds	r0, #1
 800c2a8:	f43f af27 	beq.w	800c0fa <_printf_float+0xc2>
 800c2ac:	f108 0801 	add.w	r8, r8, #1
 800c2b0:	e7e6      	b.n	800c280 <_printf_float+0x248>
 800c2b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	dc39      	bgt.n	800c32c <_printf_float+0x2f4>
 800c2b8:	4a1b      	ldr	r2, [pc, #108]	; (800c328 <_printf_float+0x2f0>)
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	4631      	mov	r1, r6
 800c2be:	4628      	mov	r0, r5
 800c2c0:	47b8      	blx	r7
 800c2c2:	3001      	adds	r0, #1
 800c2c4:	f43f af19 	beq.w	800c0fa <_printf_float+0xc2>
 800c2c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	d102      	bne.n	800c2d6 <_printf_float+0x29e>
 800c2d0:	6823      	ldr	r3, [r4, #0]
 800c2d2:	07d9      	lsls	r1, r3, #31
 800c2d4:	d5d8      	bpl.n	800c288 <_printf_float+0x250>
 800c2d6:	ee18 3a10 	vmov	r3, s16
 800c2da:	4652      	mov	r2, sl
 800c2dc:	4631      	mov	r1, r6
 800c2de:	4628      	mov	r0, r5
 800c2e0:	47b8      	blx	r7
 800c2e2:	3001      	adds	r0, #1
 800c2e4:	f43f af09 	beq.w	800c0fa <_printf_float+0xc2>
 800c2e8:	f04f 0900 	mov.w	r9, #0
 800c2ec:	f104 0a1a 	add.w	sl, r4, #26
 800c2f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2f2:	425b      	negs	r3, r3
 800c2f4:	454b      	cmp	r3, r9
 800c2f6:	dc01      	bgt.n	800c2fc <_printf_float+0x2c4>
 800c2f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2fa:	e792      	b.n	800c222 <_printf_float+0x1ea>
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	4652      	mov	r2, sl
 800c300:	4631      	mov	r1, r6
 800c302:	4628      	mov	r0, r5
 800c304:	47b8      	blx	r7
 800c306:	3001      	adds	r0, #1
 800c308:	f43f aef7 	beq.w	800c0fa <_printf_float+0xc2>
 800c30c:	f109 0901 	add.w	r9, r9, #1
 800c310:	e7ee      	b.n	800c2f0 <_printf_float+0x2b8>
 800c312:	bf00      	nop
 800c314:	7fefffff 	.word	0x7fefffff
 800c318:	08010a38 	.word	0x08010a38
 800c31c:	08010a3c 	.word	0x08010a3c
 800c320:	08010a44 	.word	0x08010a44
 800c324:	08010a40 	.word	0x08010a40
 800c328:	08010a48 	.word	0x08010a48
 800c32c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c32e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c330:	429a      	cmp	r2, r3
 800c332:	bfa8      	it	ge
 800c334:	461a      	movge	r2, r3
 800c336:	2a00      	cmp	r2, #0
 800c338:	4691      	mov	r9, r2
 800c33a:	dc37      	bgt.n	800c3ac <_printf_float+0x374>
 800c33c:	f04f 0b00 	mov.w	fp, #0
 800c340:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c344:	f104 021a 	add.w	r2, r4, #26
 800c348:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c34a:	9305      	str	r3, [sp, #20]
 800c34c:	eba3 0309 	sub.w	r3, r3, r9
 800c350:	455b      	cmp	r3, fp
 800c352:	dc33      	bgt.n	800c3bc <_printf_float+0x384>
 800c354:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c358:	429a      	cmp	r2, r3
 800c35a:	db3b      	blt.n	800c3d4 <_printf_float+0x39c>
 800c35c:	6823      	ldr	r3, [r4, #0]
 800c35e:	07da      	lsls	r2, r3, #31
 800c360:	d438      	bmi.n	800c3d4 <_printf_float+0x39c>
 800c362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c364:	9a05      	ldr	r2, [sp, #20]
 800c366:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c368:	1a9a      	subs	r2, r3, r2
 800c36a:	eba3 0901 	sub.w	r9, r3, r1
 800c36e:	4591      	cmp	r9, r2
 800c370:	bfa8      	it	ge
 800c372:	4691      	movge	r9, r2
 800c374:	f1b9 0f00 	cmp.w	r9, #0
 800c378:	dc35      	bgt.n	800c3e6 <_printf_float+0x3ae>
 800c37a:	f04f 0800 	mov.w	r8, #0
 800c37e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c382:	f104 0a1a 	add.w	sl, r4, #26
 800c386:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c38a:	1a9b      	subs	r3, r3, r2
 800c38c:	eba3 0309 	sub.w	r3, r3, r9
 800c390:	4543      	cmp	r3, r8
 800c392:	f77f af79 	ble.w	800c288 <_printf_float+0x250>
 800c396:	2301      	movs	r3, #1
 800c398:	4652      	mov	r2, sl
 800c39a:	4631      	mov	r1, r6
 800c39c:	4628      	mov	r0, r5
 800c39e:	47b8      	blx	r7
 800c3a0:	3001      	adds	r0, #1
 800c3a2:	f43f aeaa 	beq.w	800c0fa <_printf_float+0xc2>
 800c3a6:	f108 0801 	add.w	r8, r8, #1
 800c3aa:	e7ec      	b.n	800c386 <_printf_float+0x34e>
 800c3ac:	4613      	mov	r3, r2
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	4642      	mov	r2, r8
 800c3b2:	4628      	mov	r0, r5
 800c3b4:	47b8      	blx	r7
 800c3b6:	3001      	adds	r0, #1
 800c3b8:	d1c0      	bne.n	800c33c <_printf_float+0x304>
 800c3ba:	e69e      	b.n	800c0fa <_printf_float+0xc2>
 800c3bc:	2301      	movs	r3, #1
 800c3be:	4631      	mov	r1, r6
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	9205      	str	r2, [sp, #20]
 800c3c4:	47b8      	blx	r7
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	f43f ae97 	beq.w	800c0fa <_printf_float+0xc2>
 800c3cc:	9a05      	ldr	r2, [sp, #20]
 800c3ce:	f10b 0b01 	add.w	fp, fp, #1
 800c3d2:	e7b9      	b.n	800c348 <_printf_float+0x310>
 800c3d4:	ee18 3a10 	vmov	r3, s16
 800c3d8:	4652      	mov	r2, sl
 800c3da:	4631      	mov	r1, r6
 800c3dc:	4628      	mov	r0, r5
 800c3de:	47b8      	blx	r7
 800c3e0:	3001      	adds	r0, #1
 800c3e2:	d1be      	bne.n	800c362 <_printf_float+0x32a>
 800c3e4:	e689      	b.n	800c0fa <_printf_float+0xc2>
 800c3e6:	9a05      	ldr	r2, [sp, #20]
 800c3e8:	464b      	mov	r3, r9
 800c3ea:	4442      	add	r2, r8
 800c3ec:	4631      	mov	r1, r6
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	47b8      	blx	r7
 800c3f2:	3001      	adds	r0, #1
 800c3f4:	d1c1      	bne.n	800c37a <_printf_float+0x342>
 800c3f6:	e680      	b.n	800c0fa <_printf_float+0xc2>
 800c3f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3fa:	2a01      	cmp	r2, #1
 800c3fc:	dc01      	bgt.n	800c402 <_printf_float+0x3ca>
 800c3fe:	07db      	lsls	r3, r3, #31
 800c400:	d538      	bpl.n	800c474 <_printf_float+0x43c>
 800c402:	2301      	movs	r3, #1
 800c404:	4642      	mov	r2, r8
 800c406:	4631      	mov	r1, r6
 800c408:	4628      	mov	r0, r5
 800c40a:	47b8      	blx	r7
 800c40c:	3001      	adds	r0, #1
 800c40e:	f43f ae74 	beq.w	800c0fa <_printf_float+0xc2>
 800c412:	ee18 3a10 	vmov	r3, s16
 800c416:	4652      	mov	r2, sl
 800c418:	4631      	mov	r1, r6
 800c41a:	4628      	mov	r0, r5
 800c41c:	47b8      	blx	r7
 800c41e:	3001      	adds	r0, #1
 800c420:	f43f ae6b 	beq.w	800c0fa <_printf_float+0xc2>
 800c424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c428:	2200      	movs	r2, #0
 800c42a:	2300      	movs	r3, #0
 800c42c:	f7f4 fb64 	bl	8000af8 <__aeabi_dcmpeq>
 800c430:	b9d8      	cbnz	r0, 800c46a <_printf_float+0x432>
 800c432:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c434:	f108 0201 	add.w	r2, r8, #1
 800c438:	3b01      	subs	r3, #1
 800c43a:	4631      	mov	r1, r6
 800c43c:	4628      	mov	r0, r5
 800c43e:	47b8      	blx	r7
 800c440:	3001      	adds	r0, #1
 800c442:	d10e      	bne.n	800c462 <_printf_float+0x42a>
 800c444:	e659      	b.n	800c0fa <_printf_float+0xc2>
 800c446:	2301      	movs	r3, #1
 800c448:	4652      	mov	r2, sl
 800c44a:	4631      	mov	r1, r6
 800c44c:	4628      	mov	r0, r5
 800c44e:	47b8      	blx	r7
 800c450:	3001      	adds	r0, #1
 800c452:	f43f ae52 	beq.w	800c0fa <_printf_float+0xc2>
 800c456:	f108 0801 	add.w	r8, r8, #1
 800c45a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c45c:	3b01      	subs	r3, #1
 800c45e:	4543      	cmp	r3, r8
 800c460:	dcf1      	bgt.n	800c446 <_printf_float+0x40e>
 800c462:	464b      	mov	r3, r9
 800c464:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c468:	e6dc      	b.n	800c224 <_printf_float+0x1ec>
 800c46a:	f04f 0800 	mov.w	r8, #0
 800c46e:	f104 0a1a 	add.w	sl, r4, #26
 800c472:	e7f2      	b.n	800c45a <_printf_float+0x422>
 800c474:	2301      	movs	r3, #1
 800c476:	4642      	mov	r2, r8
 800c478:	e7df      	b.n	800c43a <_printf_float+0x402>
 800c47a:	2301      	movs	r3, #1
 800c47c:	464a      	mov	r2, r9
 800c47e:	4631      	mov	r1, r6
 800c480:	4628      	mov	r0, r5
 800c482:	47b8      	blx	r7
 800c484:	3001      	adds	r0, #1
 800c486:	f43f ae38 	beq.w	800c0fa <_printf_float+0xc2>
 800c48a:	f108 0801 	add.w	r8, r8, #1
 800c48e:	68e3      	ldr	r3, [r4, #12]
 800c490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c492:	1a5b      	subs	r3, r3, r1
 800c494:	4543      	cmp	r3, r8
 800c496:	dcf0      	bgt.n	800c47a <_printf_float+0x442>
 800c498:	e6fa      	b.n	800c290 <_printf_float+0x258>
 800c49a:	f04f 0800 	mov.w	r8, #0
 800c49e:	f104 0919 	add.w	r9, r4, #25
 800c4a2:	e7f4      	b.n	800c48e <_printf_float+0x456>

0800c4a4 <_printf_common>:
 800c4a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4a8:	4616      	mov	r6, r2
 800c4aa:	4699      	mov	r9, r3
 800c4ac:	688a      	ldr	r2, [r1, #8]
 800c4ae:	690b      	ldr	r3, [r1, #16]
 800c4b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	bfb8      	it	lt
 800c4b8:	4613      	movlt	r3, r2
 800c4ba:	6033      	str	r3, [r6, #0]
 800c4bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c4c0:	4607      	mov	r7, r0
 800c4c2:	460c      	mov	r4, r1
 800c4c4:	b10a      	cbz	r2, 800c4ca <_printf_common+0x26>
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	6033      	str	r3, [r6, #0]
 800c4ca:	6823      	ldr	r3, [r4, #0]
 800c4cc:	0699      	lsls	r1, r3, #26
 800c4ce:	bf42      	ittt	mi
 800c4d0:	6833      	ldrmi	r3, [r6, #0]
 800c4d2:	3302      	addmi	r3, #2
 800c4d4:	6033      	strmi	r3, [r6, #0]
 800c4d6:	6825      	ldr	r5, [r4, #0]
 800c4d8:	f015 0506 	ands.w	r5, r5, #6
 800c4dc:	d106      	bne.n	800c4ec <_printf_common+0x48>
 800c4de:	f104 0a19 	add.w	sl, r4, #25
 800c4e2:	68e3      	ldr	r3, [r4, #12]
 800c4e4:	6832      	ldr	r2, [r6, #0]
 800c4e6:	1a9b      	subs	r3, r3, r2
 800c4e8:	42ab      	cmp	r3, r5
 800c4ea:	dc26      	bgt.n	800c53a <_printf_common+0x96>
 800c4ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c4f0:	1e13      	subs	r3, r2, #0
 800c4f2:	6822      	ldr	r2, [r4, #0]
 800c4f4:	bf18      	it	ne
 800c4f6:	2301      	movne	r3, #1
 800c4f8:	0692      	lsls	r2, r2, #26
 800c4fa:	d42b      	bmi.n	800c554 <_printf_common+0xb0>
 800c4fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c500:	4649      	mov	r1, r9
 800c502:	4638      	mov	r0, r7
 800c504:	47c0      	blx	r8
 800c506:	3001      	adds	r0, #1
 800c508:	d01e      	beq.n	800c548 <_printf_common+0xa4>
 800c50a:	6823      	ldr	r3, [r4, #0]
 800c50c:	68e5      	ldr	r5, [r4, #12]
 800c50e:	6832      	ldr	r2, [r6, #0]
 800c510:	f003 0306 	and.w	r3, r3, #6
 800c514:	2b04      	cmp	r3, #4
 800c516:	bf08      	it	eq
 800c518:	1aad      	subeq	r5, r5, r2
 800c51a:	68a3      	ldr	r3, [r4, #8]
 800c51c:	6922      	ldr	r2, [r4, #16]
 800c51e:	bf0c      	ite	eq
 800c520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c524:	2500      	movne	r5, #0
 800c526:	4293      	cmp	r3, r2
 800c528:	bfc4      	itt	gt
 800c52a:	1a9b      	subgt	r3, r3, r2
 800c52c:	18ed      	addgt	r5, r5, r3
 800c52e:	2600      	movs	r6, #0
 800c530:	341a      	adds	r4, #26
 800c532:	42b5      	cmp	r5, r6
 800c534:	d11a      	bne.n	800c56c <_printf_common+0xc8>
 800c536:	2000      	movs	r0, #0
 800c538:	e008      	b.n	800c54c <_printf_common+0xa8>
 800c53a:	2301      	movs	r3, #1
 800c53c:	4652      	mov	r2, sl
 800c53e:	4649      	mov	r1, r9
 800c540:	4638      	mov	r0, r7
 800c542:	47c0      	blx	r8
 800c544:	3001      	adds	r0, #1
 800c546:	d103      	bne.n	800c550 <_printf_common+0xac>
 800c548:	f04f 30ff 	mov.w	r0, #4294967295
 800c54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c550:	3501      	adds	r5, #1
 800c552:	e7c6      	b.n	800c4e2 <_printf_common+0x3e>
 800c554:	18e1      	adds	r1, r4, r3
 800c556:	1c5a      	adds	r2, r3, #1
 800c558:	2030      	movs	r0, #48	; 0x30
 800c55a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c55e:	4422      	add	r2, r4
 800c560:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c564:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c568:	3302      	adds	r3, #2
 800c56a:	e7c7      	b.n	800c4fc <_printf_common+0x58>
 800c56c:	2301      	movs	r3, #1
 800c56e:	4622      	mov	r2, r4
 800c570:	4649      	mov	r1, r9
 800c572:	4638      	mov	r0, r7
 800c574:	47c0      	blx	r8
 800c576:	3001      	adds	r0, #1
 800c578:	d0e6      	beq.n	800c548 <_printf_common+0xa4>
 800c57a:	3601      	adds	r6, #1
 800c57c:	e7d9      	b.n	800c532 <_printf_common+0x8e>
	...

0800c580 <_printf_i>:
 800c580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c584:	7e0f      	ldrb	r7, [r1, #24]
 800c586:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c588:	2f78      	cmp	r7, #120	; 0x78
 800c58a:	4691      	mov	r9, r2
 800c58c:	4680      	mov	r8, r0
 800c58e:	460c      	mov	r4, r1
 800c590:	469a      	mov	sl, r3
 800c592:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c596:	d807      	bhi.n	800c5a8 <_printf_i+0x28>
 800c598:	2f62      	cmp	r7, #98	; 0x62
 800c59a:	d80a      	bhi.n	800c5b2 <_printf_i+0x32>
 800c59c:	2f00      	cmp	r7, #0
 800c59e:	f000 80d8 	beq.w	800c752 <_printf_i+0x1d2>
 800c5a2:	2f58      	cmp	r7, #88	; 0x58
 800c5a4:	f000 80a3 	beq.w	800c6ee <_printf_i+0x16e>
 800c5a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c5b0:	e03a      	b.n	800c628 <_printf_i+0xa8>
 800c5b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c5b6:	2b15      	cmp	r3, #21
 800c5b8:	d8f6      	bhi.n	800c5a8 <_printf_i+0x28>
 800c5ba:	a101      	add	r1, pc, #4	; (adr r1, 800c5c0 <_printf_i+0x40>)
 800c5bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c5c0:	0800c619 	.word	0x0800c619
 800c5c4:	0800c62d 	.word	0x0800c62d
 800c5c8:	0800c5a9 	.word	0x0800c5a9
 800c5cc:	0800c5a9 	.word	0x0800c5a9
 800c5d0:	0800c5a9 	.word	0x0800c5a9
 800c5d4:	0800c5a9 	.word	0x0800c5a9
 800c5d8:	0800c62d 	.word	0x0800c62d
 800c5dc:	0800c5a9 	.word	0x0800c5a9
 800c5e0:	0800c5a9 	.word	0x0800c5a9
 800c5e4:	0800c5a9 	.word	0x0800c5a9
 800c5e8:	0800c5a9 	.word	0x0800c5a9
 800c5ec:	0800c739 	.word	0x0800c739
 800c5f0:	0800c65d 	.word	0x0800c65d
 800c5f4:	0800c71b 	.word	0x0800c71b
 800c5f8:	0800c5a9 	.word	0x0800c5a9
 800c5fc:	0800c5a9 	.word	0x0800c5a9
 800c600:	0800c75b 	.word	0x0800c75b
 800c604:	0800c5a9 	.word	0x0800c5a9
 800c608:	0800c65d 	.word	0x0800c65d
 800c60c:	0800c5a9 	.word	0x0800c5a9
 800c610:	0800c5a9 	.word	0x0800c5a9
 800c614:	0800c723 	.word	0x0800c723
 800c618:	682b      	ldr	r3, [r5, #0]
 800c61a:	1d1a      	adds	r2, r3, #4
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	602a      	str	r2, [r5, #0]
 800c620:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c624:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c628:	2301      	movs	r3, #1
 800c62a:	e0a3      	b.n	800c774 <_printf_i+0x1f4>
 800c62c:	6820      	ldr	r0, [r4, #0]
 800c62e:	6829      	ldr	r1, [r5, #0]
 800c630:	0606      	lsls	r6, r0, #24
 800c632:	f101 0304 	add.w	r3, r1, #4
 800c636:	d50a      	bpl.n	800c64e <_printf_i+0xce>
 800c638:	680e      	ldr	r6, [r1, #0]
 800c63a:	602b      	str	r3, [r5, #0]
 800c63c:	2e00      	cmp	r6, #0
 800c63e:	da03      	bge.n	800c648 <_printf_i+0xc8>
 800c640:	232d      	movs	r3, #45	; 0x2d
 800c642:	4276      	negs	r6, r6
 800c644:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c648:	485e      	ldr	r0, [pc, #376]	; (800c7c4 <_printf_i+0x244>)
 800c64a:	230a      	movs	r3, #10
 800c64c:	e019      	b.n	800c682 <_printf_i+0x102>
 800c64e:	680e      	ldr	r6, [r1, #0]
 800c650:	602b      	str	r3, [r5, #0]
 800c652:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c656:	bf18      	it	ne
 800c658:	b236      	sxthne	r6, r6
 800c65a:	e7ef      	b.n	800c63c <_printf_i+0xbc>
 800c65c:	682b      	ldr	r3, [r5, #0]
 800c65e:	6820      	ldr	r0, [r4, #0]
 800c660:	1d19      	adds	r1, r3, #4
 800c662:	6029      	str	r1, [r5, #0]
 800c664:	0601      	lsls	r1, r0, #24
 800c666:	d501      	bpl.n	800c66c <_printf_i+0xec>
 800c668:	681e      	ldr	r6, [r3, #0]
 800c66a:	e002      	b.n	800c672 <_printf_i+0xf2>
 800c66c:	0646      	lsls	r6, r0, #25
 800c66e:	d5fb      	bpl.n	800c668 <_printf_i+0xe8>
 800c670:	881e      	ldrh	r6, [r3, #0]
 800c672:	4854      	ldr	r0, [pc, #336]	; (800c7c4 <_printf_i+0x244>)
 800c674:	2f6f      	cmp	r7, #111	; 0x6f
 800c676:	bf0c      	ite	eq
 800c678:	2308      	moveq	r3, #8
 800c67a:	230a      	movne	r3, #10
 800c67c:	2100      	movs	r1, #0
 800c67e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c682:	6865      	ldr	r5, [r4, #4]
 800c684:	60a5      	str	r5, [r4, #8]
 800c686:	2d00      	cmp	r5, #0
 800c688:	bfa2      	ittt	ge
 800c68a:	6821      	ldrge	r1, [r4, #0]
 800c68c:	f021 0104 	bicge.w	r1, r1, #4
 800c690:	6021      	strge	r1, [r4, #0]
 800c692:	b90e      	cbnz	r6, 800c698 <_printf_i+0x118>
 800c694:	2d00      	cmp	r5, #0
 800c696:	d04d      	beq.n	800c734 <_printf_i+0x1b4>
 800c698:	4615      	mov	r5, r2
 800c69a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c69e:	fb03 6711 	mls	r7, r3, r1, r6
 800c6a2:	5dc7      	ldrb	r7, [r0, r7]
 800c6a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c6a8:	4637      	mov	r7, r6
 800c6aa:	42bb      	cmp	r3, r7
 800c6ac:	460e      	mov	r6, r1
 800c6ae:	d9f4      	bls.n	800c69a <_printf_i+0x11a>
 800c6b0:	2b08      	cmp	r3, #8
 800c6b2:	d10b      	bne.n	800c6cc <_printf_i+0x14c>
 800c6b4:	6823      	ldr	r3, [r4, #0]
 800c6b6:	07de      	lsls	r6, r3, #31
 800c6b8:	d508      	bpl.n	800c6cc <_printf_i+0x14c>
 800c6ba:	6923      	ldr	r3, [r4, #16]
 800c6bc:	6861      	ldr	r1, [r4, #4]
 800c6be:	4299      	cmp	r1, r3
 800c6c0:	bfde      	ittt	le
 800c6c2:	2330      	movle	r3, #48	; 0x30
 800c6c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c6c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c6cc:	1b52      	subs	r2, r2, r5
 800c6ce:	6122      	str	r2, [r4, #16]
 800c6d0:	f8cd a000 	str.w	sl, [sp]
 800c6d4:	464b      	mov	r3, r9
 800c6d6:	aa03      	add	r2, sp, #12
 800c6d8:	4621      	mov	r1, r4
 800c6da:	4640      	mov	r0, r8
 800c6dc:	f7ff fee2 	bl	800c4a4 <_printf_common>
 800c6e0:	3001      	adds	r0, #1
 800c6e2:	d14c      	bne.n	800c77e <_printf_i+0x1fe>
 800c6e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c6e8:	b004      	add	sp, #16
 800c6ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6ee:	4835      	ldr	r0, [pc, #212]	; (800c7c4 <_printf_i+0x244>)
 800c6f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c6f4:	6829      	ldr	r1, [r5, #0]
 800c6f6:	6823      	ldr	r3, [r4, #0]
 800c6f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800c6fc:	6029      	str	r1, [r5, #0]
 800c6fe:	061d      	lsls	r5, r3, #24
 800c700:	d514      	bpl.n	800c72c <_printf_i+0x1ac>
 800c702:	07df      	lsls	r7, r3, #31
 800c704:	bf44      	itt	mi
 800c706:	f043 0320 	orrmi.w	r3, r3, #32
 800c70a:	6023      	strmi	r3, [r4, #0]
 800c70c:	b91e      	cbnz	r6, 800c716 <_printf_i+0x196>
 800c70e:	6823      	ldr	r3, [r4, #0]
 800c710:	f023 0320 	bic.w	r3, r3, #32
 800c714:	6023      	str	r3, [r4, #0]
 800c716:	2310      	movs	r3, #16
 800c718:	e7b0      	b.n	800c67c <_printf_i+0xfc>
 800c71a:	6823      	ldr	r3, [r4, #0]
 800c71c:	f043 0320 	orr.w	r3, r3, #32
 800c720:	6023      	str	r3, [r4, #0]
 800c722:	2378      	movs	r3, #120	; 0x78
 800c724:	4828      	ldr	r0, [pc, #160]	; (800c7c8 <_printf_i+0x248>)
 800c726:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c72a:	e7e3      	b.n	800c6f4 <_printf_i+0x174>
 800c72c:	0659      	lsls	r1, r3, #25
 800c72e:	bf48      	it	mi
 800c730:	b2b6      	uxthmi	r6, r6
 800c732:	e7e6      	b.n	800c702 <_printf_i+0x182>
 800c734:	4615      	mov	r5, r2
 800c736:	e7bb      	b.n	800c6b0 <_printf_i+0x130>
 800c738:	682b      	ldr	r3, [r5, #0]
 800c73a:	6826      	ldr	r6, [r4, #0]
 800c73c:	6961      	ldr	r1, [r4, #20]
 800c73e:	1d18      	adds	r0, r3, #4
 800c740:	6028      	str	r0, [r5, #0]
 800c742:	0635      	lsls	r5, r6, #24
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	d501      	bpl.n	800c74c <_printf_i+0x1cc>
 800c748:	6019      	str	r1, [r3, #0]
 800c74a:	e002      	b.n	800c752 <_printf_i+0x1d2>
 800c74c:	0670      	lsls	r0, r6, #25
 800c74e:	d5fb      	bpl.n	800c748 <_printf_i+0x1c8>
 800c750:	8019      	strh	r1, [r3, #0]
 800c752:	2300      	movs	r3, #0
 800c754:	6123      	str	r3, [r4, #16]
 800c756:	4615      	mov	r5, r2
 800c758:	e7ba      	b.n	800c6d0 <_printf_i+0x150>
 800c75a:	682b      	ldr	r3, [r5, #0]
 800c75c:	1d1a      	adds	r2, r3, #4
 800c75e:	602a      	str	r2, [r5, #0]
 800c760:	681d      	ldr	r5, [r3, #0]
 800c762:	6862      	ldr	r2, [r4, #4]
 800c764:	2100      	movs	r1, #0
 800c766:	4628      	mov	r0, r5
 800c768:	f7f3 fd52 	bl	8000210 <memchr>
 800c76c:	b108      	cbz	r0, 800c772 <_printf_i+0x1f2>
 800c76e:	1b40      	subs	r0, r0, r5
 800c770:	6060      	str	r0, [r4, #4]
 800c772:	6863      	ldr	r3, [r4, #4]
 800c774:	6123      	str	r3, [r4, #16]
 800c776:	2300      	movs	r3, #0
 800c778:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c77c:	e7a8      	b.n	800c6d0 <_printf_i+0x150>
 800c77e:	6923      	ldr	r3, [r4, #16]
 800c780:	462a      	mov	r2, r5
 800c782:	4649      	mov	r1, r9
 800c784:	4640      	mov	r0, r8
 800c786:	47d0      	blx	sl
 800c788:	3001      	adds	r0, #1
 800c78a:	d0ab      	beq.n	800c6e4 <_printf_i+0x164>
 800c78c:	6823      	ldr	r3, [r4, #0]
 800c78e:	079b      	lsls	r3, r3, #30
 800c790:	d413      	bmi.n	800c7ba <_printf_i+0x23a>
 800c792:	68e0      	ldr	r0, [r4, #12]
 800c794:	9b03      	ldr	r3, [sp, #12]
 800c796:	4298      	cmp	r0, r3
 800c798:	bfb8      	it	lt
 800c79a:	4618      	movlt	r0, r3
 800c79c:	e7a4      	b.n	800c6e8 <_printf_i+0x168>
 800c79e:	2301      	movs	r3, #1
 800c7a0:	4632      	mov	r2, r6
 800c7a2:	4649      	mov	r1, r9
 800c7a4:	4640      	mov	r0, r8
 800c7a6:	47d0      	blx	sl
 800c7a8:	3001      	adds	r0, #1
 800c7aa:	d09b      	beq.n	800c6e4 <_printf_i+0x164>
 800c7ac:	3501      	adds	r5, #1
 800c7ae:	68e3      	ldr	r3, [r4, #12]
 800c7b0:	9903      	ldr	r1, [sp, #12]
 800c7b2:	1a5b      	subs	r3, r3, r1
 800c7b4:	42ab      	cmp	r3, r5
 800c7b6:	dcf2      	bgt.n	800c79e <_printf_i+0x21e>
 800c7b8:	e7eb      	b.n	800c792 <_printf_i+0x212>
 800c7ba:	2500      	movs	r5, #0
 800c7bc:	f104 0619 	add.w	r6, r4, #25
 800c7c0:	e7f5      	b.n	800c7ae <_printf_i+0x22e>
 800c7c2:	bf00      	nop
 800c7c4:	08010a4a 	.word	0x08010a4a
 800c7c8:	08010a5b 	.word	0x08010a5b

0800c7cc <_scanf_float>:
 800c7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7d0:	b087      	sub	sp, #28
 800c7d2:	4617      	mov	r7, r2
 800c7d4:	9303      	str	r3, [sp, #12]
 800c7d6:	688b      	ldr	r3, [r1, #8]
 800c7d8:	1e5a      	subs	r2, r3, #1
 800c7da:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c7de:	bf83      	ittte	hi
 800c7e0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c7e4:	195b      	addhi	r3, r3, r5
 800c7e6:	9302      	strhi	r3, [sp, #8]
 800c7e8:	2300      	movls	r3, #0
 800c7ea:	bf86      	itte	hi
 800c7ec:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c7f0:	608b      	strhi	r3, [r1, #8]
 800c7f2:	9302      	strls	r3, [sp, #8]
 800c7f4:	680b      	ldr	r3, [r1, #0]
 800c7f6:	468b      	mov	fp, r1
 800c7f8:	2500      	movs	r5, #0
 800c7fa:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c7fe:	f84b 3b1c 	str.w	r3, [fp], #28
 800c802:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c806:	4680      	mov	r8, r0
 800c808:	460c      	mov	r4, r1
 800c80a:	465e      	mov	r6, fp
 800c80c:	46aa      	mov	sl, r5
 800c80e:	46a9      	mov	r9, r5
 800c810:	9501      	str	r5, [sp, #4]
 800c812:	68a2      	ldr	r2, [r4, #8]
 800c814:	b152      	cbz	r2, 800c82c <_scanf_float+0x60>
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	2b4e      	cmp	r3, #78	; 0x4e
 800c81c:	d864      	bhi.n	800c8e8 <_scanf_float+0x11c>
 800c81e:	2b40      	cmp	r3, #64	; 0x40
 800c820:	d83c      	bhi.n	800c89c <_scanf_float+0xd0>
 800c822:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c826:	b2c8      	uxtb	r0, r1
 800c828:	280e      	cmp	r0, #14
 800c82a:	d93a      	bls.n	800c8a2 <_scanf_float+0xd6>
 800c82c:	f1b9 0f00 	cmp.w	r9, #0
 800c830:	d003      	beq.n	800c83a <_scanf_float+0x6e>
 800c832:	6823      	ldr	r3, [r4, #0]
 800c834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c838:	6023      	str	r3, [r4, #0]
 800c83a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c83e:	f1ba 0f01 	cmp.w	sl, #1
 800c842:	f200 8113 	bhi.w	800ca6c <_scanf_float+0x2a0>
 800c846:	455e      	cmp	r6, fp
 800c848:	f200 8105 	bhi.w	800ca56 <_scanf_float+0x28a>
 800c84c:	2501      	movs	r5, #1
 800c84e:	4628      	mov	r0, r5
 800c850:	b007      	add	sp, #28
 800c852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c856:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c85a:	2a0d      	cmp	r2, #13
 800c85c:	d8e6      	bhi.n	800c82c <_scanf_float+0x60>
 800c85e:	a101      	add	r1, pc, #4	; (adr r1, 800c864 <_scanf_float+0x98>)
 800c860:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c864:	0800c9a3 	.word	0x0800c9a3
 800c868:	0800c82d 	.word	0x0800c82d
 800c86c:	0800c82d 	.word	0x0800c82d
 800c870:	0800c82d 	.word	0x0800c82d
 800c874:	0800ca03 	.word	0x0800ca03
 800c878:	0800c9db 	.word	0x0800c9db
 800c87c:	0800c82d 	.word	0x0800c82d
 800c880:	0800c82d 	.word	0x0800c82d
 800c884:	0800c9b1 	.word	0x0800c9b1
 800c888:	0800c82d 	.word	0x0800c82d
 800c88c:	0800c82d 	.word	0x0800c82d
 800c890:	0800c82d 	.word	0x0800c82d
 800c894:	0800c82d 	.word	0x0800c82d
 800c898:	0800c969 	.word	0x0800c969
 800c89c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c8a0:	e7db      	b.n	800c85a <_scanf_float+0x8e>
 800c8a2:	290e      	cmp	r1, #14
 800c8a4:	d8c2      	bhi.n	800c82c <_scanf_float+0x60>
 800c8a6:	a001      	add	r0, pc, #4	; (adr r0, 800c8ac <_scanf_float+0xe0>)
 800c8a8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c8ac:	0800c95b 	.word	0x0800c95b
 800c8b0:	0800c82d 	.word	0x0800c82d
 800c8b4:	0800c95b 	.word	0x0800c95b
 800c8b8:	0800c9ef 	.word	0x0800c9ef
 800c8bc:	0800c82d 	.word	0x0800c82d
 800c8c0:	0800c909 	.word	0x0800c909
 800c8c4:	0800c945 	.word	0x0800c945
 800c8c8:	0800c945 	.word	0x0800c945
 800c8cc:	0800c945 	.word	0x0800c945
 800c8d0:	0800c945 	.word	0x0800c945
 800c8d4:	0800c945 	.word	0x0800c945
 800c8d8:	0800c945 	.word	0x0800c945
 800c8dc:	0800c945 	.word	0x0800c945
 800c8e0:	0800c945 	.word	0x0800c945
 800c8e4:	0800c945 	.word	0x0800c945
 800c8e8:	2b6e      	cmp	r3, #110	; 0x6e
 800c8ea:	d809      	bhi.n	800c900 <_scanf_float+0x134>
 800c8ec:	2b60      	cmp	r3, #96	; 0x60
 800c8ee:	d8b2      	bhi.n	800c856 <_scanf_float+0x8a>
 800c8f0:	2b54      	cmp	r3, #84	; 0x54
 800c8f2:	d077      	beq.n	800c9e4 <_scanf_float+0x218>
 800c8f4:	2b59      	cmp	r3, #89	; 0x59
 800c8f6:	d199      	bne.n	800c82c <_scanf_float+0x60>
 800c8f8:	2d07      	cmp	r5, #7
 800c8fa:	d197      	bne.n	800c82c <_scanf_float+0x60>
 800c8fc:	2508      	movs	r5, #8
 800c8fe:	e029      	b.n	800c954 <_scanf_float+0x188>
 800c900:	2b74      	cmp	r3, #116	; 0x74
 800c902:	d06f      	beq.n	800c9e4 <_scanf_float+0x218>
 800c904:	2b79      	cmp	r3, #121	; 0x79
 800c906:	e7f6      	b.n	800c8f6 <_scanf_float+0x12a>
 800c908:	6821      	ldr	r1, [r4, #0]
 800c90a:	05c8      	lsls	r0, r1, #23
 800c90c:	d51a      	bpl.n	800c944 <_scanf_float+0x178>
 800c90e:	9b02      	ldr	r3, [sp, #8]
 800c910:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c914:	6021      	str	r1, [r4, #0]
 800c916:	f109 0901 	add.w	r9, r9, #1
 800c91a:	b11b      	cbz	r3, 800c924 <_scanf_float+0x158>
 800c91c:	3b01      	subs	r3, #1
 800c91e:	3201      	adds	r2, #1
 800c920:	9302      	str	r3, [sp, #8]
 800c922:	60a2      	str	r2, [r4, #8]
 800c924:	68a3      	ldr	r3, [r4, #8]
 800c926:	3b01      	subs	r3, #1
 800c928:	60a3      	str	r3, [r4, #8]
 800c92a:	6923      	ldr	r3, [r4, #16]
 800c92c:	3301      	adds	r3, #1
 800c92e:	6123      	str	r3, [r4, #16]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	3b01      	subs	r3, #1
 800c934:	2b00      	cmp	r3, #0
 800c936:	607b      	str	r3, [r7, #4]
 800c938:	f340 8084 	ble.w	800ca44 <_scanf_float+0x278>
 800c93c:	683b      	ldr	r3, [r7, #0]
 800c93e:	3301      	adds	r3, #1
 800c940:	603b      	str	r3, [r7, #0]
 800c942:	e766      	b.n	800c812 <_scanf_float+0x46>
 800c944:	eb1a 0f05 	cmn.w	sl, r5
 800c948:	f47f af70 	bne.w	800c82c <_scanf_float+0x60>
 800c94c:	6822      	ldr	r2, [r4, #0]
 800c94e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c952:	6022      	str	r2, [r4, #0]
 800c954:	f806 3b01 	strb.w	r3, [r6], #1
 800c958:	e7e4      	b.n	800c924 <_scanf_float+0x158>
 800c95a:	6822      	ldr	r2, [r4, #0]
 800c95c:	0610      	lsls	r0, r2, #24
 800c95e:	f57f af65 	bpl.w	800c82c <_scanf_float+0x60>
 800c962:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c966:	e7f4      	b.n	800c952 <_scanf_float+0x186>
 800c968:	f1ba 0f00 	cmp.w	sl, #0
 800c96c:	d10e      	bne.n	800c98c <_scanf_float+0x1c0>
 800c96e:	f1b9 0f00 	cmp.w	r9, #0
 800c972:	d10e      	bne.n	800c992 <_scanf_float+0x1c6>
 800c974:	6822      	ldr	r2, [r4, #0]
 800c976:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c97a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c97e:	d108      	bne.n	800c992 <_scanf_float+0x1c6>
 800c980:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c984:	6022      	str	r2, [r4, #0]
 800c986:	f04f 0a01 	mov.w	sl, #1
 800c98a:	e7e3      	b.n	800c954 <_scanf_float+0x188>
 800c98c:	f1ba 0f02 	cmp.w	sl, #2
 800c990:	d055      	beq.n	800ca3e <_scanf_float+0x272>
 800c992:	2d01      	cmp	r5, #1
 800c994:	d002      	beq.n	800c99c <_scanf_float+0x1d0>
 800c996:	2d04      	cmp	r5, #4
 800c998:	f47f af48 	bne.w	800c82c <_scanf_float+0x60>
 800c99c:	3501      	adds	r5, #1
 800c99e:	b2ed      	uxtb	r5, r5
 800c9a0:	e7d8      	b.n	800c954 <_scanf_float+0x188>
 800c9a2:	f1ba 0f01 	cmp.w	sl, #1
 800c9a6:	f47f af41 	bne.w	800c82c <_scanf_float+0x60>
 800c9aa:	f04f 0a02 	mov.w	sl, #2
 800c9ae:	e7d1      	b.n	800c954 <_scanf_float+0x188>
 800c9b0:	b97d      	cbnz	r5, 800c9d2 <_scanf_float+0x206>
 800c9b2:	f1b9 0f00 	cmp.w	r9, #0
 800c9b6:	f47f af3c 	bne.w	800c832 <_scanf_float+0x66>
 800c9ba:	6822      	ldr	r2, [r4, #0]
 800c9bc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c9c0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c9c4:	f47f af39 	bne.w	800c83a <_scanf_float+0x6e>
 800c9c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c9cc:	6022      	str	r2, [r4, #0]
 800c9ce:	2501      	movs	r5, #1
 800c9d0:	e7c0      	b.n	800c954 <_scanf_float+0x188>
 800c9d2:	2d03      	cmp	r5, #3
 800c9d4:	d0e2      	beq.n	800c99c <_scanf_float+0x1d0>
 800c9d6:	2d05      	cmp	r5, #5
 800c9d8:	e7de      	b.n	800c998 <_scanf_float+0x1cc>
 800c9da:	2d02      	cmp	r5, #2
 800c9dc:	f47f af26 	bne.w	800c82c <_scanf_float+0x60>
 800c9e0:	2503      	movs	r5, #3
 800c9e2:	e7b7      	b.n	800c954 <_scanf_float+0x188>
 800c9e4:	2d06      	cmp	r5, #6
 800c9e6:	f47f af21 	bne.w	800c82c <_scanf_float+0x60>
 800c9ea:	2507      	movs	r5, #7
 800c9ec:	e7b2      	b.n	800c954 <_scanf_float+0x188>
 800c9ee:	6822      	ldr	r2, [r4, #0]
 800c9f0:	0591      	lsls	r1, r2, #22
 800c9f2:	f57f af1b 	bpl.w	800c82c <_scanf_float+0x60>
 800c9f6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c9fa:	6022      	str	r2, [r4, #0]
 800c9fc:	f8cd 9004 	str.w	r9, [sp, #4]
 800ca00:	e7a8      	b.n	800c954 <_scanf_float+0x188>
 800ca02:	6822      	ldr	r2, [r4, #0]
 800ca04:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ca08:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ca0c:	d006      	beq.n	800ca1c <_scanf_float+0x250>
 800ca0e:	0550      	lsls	r0, r2, #21
 800ca10:	f57f af0c 	bpl.w	800c82c <_scanf_float+0x60>
 800ca14:	f1b9 0f00 	cmp.w	r9, #0
 800ca18:	f43f af0f 	beq.w	800c83a <_scanf_float+0x6e>
 800ca1c:	0591      	lsls	r1, r2, #22
 800ca1e:	bf58      	it	pl
 800ca20:	9901      	ldrpl	r1, [sp, #4]
 800ca22:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ca26:	bf58      	it	pl
 800ca28:	eba9 0101 	subpl.w	r1, r9, r1
 800ca2c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ca30:	bf58      	it	pl
 800ca32:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ca36:	6022      	str	r2, [r4, #0]
 800ca38:	f04f 0900 	mov.w	r9, #0
 800ca3c:	e78a      	b.n	800c954 <_scanf_float+0x188>
 800ca3e:	f04f 0a03 	mov.w	sl, #3
 800ca42:	e787      	b.n	800c954 <_scanf_float+0x188>
 800ca44:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ca48:	4639      	mov	r1, r7
 800ca4a:	4640      	mov	r0, r8
 800ca4c:	4798      	blx	r3
 800ca4e:	2800      	cmp	r0, #0
 800ca50:	f43f aedf 	beq.w	800c812 <_scanf_float+0x46>
 800ca54:	e6ea      	b.n	800c82c <_scanf_float+0x60>
 800ca56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca5a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca5e:	463a      	mov	r2, r7
 800ca60:	4640      	mov	r0, r8
 800ca62:	4798      	blx	r3
 800ca64:	6923      	ldr	r3, [r4, #16]
 800ca66:	3b01      	subs	r3, #1
 800ca68:	6123      	str	r3, [r4, #16]
 800ca6a:	e6ec      	b.n	800c846 <_scanf_float+0x7a>
 800ca6c:	1e6b      	subs	r3, r5, #1
 800ca6e:	2b06      	cmp	r3, #6
 800ca70:	d825      	bhi.n	800cabe <_scanf_float+0x2f2>
 800ca72:	2d02      	cmp	r5, #2
 800ca74:	d836      	bhi.n	800cae4 <_scanf_float+0x318>
 800ca76:	455e      	cmp	r6, fp
 800ca78:	f67f aee8 	bls.w	800c84c <_scanf_float+0x80>
 800ca7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca80:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ca84:	463a      	mov	r2, r7
 800ca86:	4640      	mov	r0, r8
 800ca88:	4798      	blx	r3
 800ca8a:	6923      	ldr	r3, [r4, #16]
 800ca8c:	3b01      	subs	r3, #1
 800ca8e:	6123      	str	r3, [r4, #16]
 800ca90:	e7f1      	b.n	800ca76 <_scanf_float+0x2aa>
 800ca92:	9802      	ldr	r0, [sp, #8]
 800ca94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ca98:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ca9c:	9002      	str	r0, [sp, #8]
 800ca9e:	463a      	mov	r2, r7
 800caa0:	4640      	mov	r0, r8
 800caa2:	4798      	blx	r3
 800caa4:	6923      	ldr	r3, [r4, #16]
 800caa6:	3b01      	subs	r3, #1
 800caa8:	6123      	str	r3, [r4, #16]
 800caaa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800caae:	fa5f fa8a 	uxtb.w	sl, sl
 800cab2:	f1ba 0f02 	cmp.w	sl, #2
 800cab6:	d1ec      	bne.n	800ca92 <_scanf_float+0x2c6>
 800cab8:	3d03      	subs	r5, #3
 800caba:	b2ed      	uxtb	r5, r5
 800cabc:	1b76      	subs	r6, r6, r5
 800cabe:	6823      	ldr	r3, [r4, #0]
 800cac0:	05da      	lsls	r2, r3, #23
 800cac2:	d52f      	bpl.n	800cb24 <_scanf_float+0x358>
 800cac4:	055b      	lsls	r3, r3, #21
 800cac6:	d510      	bpl.n	800caea <_scanf_float+0x31e>
 800cac8:	455e      	cmp	r6, fp
 800caca:	f67f aebf 	bls.w	800c84c <_scanf_float+0x80>
 800cace:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cad2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cad6:	463a      	mov	r2, r7
 800cad8:	4640      	mov	r0, r8
 800cada:	4798      	blx	r3
 800cadc:	6923      	ldr	r3, [r4, #16]
 800cade:	3b01      	subs	r3, #1
 800cae0:	6123      	str	r3, [r4, #16]
 800cae2:	e7f1      	b.n	800cac8 <_scanf_float+0x2fc>
 800cae4:	46aa      	mov	sl, r5
 800cae6:	9602      	str	r6, [sp, #8]
 800cae8:	e7df      	b.n	800caaa <_scanf_float+0x2de>
 800caea:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800caee:	6923      	ldr	r3, [r4, #16]
 800caf0:	2965      	cmp	r1, #101	; 0x65
 800caf2:	f103 33ff 	add.w	r3, r3, #4294967295
 800caf6:	f106 35ff 	add.w	r5, r6, #4294967295
 800cafa:	6123      	str	r3, [r4, #16]
 800cafc:	d00c      	beq.n	800cb18 <_scanf_float+0x34c>
 800cafe:	2945      	cmp	r1, #69	; 0x45
 800cb00:	d00a      	beq.n	800cb18 <_scanf_float+0x34c>
 800cb02:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb06:	463a      	mov	r2, r7
 800cb08:	4640      	mov	r0, r8
 800cb0a:	4798      	blx	r3
 800cb0c:	6923      	ldr	r3, [r4, #16]
 800cb0e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cb12:	3b01      	subs	r3, #1
 800cb14:	1eb5      	subs	r5, r6, #2
 800cb16:	6123      	str	r3, [r4, #16]
 800cb18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800cb1c:	463a      	mov	r2, r7
 800cb1e:	4640      	mov	r0, r8
 800cb20:	4798      	blx	r3
 800cb22:	462e      	mov	r6, r5
 800cb24:	6825      	ldr	r5, [r4, #0]
 800cb26:	f015 0510 	ands.w	r5, r5, #16
 800cb2a:	d159      	bne.n	800cbe0 <_scanf_float+0x414>
 800cb2c:	7035      	strb	r5, [r6, #0]
 800cb2e:	6823      	ldr	r3, [r4, #0]
 800cb30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800cb34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cb38:	d11b      	bne.n	800cb72 <_scanf_float+0x3a6>
 800cb3a:	9b01      	ldr	r3, [sp, #4]
 800cb3c:	454b      	cmp	r3, r9
 800cb3e:	eba3 0209 	sub.w	r2, r3, r9
 800cb42:	d123      	bne.n	800cb8c <_scanf_float+0x3c0>
 800cb44:	2200      	movs	r2, #0
 800cb46:	4659      	mov	r1, fp
 800cb48:	4640      	mov	r0, r8
 800cb4a:	f000 ff5b 	bl	800da04 <_strtod_r>
 800cb4e:	6822      	ldr	r2, [r4, #0]
 800cb50:	9b03      	ldr	r3, [sp, #12]
 800cb52:	f012 0f02 	tst.w	r2, #2
 800cb56:	ec57 6b10 	vmov	r6, r7, d0
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	d021      	beq.n	800cba2 <_scanf_float+0x3d6>
 800cb5e:	9903      	ldr	r1, [sp, #12]
 800cb60:	1d1a      	adds	r2, r3, #4
 800cb62:	600a      	str	r2, [r1, #0]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	e9c3 6700 	strd	r6, r7, [r3]
 800cb6a:	68e3      	ldr	r3, [r4, #12]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	60e3      	str	r3, [r4, #12]
 800cb70:	e66d      	b.n	800c84e <_scanf_float+0x82>
 800cb72:	9b04      	ldr	r3, [sp, #16]
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d0e5      	beq.n	800cb44 <_scanf_float+0x378>
 800cb78:	9905      	ldr	r1, [sp, #20]
 800cb7a:	230a      	movs	r3, #10
 800cb7c:	462a      	mov	r2, r5
 800cb7e:	3101      	adds	r1, #1
 800cb80:	4640      	mov	r0, r8
 800cb82:	f000 ffc7 	bl	800db14 <_strtol_r>
 800cb86:	9b04      	ldr	r3, [sp, #16]
 800cb88:	9e05      	ldr	r6, [sp, #20]
 800cb8a:	1ac2      	subs	r2, r0, r3
 800cb8c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800cb90:	429e      	cmp	r6, r3
 800cb92:	bf28      	it	cs
 800cb94:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800cb98:	4912      	ldr	r1, [pc, #72]	; (800cbe4 <_scanf_float+0x418>)
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	f000 f8ee 	bl	800cd7c <siprintf>
 800cba0:	e7d0      	b.n	800cb44 <_scanf_float+0x378>
 800cba2:	9903      	ldr	r1, [sp, #12]
 800cba4:	f012 0f04 	tst.w	r2, #4
 800cba8:	f103 0204 	add.w	r2, r3, #4
 800cbac:	600a      	str	r2, [r1, #0]
 800cbae:	d1d9      	bne.n	800cb64 <_scanf_float+0x398>
 800cbb0:	f8d3 8000 	ldr.w	r8, [r3]
 800cbb4:	ee10 2a10 	vmov	r2, s0
 800cbb8:	ee10 0a10 	vmov	r0, s0
 800cbbc:	463b      	mov	r3, r7
 800cbbe:	4639      	mov	r1, r7
 800cbc0:	f7f3 ffcc 	bl	8000b5c <__aeabi_dcmpun>
 800cbc4:	b128      	cbz	r0, 800cbd2 <_scanf_float+0x406>
 800cbc6:	4808      	ldr	r0, [pc, #32]	; (800cbe8 <_scanf_float+0x41c>)
 800cbc8:	f000 f89e 	bl	800cd08 <nanf>
 800cbcc:	ed88 0a00 	vstr	s0, [r8]
 800cbd0:	e7cb      	b.n	800cb6a <_scanf_float+0x39e>
 800cbd2:	4630      	mov	r0, r6
 800cbd4:	4639      	mov	r1, r7
 800cbd6:	f7f4 f81f 	bl	8000c18 <__aeabi_d2f>
 800cbda:	f8c8 0000 	str.w	r0, [r8]
 800cbde:	e7c4      	b.n	800cb6a <_scanf_float+0x39e>
 800cbe0:	2500      	movs	r5, #0
 800cbe2:	e634      	b.n	800c84e <_scanf_float+0x82>
 800cbe4:	08010a6c 	.word	0x08010a6c
 800cbe8:	08010ee0 	.word	0x08010ee0

0800cbec <iprintf>:
 800cbec:	b40f      	push	{r0, r1, r2, r3}
 800cbee:	4b0a      	ldr	r3, [pc, #40]	; (800cc18 <iprintf+0x2c>)
 800cbf0:	b513      	push	{r0, r1, r4, lr}
 800cbf2:	681c      	ldr	r4, [r3, #0]
 800cbf4:	b124      	cbz	r4, 800cc00 <iprintf+0x14>
 800cbf6:	69a3      	ldr	r3, [r4, #24]
 800cbf8:	b913      	cbnz	r3, 800cc00 <iprintf+0x14>
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f001 ffe0 	bl	800ebc0 <__sinit>
 800cc00:	ab05      	add	r3, sp, #20
 800cc02:	9a04      	ldr	r2, [sp, #16]
 800cc04:	68a1      	ldr	r1, [r4, #8]
 800cc06:	9301      	str	r3, [sp, #4]
 800cc08:	4620      	mov	r0, r4
 800cc0a:	f003 fba9 	bl	8010360 <_vfiprintf_r>
 800cc0e:	b002      	add	sp, #8
 800cc10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc14:	b004      	add	sp, #16
 800cc16:	4770      	bx	lr
 800cc18:	20000194 	.word	0x20000194

0800cc1c <_puts_r>:
 800cc1c:	b570      	push	{r4, r5, r6, lr}
 800cc1e:	460e      	mov	r6, r1
 800cc20:	4605      	mov	r5, r0
 800cc22:	b118      	cbz	r0, 800cc2c <_puts_r+0x10>
 800cc24:	6983      	ldr	r3, [r0, #24]
 800cc26:	b90b      	cbnz	r3, 800cc2c <_puts_r+0x10>
 800cc28:	f001 ffca 	bl	800ebc0 <__sinit>
 800cc2c:	69ab      	ldr	r3, [r5, #24]
 800cc2e:	68ac      	ldr	r4, [r5, #8]
 800cc30:	b913      	cbnz	r3, 800cc38 <_puts_r+0x1c>
 800cc32:	4628      	mov	r0, r5
 800cc34:	f001 ffc4 	bl	800ebc0 <__sinit>
 800cc38:	4b2c      	ldr	r3, [pc, #176]	; (800ccec <_puts_r+0xd0>)
 800cc3a:	429c      	cmp	r4, r3
 800cc3c:	d120      	bne.n	800cc80 <_puts_r+0x64>
 800cc3e:	686c      	ldr	r4, [r5, #4]
 800cc40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cc42:	07db      	lsls	r3, r3, #31
 800cc44:	d405      	bmi.n	800cc52 <_puts_r+0x36>
 800cc46:	89a3      	ldrh	r3, [r4, #12]
 800cc48:	0598      	lsls	r0, r3, #22
 800cc4a:	d402      	bmi.n	800cc52 <_puts_r+0x36>
 800cc4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cc4e:	f002 fbc8 	bl	800f3e2 <__retarget_lock_acquire_recursive>
 800cc52:	89a3      	ldrh	r3, [r4, #12]
 800cc54:	0719      	lsls	r1, r3, #28
 800cc56:	d51d      	bpl.n	800cc94 <_puts_r+0x78>
 800cc58:	6923      	ldr	r3, [r4, #16]
 800cc5a:	b1db      	cbz	r3, 800cc94 <_puts_r+0x78>
 800cc5c:	3e01      	subs	r6, #1
 800cc5e:	68a3      	ldr	r3, [r4, #8]
 800cc60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800cc64:	3b01      	subs	r3, #1
 800cc66:	60a3      	str	r3, [r4, #8]
 800cc68:	bb39      	cbnz	r1, 800ccba <_puts_r+0x9e>
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	da38      	bge.n	800cce0 <_puts_r+0xc4>
 800cc6e:	4622      	mov	r2, r4
 800cc70:	210a      	movs	r1, #10
 800cc72:	4628      	mov	r0, r5
 800cc74:	f000 ff50 	bl	800db18 <__swbuf_r>
 800cc78:	3001      	adds	r0, #1
 800cc7a:	d011      	beq.n	800cca0 <_puts_r+0x84>
 800cc7c:	250a      	movs	r5, #10
 800cc7e:	e011      	b.n	800cca4 <_puts_r+0x88>
 800cc80:	4b1b      	ldr	r3, [pc, #108]	; (800ccf0 <_puts_r+0xd4>)
 800cc82:	429c      	cmp	r4, r3
 800cc84:	d101      	bne.n	800cc8a <_puts_r+0x6e>
 800cc86:	68ac      	ldr	r4, [r5, #8]
 800cc88:	e7da      	b.n	800cc40 <_puts_r+0x24>
 800cc8a:	4b1a      	ldr	r3, [pc, #104]	; (800ccf4 <_puts_r+0xd8>)
 800cc8c:	429c      	cmp	r4, r3
 800cc8e:	bf08      	it	eq
 800cc90:	68ec      	ldreq	r4, [r5, #12]
 800cc92:	e7d5      	b.n	800cc40 <_puts_r+0x24>
 800cc94:	4621      	mov	r1, r4
 800cc96:	4628      	mov	r0, r5
 800cc98:	f000 ff90 	bl	800dbbc <__swsetup_r>
 800cc9c:	2800      	cmp	r0, #0
 800cc9e:	d0dd      	beq.n	800cc5c <_puts_r+0x40>
 800cca0:	f04f 35ff 	mov.w	r5, #4294967295
 800cca4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cca6:	07da      	lsls	r2, r3, #31
 800cca8:	d405      	bmi.n	800ccb6 <_puts_r+0x9a>
 800ccaa:	89a3      	ldrh	r3, [r4, #12]
 800ccac:	059b      	lsls	r3, r3, #22
 800ccae:	d402      	bmi.n	800ccb6 <_puts_r+0x9a>
 800ccb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ccb2:	f002 fb97 	bl	800f3e4 <__retarget_lock_release_recursive>
 800ccb6:	4628      	mov	r0, r5
 800ccb8:	bd70      	pop	{r4, r5, r6, pc}
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	da04      	bge.n	800ccc8 <_puts_r+0xac>
 800ccbe:	69a2      	ldr	r2, [r4, #24]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	dc06      	bgt.n	800ccd2 <_puts_r+0xb6>
 800ccc4:	290a      	cmp	r1, #10
 800ccc6:	d004      	beq.n	800ccd2 <_puts_r+0xb6>
 800ccc8:	6823      	ldr	r3, [r4, #0]
 800ccca:	1c5a      	adds	r2, r3, #1
 800cccc:	6022      	str	r2, [r4, #0]
 800ccce:	7019      	strb	r1, [r3, #0]
 800ccd0:	e7c5      	b.n	800cc5e <_puts_r+0x42>
 800ccd2:	4622      	mov	r2, r4
 800ccd4:	4628      	mov	r0, r5
 800ccd6:	f000 ff1f 	bl	800db18 <__swbuf_r>
 800ccda:	3001      	adds	r0, #1
 800ccdc:	d1bf      	bne.n	800cc5e <_puts_r+0x42>
 800ccde:	e7df      	b.n	800cca0 <_puts_r+0x84>
 800cce0:	6823      	ldr	r3, [r4, #0]
 800cce2:	250a      	movs	r5, #10
 800cce4:	1c5a      	adds	r2, r3, #1
 800cce6:	6022      	str	r2, [r4, #0]
 800cce8:	701d      	strb	r5, [r3, #0]
 800ccea:	e7db      	b.n	800cca4 <_puts_r+0x88>
 800ccec:	08010c7c 	.word	0x08010c7c
 800ccf0:	08010c9c 	.word	0x08010c9c
 800ccf4:	08010c5c 	.word	0x08010c5c

0800ccf8 <puts>:
 800ccf8:	4b02      	ldr	r3, [pc, #8]	; (800cd04 <puts+0xc>)
 800ccfa:	4601      	mov	r1, r0
 800ccfc:	6818      	ldr	r0, [r3, #0]
 800ccfe:	f7ff bf8d 	b.w	800cc1c <_puts_r>
 800cd02:	bf00      	nop
 800cd04:	20000194 	.word	0x20000194

0800cd08 <nanf>:
 800cd08:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cd10 <nanf+0x8>
 800cd0c:	4770      	bx	lr
 800cd0e:	bf00      	nop
 800cd10:	7fc00000 	.word	0x7fc00000

0800cd14 <sniprintf>:
 800cd14:	b40c      	push	{r2, r3}
 800cd16:	b530      	push	{r4, r5, lr}
 800cd18:	4b17      	ldr	r3, [pc, #92]	; (800cd78 <sniprintf+0x64>)
 800cd1a:	1e0c      	subs	r4, r1, #0
 800cd1c:	681d      	ldr	r5, [r3, #0]
 800cd1e:	b09d      	sub	sp, #116	; 0x74
 800cd20:	da08      	bge.n	800cd34 <sniprintf+0x20>
 800cd22:	238b      	movs	r3, #139	; 0x8b
 800cd24:	602b      	str	r3, [r5, #0]
 800cd26:	f04f 30ff 	mov.w	r0, #4294967295
 800cd2a:	b01d      	add	sp, #116	; 0x74
 800cd2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd30:	b002      	add	sp, #8
 800cd32:	4770      	bx	lr
 800cd34:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cd38:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cd3c:	bf14      	ite	ne
 800cd3e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800cd42:	4623      	moveq	r3, r4
 800cd44:	9304      	str	r3, [sp, #16]
 800cd46:	9307      	str	r3, [sp, #28]
 800cd48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cd4c:	9002      	str	r0, [sp, #8]
 800cd4e:	9006      	str	r0, [sp, #24]
 800cd50:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cd54:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cd56:	ab21      	add	r3, sp, #132	; 0x84
 800cd58:	a902      	add	r1, sp, #8
 800cd5a:	4628      	mov	r0, r5
 800cd5c:	9301      	str	r3, [sp, #4]
 800cd5e:	f003 f9d5 	bl	801010c <_svfiprintf_r>
 800cd62:	1c43      	adds	r3, r0, #1
 800cd64:	bfbc      	itt	lt
 800cd66:	238b      	movlt	r3, #139	; 0x8b
 800cd68:	602b      	strlt	r3, [r5, #0]
 800cd6a:	2c00      	cmp	r4, #0
 800cd6c:	d0dd      	beq.n	800cd2a <sniprintf+0x16>
 800cd6e:	9b02      	ldr	r3, [sp, #8]
 800cd70:	2200      	movs	r2, #0
 800cd72:	701a      	strb	r2, [r3, #0]
 800cd74:	e7d9      	b.n	800cd2a <sniprintf+0x16>
 800cd76:	bf00      	nop
 800cd78:	20000194 	.word	0x20000194

0800cd7c <siprintf>:
 800cd7c:	b40e      	push	{r1, r2, r3}
 800cd7e:	b500      	push	{lr}
 800cd80:	b09c      	sub	sp, #112	; 0x70
 800cd82:	ab1d      	add	r3, sp, #116	; 0x74
 800cd84:	9002      	str	r0, [sp, #8]
 800cd86:	9006      	str	r0, [sp, #24]
 800cd88:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd8c:	4809      	ldr	r0, [pc, #36]	; (800cdb4 <siprintf+0x38>)
 800cd8e:	9107      	str	r1, [sp, #28]
 800cd90:	9104      	str	r1, [sp, #16]
 800cd92:	4909      	ldr	r1, [pc, #36]	; (800cdb8 <siprintf+0x3c>)
 800cd94:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd98:	9105      	str	r1, [sp, #20]
 800cd9a:	6800      	ldr	r0, [r0, #0]
 800cd9c:	9301      	str	r3, [sp, #4]
 800cd9e:	a902      	add	r1, sp, #8
 800cda0:	f003 f9b4 	bl	801010c <_svfiprintf_r>
 800cda4:	9b02      	ldr	r3, [sp, #8]
 800cda6:	2200      	movs	r2, #0
 800cda8:	701a      	strb	r2, [r3, #0]
 800cdaa:	b01c      	add	sp, #112	; 0x70
 800cdac:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdb0:	b003      	add	sp, #12
 800cdb2:	4770      	bx	lr
 800cdb4:	20000194 	.word	0x20000194
 800cdb8:	ffff0208 	.word	0xffff0208

0800cdbc <sulp>:
 800cdbc:	b570      	push	{r4, r5, r6, lr}
 800cdbe:	4604      	mov	r4, r0
 800cdc0:	460d      	mov	r5, r1
 800cdc2:	ec45 4b10 	vmov	d0, r4, r5
 800cdc6:	4616      	mov	r6, r2
 800cdc8:	f002 fefe 	bl	800fbc8 <__ulp>
 800cdcc:	ec51 0b10 	vmov	r0, r1, d0
 800cdd0:	b17e      	cbz	r6, 800cdf2 <sulp+0x36>
 800cdd2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cdd6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	dd09      	ble.n	800cdf2 <sulp+0x36>
 800cdde:	051b      	lsls	r3, r3, #20
 800cde0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800cde4:	2400      	movs	r4, #0
 800cde6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800cdea:	4622      	mov	r2, r4
 800cdec:	462b      	mov	r3, r5
 800cdee:	f7f3 fc1b 	bl	8000628 <__aeabi_dmul>
 800cdf2:	bd70      	pop	{r4, r5, r6, pc}
 800cdf4:	0000      	movs	r0, r0
	...

0800cdf8 <_strtod_l>:
 800cdf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdfc:	ed2d 8b02 	vpush	{d8}
 800ce00:	b09d      	sub	sp, #116	; 0x74
 800ce02:	461f      	mov	r7, r3
 800ce04:	2300      	movs	r3, #0
 800ce06:	9318      	str	r3, [sp, #96]	; 0x60
 800ce08:	4ba2      	ldr	r3, [pc, #648]	; (800d094 <_strtod_l+0x29c>)
 800ce0a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	9305      	str	r3, [sp, #20]
 800ce10:	4604      	mov	r4, r0
 800ce12:	4618      	mov	r0, r3
 800ce14:	4688      	mov	r8, r1
 800ce16:	f7f3 f9f3 	bl	8000200 <strlen>
 800ce1a:	f04f 0a00 	mov.w	sl, #0
 800ce1e:	4605      	mov	r5, r0
 800ce20:	f04f 0b00 	mov.w	fp, #0
 800ce24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ce28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ce2a:	781a      	ldrb	r2, [r3, #0]
 800ce2c:	2a2b      	cmp	r2, #43	; 0x2b
 800ce2e:	d04e      	beq.n	800cece <_strtod_l+0xd6>
 800ce30:	d83b      	bhi.n	800ceaa <_strtod_l+0xb2>
 800ce32:	2a0d      	cmp	r2, #13
 800ce34:	d834      	bhi.n	800cea0 <_strtod_l+0xa8>
 800ce36:	2a08      	cmp	r2, #8
 800ce38:	d834      	bhi.n	800cea4 <_strtod_l+0xac>
 800ce3a:	2a00      	cmp	r2, #0
 800ce3c:	d03e      	beq.n	800cebc <_strtod_l+0xc4>
 800ce3e:	2300      	movs	r3, #0
 800ce40:	930a      	str	r3, [sp, #40]	; 0x28
 800ce42:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ce44:	7833      	ldrb	r3, [r6, #0]
 800ce46:	2b30      	cmp	r3, #48	; 0x30
 800ce48:	f040 80b0 	bne.w	800cfac <_strtod_l+0x1b4>
 800ce4c:	7873      	ldrb	r3, [r6, #1]
 800ce4e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ce52:	2b58      	cmp	r3, #88	; 0x58
 800ce54:	d168      	bne.n	800cf28 <_strtod_l+0x130>
 800ce56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce58:	9301      	str	r3, [sp, #4]
 800ce5a:	ab18      	add	r3, sp, #96	; 0x60
 800ce5c:	9702      	str	r7, [sp, #8]
 800ce5e:	9300      	str	r3, [sp, #0]
 800ce60:	4a8d      	ldr	r2, [pc, #564]	; (800d098 <_strtod_l+0x2a0>)
 800ce62:	ab19      	add	r3, sp, #100	; 0x64
 800ce64:	a917      	add	r1, sp, #92	; 0x5c
 800ce66:	4620      	mov	r0, r4
 800ce68:	f001 ffae 	bl	800edc8 <__gethex>
 800ce6c:	f010 0707 	ands.w	r7, r0, #7
 800ce70:	4605      	mov	r5, r0
 800ce72:	d005      	beq.n	800ce80 <_strtod_l+0x88>
 800ce74:	2f06      	cmp	r7, #6
 800ce76:	d12c      	bne.n	800ced2 <_strtod_l+0xda>
 800ce78:	3601      	adds	r6, #1
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	9617      	str	r6, [sp, #92]	; 0x5c
 800ce7e:	930a      	str	r3, [sp, #40]	; 0x28
 800ce80:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	f040 8590 	bne.w	800d9a8 <_strtod_l+0xbb0>
 800ce88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce8a:	b1eb      	cbz	r3, 800cec8 <_strtod_l+0xd0>
 800ce8c:	4652      	mov	r2, sl
 800ce8e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ce92:	ec43 2b10 	vmov	d0, r2, r3
 800ce96:	b01d      	add	sp, #116	; 0x74
 800ce98:	ecbd 8b02 	vpop	{d8}
 800ce9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cea0:	2a20      	cmp	r2, #32
 800cea2:	d1cc      	bne.n	800ce3e <_strtod_l+0x46>
 800cea4:	3301      	adds	r3, #1
 800cea6:	9317      	str	r3, [sp, #92]	; 0x5c
 800cea8:	e7be      	b.n	800ce28 <_strtod_l+0x30>
 800ceaa:	2a2d      	cmp	r2, #45	; 0x2d
 800ceac:	d1c7      	bne.n	800ce3e <_strtod_l+0x46>
 800ceae:	2201      	movs	r2, #1
 800ceb0:	920a      	str	r2, [sp, #40]	; 0x28
 800ceb2:	1c5a      	adds	r2, r3, #1
 800ceb4:	9217      	str	r2, [sp, #92]	; 0x5c
 800ceb6:	785b      	ldrb	r3, [r3, #1]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1c2      	bne.n	800ce42 <_strtod_l+0x4a>
 800cebc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800cebe:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	f040 856e 	bne.w	800d9a4 <_strtod_l+0xbac>
 800cec8:	4652      	mov	r2, sl
 800ceca:	465b      	mov	r3, fp
 800cecc:	e7e1      	b.n	800ce92 <_strtod_l+0x9a>
 800cece:	2200      	movs	r2, #0
 800ced0:	e7ee      	b.n	800ceb0 <_strtod_l+0xb8>
 800ced2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ced4:	b13a      	cbz	r2, 800cee6 <_strtod_l+0xee>
 800ced6:	2135      	movs	r1, #53	; 0x35
 800ced8:	a81a      	add	r0, sp, #104	; 0x68
 800ceda:	f002 ff80 	bl	800fdde <__copybits>
 800cede:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cee0:	4620      	mov	r0, r4
 800cee2:	f002 fb3f 	bl	800f564 <_Bfree>
 800cee6:	3f01      	subs	r7, #1
 800cee8:	2f04      	cmp	r7, #4
 800ceea:	d806      	bhi.n	800cefa <_strtod_l+0x102>
 800ceec:	e8df f007 	tbb	[pc, r7]
 800cef0:	1714030a 	.word	0x1714030a
 800cef4:	0a          	.byte	0x0a
 800cef5:	00          	.byte	0x00
 800cef6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800cefa:	0728      	lsls	r0, r5, #28
 800cefc:	d5c0      	bpl.n	800ce80 <_strtod_l+0x88>
 800cefe:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800cf02:	e7bd      	b.n	800ce80 <_strtod_l+0x88>
 800cf04:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800cf08:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800cf0a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800cf0e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800cf12:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cf16:	e7f0      	b.n	800cefa <_strtod_l+0x102>
 800cf18:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d09c <_strtod_l+0x2a4>
 800cf1c:	e7ed      	b.n	800cefa <_strtod_l+0x102>
 800cf1e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800cf22:	f04f 3aff 	mov.w	sl, #4294967295
 800cf26:	e7e8      	b.n	800cefa <_strtod_l+0x102>
 800cf28:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf2a:	1c5a      	adds	r2, r3, #1
 800cf2c:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf2e:	785b      	ldrb	r3, [r3, #1]
 800cf30:	2b30      	cmp	r3, #48	; 0x30
 800cf32:	d0f9      	beq.n	800cf28 <_strtod_l+0x130>
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d0a3      	beq.n	800ce80 <_strtod_l+0x88>
 800cf38:	2301      	movs	r3, #1
 800cf3a:	f04f 0900 	mov.w	r9, #0
 800cf3e:	9304      	str	r3, [sp, #16]
 800cf40:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cf42:	9308      	str	r3, [sp, #32]
 800cf44:	f8cd 901c 	str.w	r9, [sp, #28]
 800cf48:	464f      	mov	r7, r9
 800cf4a:	220a      	movs	r2, #10
 800cf4c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800cf4e:	7806      	ldrb	r6, [r0, #0]
 800cf50:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800cf54:	b2d9      	uxtb	r1, r3
 800cf56:	2909      	cmp	r1, #9
 800cf58:	d92a      	bls.n	800cfb0 <_strtod_l+0x1b8>
 800cf5a:	9905      	ldr	r1, [sp, #20]
 800cf5c:	462a      	mov	r2, r5
 800cf5e:	f003 fb8a 	bl	8010676 <strncmp>
 800cf62:	b398      	cbz	r0, 800cfcc <_strtod_l+0x1d4>
 800cf64:	2000      	movs	r0, #0
 800cf66:	4632      	mov	r2, r6
 800cf68:	463d      	mov	r5, r7
 800cf6a:	9005      	str	r0, [sp, #20]
 800cf6c:	4603      	mov	r3, r0
 800cf6e:	2a65      	cmp	r2, #101	; 0x65
 800cf70:	d001      	beq.n	800cf76 <_strtod_l+0x17e>
 800cf72:	2a45      	cmp	r2, #69	; 0x45
 800cf74:	d118      	bne.n	800cfa8 <_strtod_l+0x1b0>
 800cf76:	b91d      	cbnz	r5, 800cf80 <_strtod_l+0x188>
 800cf78:	9a04      	ldr	r2, [sp, #16]
 800cf7a:	4302      	orrs	r2, r0
 800cf7c:	d09e      	beq.n	800cebc <_strtod_l+0xc4>
 800cf7e:	2500      	movs	r5, #0
 800cf80:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800cf84:	f108 0201 	add.w	r2, r8, #1
 800cf88:	9217      	str	r2, [sp, #92]	; 0x5c
 800cf8a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800cf8e:	2a2b      	cmp	r2, #43	; 0x2b
 800cf90:	d075      	beq.n	800d07e <_strtod_l+0x286>
 800cf92:	2a2d      	cmp	r2, #45	; 0x2d
 800cf94:	d07b      	beq.n	800d08e <_strtod_l+0x296>
 800cf96:	f04f 0c00 	mov.w	ip, #0
 800cf9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800cf9e:	2909      	cmp	r1, #9
 800cfa0:	f240 8082 	bls.w	800d0a8 <_strtod_l+0x2b0>
 800cfa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800cfa8:	2600      	movs	r6, #0
 800cfaa:	e09d      	b.n	800d0e8 <_strtod_l+0x2f0>
 800cfac:	2300      	movs	r3, #0
 800cfae:	e7c4      	b.n	800cf3a <_strtod_l+0x142>
 800cfb0:	2f08      	cmp	r7, #8
 800cfb2:	bfd8      	it	le
 800cfb4:	9907      	ldrle	r1, [sp, #28]
 800cfb6:	f100 0001 	add.w	r0, r0, #1
 800cfba:	bfda      	itte	le
 800cfbc:	fb02 3301 	mlale	r3, r2, r1, r3
 800cfc0:	9307      	strle	r3, [sp, #28]
 800cfc2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800cfc6:	3701      	adds	r7, #1
 800cfc8:	9017      	str	r0, [sp, #92]	; 0x5c
 800cfca:	e7bf      	b.n	800cf4c <_strtod_l+0x154>
 800cfcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfce:	195a      	adds	r2, r3, r5
 800cfd0:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfd2:	5d5a      	ldrb	r2, [r3, r5]
 800cfd4:	2f00      	cmp	r7, #0
 800cfd6:	d037      	beq.n	800d048 <_strtod_l+0x250>
 800cfd8:	9005      	str	r0, [sp, #20]
 800cfda:	463d      	mov	r5, r7
 800cfdc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800cfe0:	2b09      	cmp	r3, #9
 800cfe2:	d912      	bls.n	800d00a <_strtod_l+0x212>
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e7c2      	b.n	800cf6e <_strtod_l+0x176>
 800cfe8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cfea:	1c5a      	adds	r2, r3, #1
 800cfec:	9217      	str	r2, [sp, #92]	; 0x5c
 800cfee:	785a      	ldrb	r2, [r3, #1]
 800cff0:	3001      	adds	r0, #1
 800cff2:	2a30      	cmp	r2, #48	; 0x30
 800cff4:	d0f8      	beq.n	800cfe8 <_strtod_l+0x1f0>
 800cff6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cffa:	2b08      	cmp	r3, #8
 800cffc:	f200 84d9 	bhi.w	800d9b2 <_strtod_l+0xbba>
 800d000:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d002:	9005      	str	r0, [sp, #20]
 800d004:	2000      	movs	r0, #0
 800d006:	9308      	str	r3, [sp, #32]
 800d008:	4605      	mov	r5, r0
 800d00a:	3a30      	subs	r2, #48	; 0x30
 800d00c:	f100 0301 	add.w	r3, r0, #1
 800d010:	d014      	beq.n	800d03c <_strtod_l+0x244>
 800d012:	9905      	ldr	r1, [sp, #20]
 800d014:	4419      	add	r1, r3
 800d016:	9105      	str	r1, [sp, #20]
 800d018:	462b      	mov	r3, r5
 800d01a:	eb00 0e05 	add.w	lr, r0, r5
 800d01e:	210a      	movs	r1, #10
 800d020:	4573      	cmp	r3, lr
 800d022:	d113      	bne.n	800d04c <_strtod_l+0x254>
 800d024:	182b      	adds	r3, r5, r0
 800d026:	2b08      	cmp	r3, #8
 800d028:	f105 0501 	add.w	r5, r5, #1
 800d02c:	4405      	add	r5, r0
 800d02e:	dc1c      	bgt.n	800d06a <_strtod_l+0x272>
 800d030:	9907      	ldr	r1, [sp, #28]
 800d032:	230a      	movs	r3, #10
 800d034:	fb03 2301 	mla	r3, r3, r1, r2
 800d038:	9307      	str	r3, [sp, #28]
 800d03a:	2300      	movs	r3, #0
 800d03c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d03e:	1c51      	adds	r1, r2, #1
 800d040:	9117      	str	r1, [sp, #92]	; 0x5c
 800d042:	7852      	ldrb	r2, [r2, #1]
 800d044:	4618      	mov	r0, r3
 800d046:	e7c9      	b.n	800cfdc <_strtod_l+0x1e4>
 800d048:	4638      	mov	r0, r7
 800d04a:	e7d2      	b.n	800cff2 <_strtod_l+0x1fa>
 800d04c:	2b08      	cmp	r3, #8
 800d04e:	dc04      	bgt.n	800d05a <_strtod_l+0x262>
 800d050:	9e07      	ldr	r6, [sp, #28]
 800d052:	434e      	muls	r6, r1
 800d054:	9607      	str	r6, [sp, #28]
 800d056:	3301      	adds	r3, #1
 800d058:	e7e2      	b.n	800d020 <_strtod_l+0x228>
 800d05a:	f103 0c01 	add.w	ip, r3, #1
 800d05e:	f1bc 0f10 	cmp.w	ip, #16
 800d062:	bfd8      	it	le
 800d064:	fb01 f909 	mulle.w	r9, r1, r9
 800d068:	e7f5      	b.n	800d056 <_strtod_l+0x25e>
 800d06a:	2d10      	cmp	r5, #16
 800d06c:	bfdc      	itt	le
 800d06e:	230a      	movle	r3, #10
 800d070:	fb03 2909 	mlale	r9, r3, r9, r2
 800d074:	e7e1      	b.n	800d03a <_strtod_l+0x242>
 800d076:	2300      	movs	r3, #0
 800d078:	9305      	str	r3, [sp, #20]
 800d07a:	2301      	movs	r3, #1
 800d07c:	e77c      	b.n	800cf78 <_strtod_l+0x180>
 800d07e:	f04f 0c00 	mov.w	ip, #0
 800d082:	f108 0202 	add.w	r2, r8, #2
 800d086:	9217      	str	r2, [sp, #92]	; 0x5c
 800d088:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d08c:	e785      	b.n	800cf9a <_strtod_l+0x1a2>
 800d08e:	f04f 0c01 	mov.w	ip, #1
 800d092:	e7f6      	b.n	800d082 <_strtod_l+0x28a>
 800d094:	08010d24 	.word	0x08010d24
 800d098:	08010a74 	.word	0x08010a74
 800d09c:	7ff00000 	.word	0x7ff00000
 800d0a0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d0a2:	1c51      	adds	r1, r2, #1
 800d0a4:	9117      	str	r1, [sp, #92]	; 0x5c
 800d0a6:	7852      	ldrb	r2, [r2, #1]
 800d0a8:	2a30      	cmp	r2, #48	; 0x30
 800d0aa:	d0f9      	beq.n	800d0a0 <_strtod_l+0x2a8>
 800d0ac:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d0b0:	2908      	cmp	r1, #8
 800d0b2:	f63f af79 	bhi.w	800cfa8 <_strtod_l+0x1b0>
 800d0b6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d0ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d0bc:	9206      	str	r2, [sp, #24]
 800d0be:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d0c0:	1c51      	adds	r1, r2, #1
 800d0c2:	9117      	str	r1, [sp, #92]	; 0x5c
 800d0c4:	7852      	ldrb	r2, [r2, #1]
 800d0c6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d0ca:	2e09      	cmp	r6, #9
 800d0cc:	d937      	bls.n	800d13e <_strtod_l+0x346>
 800d0ce:	9e06      	ldr	r6, [sp, #24]
 800d0d0:	1b89      	subs	r1, r1, r6
 800d0d2:	2908      	cmp	r1, #8
 800d0d4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d0d8:	dc02      	bgt.n	800d0e0 <_strtod_l+0x2e8>
 800d0da:	4576      	cmp	r6, lr
 800d0dc:	bfa8      	it	ge
 800d0de:	4676      	movge	r6, lr
 800d0e0:	f1bc 0f00 	cmp.w	ip, #0
 800d0e4:	d000      	beq.n	800d0e8 <_strtod_l+0x2f0>
 800d0e6:	4276      	negs	r6, r6
 800d0e8:	2d00      	cmp	r5, #0
 800d0ea:	d14d      	bne.n	800d188 <_strtod_l+0x390>
 800d0ec:	9904      	ldr	r1, [sp, #16]
 800d0ee:	4301      	orrs	r1, r0
 800d0f0:	f47f aec6 	bne.w	800ce80 <_strtod_l+0x88>
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	f47f aee1 	bne.w	800cebc <_strtod_l+0xc4>
 800d0fa:	2a69      	cmp	r2, #105	; 0x69
 800d0fc:	d027      	beq.n	800d14e <_strtod_l+0x356>
 800d0fe:	dc24      	bgt.n	800d14a <_strtod_l+0x352>
 800d100:	2a49      	cmp	r2, #73	; 0x49
 800d102:	d024      	beq.n	800d14e <_strtod_l+0x356>
 800d104:	2a4e      	cmp	r2, #78	; 0x4e
 800d106:	f47f aed9 	bne.w	800cebc <_strtod_l+0xc4>
 800d10a:	499f      	ldr	r1, [pc, #636]	; (800d388 <_strtod_l+0x590>)
 800d10c:	a817      	add	r0, sp, #92	; 0x5c
 800d10e:	f002 f8b3 	bl	800f278 <__match>
 800d112:	2800      	cmp	r0, #0
 800d114:	f43f aed2 	beq.w	800cebc <_strtod_l+0xc4>
 800d118:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d11a:	781b      	ldrb	r3, [r3, #0]
 800d11c:	2b28      	cmp	r3, #40	; 0x28
 800d11e:	d12d      	bne.n	800d17c <_strtod_l+0x384>
 800d120:	499a      	ldr	r1, [pc, #616]	; (800d38c <_strtod_l+0x594>)
 800d122:	aa1a      	add	r2, sp, #104	; 0x68
 800d124:	a817      	add	r0, sp, #92	; 0x5c
 800d126:	f002 f8bb 	bl	800f2a0 <__hexnan>
 800d12a:	2805      	cmp	r0, #5
 800d12c:	d126      	bne.n	800d17c <_strtod_l+0x384>
 800d12e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d130:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d134:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d138:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d13c:	e6a0      	b.n	800ce80 <_strtod_l+0x88>
 800d13e:	210a      	movs	r1, #10
 800d140:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d144:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d148:	e7b9      	b.n	800d0be <_strtod_l+0x2c6>
 800d14a:	2a6e      	cmp	r2, #110	; 0x6e
 800d14c:	e7db      	b.n	800d106 <_strtod_l+0x30e>
 800d14e:	4990      	ldr	r1, [pc, #576]	; (800d390 <_strtod_l+0x598>)
 800d150:	a817      	add	r0, sp, #92	; 0x5c
 800d152:	f002 f891 	bl	800f278 <__match>
 800d156:	2800      	cmp	r0, #0
 800d158:	f43f aeb0 	beq.w	800cebc <_strtod_l+0xc4>
 800d15c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d15e:	498d      	ldr	r1, [pc, #564]	; (800d394 <_strtod_l+0x59c>)
 800d160:	3b01      	subs	r3, #1
 800d162:	a817      	add	r0, sp, #92	; 0x5c
 800d164:	9317      	str	r3, [sp, #92]	; 0x5c
 800d166:	f002 f887 	bl	800f278 <__match>
 800d16a:	b910      	cbnz	r0, 800d172 <_strtod_l+0x37a>
 800d16c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d16e:	3301      	adds	r3, #1
 800d170:	9317      	str	r3, [sp, #92]	; 0x5c
 800d172:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d3a4 <_strtod_l+0x5ac>
 800d176:	f04f 0a00 	mov.w	sl, #0
 800d17a:	e681      	b.n	800ce80 <_strtod_l+0x88>
 800d17c:	4886      	ldr	r0, [pc, #536]	; (800d398 <_strtod_l+0x5a0>)
 800d17e:	f003 fa1f 	bl	80105c0 <nan>
 800d182:	ec5b ab10 	vmov	sl, fp, d0
 800d186:	e67b      	b.n	800ce80 <_strtod_l+0x88>
 800d188:	9b05      	ldr	r3, [sp, #20]
 800d18a:	9807      	ldr	r0, [sp, #28]
 800d18c:	1af3      	subs	r3, r6, r3
 800d18e:	2f00      	cmp	r7, #0
 800d190:	bf08      	it	eq
 800d192:	462f      	moveq	r7, r5
 800d194:	2d10      	cmp	r5, #16
 800d196:	9306      	str	r3, [sp, #24]
 800d198:	46a8      	mov	r8, r5
 800d19a:	bfa8      	it	ge
 800d19c:	f04f 0810 	movge.w	r8, #16
 800d1a0:	f7f3 f9c8 	bl	8000534 <__aeabi_ui2d>
 800d1a4:	2d09      	cmp	r5, #9
 800d1a6:	4682      	mov	sl, r0
 800d1a8:	468b      	mov	fp, r1
 800d1aa:	dd13      	ble.n	800d1d4 <_strtod_l+0x3dc>
 800d1ac:	4b7b      	ldr	r3, [pc, #492]	; (800d39c <_strtod_l+0x5a4>)
 800d1ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d1b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d1b6:	f7f3 fa37 	bl	8000628 <__aeabi_dmul>
 800d1ba:	4682      	mov	sl, r0
 800d1bc:	4648      	mov	r0, r9
 800d1be:	468b      	mov	fp, r1
 800d1c0:	f7f3 f9b8 	bl	8000534 <__aeabi_ui2d>
 800d1c4:	4602      	mov	r2, r0
 800d1c6:	460b      	mov	r3, r1
 800d1c8:	4650      	mov	r0, sl
 800d1ca:	4659      	mov	r1, fp
 800d1cc:	f7f3 f876 	bl	80002bc <__adddf3>
 800d1d0:	4682      	mov	sl, r0
 800d1d2:	468b      	mov	fp, r1
 800d1d4:	2d0f      	cmp	r5, #15
 800d1d6:	dc38      	bgt.n	800d24a <_strtod_l+0x452>
 800d1d8:	9b06      	ldr	r3, [sp, #24]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f43f ae50 	beq.w	800ce80 <_strtod_l+0x88>
 800d1e0:	dd24      	ble.n	800d22c <_strtod_l+0x434>
 800d1e2:	2b16      	cmp	r3, #22
 800d1e4:	dc0b      	bgt.n	800d1fe <_strtod_l+0x406>
 800d1e6:	496d      	ldr	r1, [pc, #436]	; (800d39c <_strtod_l+0x5a4>)
 800d1e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d1ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d1f0:	4652      	mov	r2, sl
 800d1f2:	465b      	mov	r3, fp
 800d1f4:	f7f3 fa18 	bl	8000628 <__aeabi_dmul>
 800d1f8:	4682      	mov	sl, r0
 800d1fa:	468b      	mov	fp, r1
 800d1fc:	e640      	b.n	800ce80 <_strtod_l+0x88>
 800d1fe:	9a06      	ldr	r2, [sp, #24]
 800d200:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d204:	4293      	cmp	r3, r2
 800d206:	db20      	blt.n	800d24a <_strtod_l+0x452>
 800d208:	4c64      	ldr	r4, [pc, #400]	; (800d39c <_strtod_l+0x5a4>)
 800d20a:	f1c5 050f 	rsb	r5, r5, #15
 800d20e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d212:	4652      	mov	r2, sl
 800d214:	465b      	mov	r3, fp
 800d216:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d21a:	f7f3 fa05 	bl	8000628 <__aeabi_dmul>
 800d21e:	9b06      	ldr	r3, [sp, #24]
 800d220:	1b5d      	subs	r5, r3, r5
 800d222:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d226:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d22a:	e7e3      	b.n	800d1f4 <_strtod_l+0x3fc>
 800d22c:	9b06      	ldr	r3, [sp, #24]
 800d22e:	3316      	adds	r3, #22
 800d230:	db0b      	blt.n	800d24a <_strtod_l+0x452>
 800d232:	9b05      	ldr	r3, [sp, #20]
 800d234:	1b9e      	subs	r6, r3, r6
 800d236:	4b59      	ldr	r3, [pc, #356]	; (800d39c <_strtod_l+0x5a4>)
 800d238:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d23c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d240:	4650      	mov	r0, sl
 800d242:	4659      	mov	r1, fp
 800d244:	f7f3 fb1a 	bl	800087c <__aeabi_ddiv>
 800d248:	e7d6      	b.n	800d1f8 <_strtod_l+0x400>
 800d24a:	9b06      	ldr	r3, [sp, #24]
 800d24c:	eba5 0808 	sub.w	r8, r5, r8
 800d250:	4498      	add	r8, r3
 800d252:	f1b8 0f00 	cmp.w	r8, #0
 800d256:	dd74      	ble.n	800d342 <_strtod_l+0x54a>
 800d258:	f018 030f 	ands.w	r3, r8, #15
 800d25c:	d00a      	beq.n	800d274 <_strtod_l+0x47c>
 800d25e:	494f      	ldr	r1, [pc, #316]	; (800d39c <_strtod_l+0x5a4>)
 800d260:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d264:	4652      	mov	r2, sl
 800d266:	465b      	mov	r3, fp
 800d268:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d26c:	f7f3 f9dc 	bl	8000628 <__aeabi_dmul>
 800d270:	4682      	mov	sl, r0
 800d272:	468b      	mov	fp, r1
 800d274:	f038 080f 	bics.w	r8, r8, #15
 800d278:	d04f      	beq.n	800d31a <_strtod_l+0x522>
 800d27a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d27e:	dd22      	ble.n	800d2c6 <_strtod_l+0x4ce>
 800d280:	2500      	movs	r5, #0
 800d282:	462e      	mov	r6, r5
 800d284:	9507      	str	r5, [sp, #28]
 800d286:	9505      	str	r5, [sp, #20]
 800d288:	2322      	movs	r3, #34	; 0x22
 800d28a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d3a4 <_strtod_l+0x5ac>
 800d28e:	6023      	str	r3, [r4, #0]
 800d290:	f04f 0a00 	mov.w	sl, #0
 800d294:	9b07      	ldr	r3, [sp, #28]
 800d296:	2b00      	cmp	r3, #0
 800d298:	f43f adf2 	beq.w	800ce80 <_strtod_l+0x88>
 800d29c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f002 f960 	bl	800f564 <_Bfree>
 800d2a4:	9905      	ldr	r1, [sp, #20]
 800d2a6:	4620      	mov	r0, r4
 800d2a8:	f002 f95c 	bl	800f564 <_Bfree>
 800d2ac:	4631      	mov	r1, r6
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f002 f958 	bl	800f564 <_Bfree>
 800d2b4:	9907      	ldr	r1, [sp, #28]
 800d2b6:	4620      	mov	r0, r4
 800d2b8:	f002 f954 	bl	800f564 <_Bfree>
 800d2bc:	4629      	mov	r1, r5
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f002 f950 	bl	800f564 <_Bfree>
 800d2c4:	e5dc      	b.n	800ce80 <_strtod_l+0x88>
 800d2c6:	4b36      	ldr	r3, [pc, #216]	; (800d3a0 <_strtod_l+0x5a8>)
 800d2c8:	9304      	str	r3, [sp, #16]
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d2d0:	4650      	mov	r0, sl
 800d2d2:	4659      	mov	r1, fp
 800d2d4:	4699      	mov	r9, r3
 800d2d6:	f1b8 0f01 	cmp.w	r8, #1
 800d2da:	dc21      	bgt.n	800d320 <_strtod_l+0x528>
 800d2dc:	b10b      	cbz	r3, 800d2e2 <_strtod_l+0x4ea>
 800d2de:	4682      	mov	sl, r0
 800d2e0:	468b      	mov	fp, r1
 800d2e2:	4b2f      	ldr	r3, [pc, #188]	; (800d3a0 <_strtod_l+0x5a8>)
 800d2e4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d2e8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d2ec:	4652      	mov	r2, sl
 800d2ee:	465b      	mov	r3, fp
 800d2f0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d2f4:	f7f3 f998 	bl	8000628 <__aeabi_dmul>
 800d2f8:	4b2a      	ldr	r3, [pc, #168]	; (800d3a4 <_strtod_l+0x5ac>)
 800d2fa:	460a      	mov	r2, r1
 800d2fc:	400b      	ands	r3, r1
 800d2fe:	492a      	ldr	r1, [pc, #168]	; (800d3a8 <_strtod_l+0x5b0>)
 800d300:	428b      	cmp	r3, r1
 800d302:	4682      	mov	sl, r0
 800d304:	d8bc      	bhi.n	800d280 <_strtod_l+0x488>
 800d306:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d30a:	428b      	cmp	r3, r1
 800d30c:	bf86      	itte	hi
 800d30e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d3ac <_strtod_l+0x5b4>
 800d312:	f04f 3aff 	movhi.w	sl, #4294967295
 800d316:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d31a:	2300      	movs	r3, #0
 800d31c:	9304      	str	r3, [sp, #16]
 800d31e:	e084      	b.n	800d42a <_strtod_l+0x632>
 800d320:	f018 0f01 	tst.w	r8, #1
 800d324:	d005      	beq.n	800d332 <_strtod_l+0x53a>
 800d326:	9b04      	ldr	r3, [sp, #16]
 800d328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d32c:	f7f3 f97c 	bl	8000628 <__aeabi_dmul>
 800d330:	2301      	movs	r3, #1
 800d332:	9a04      	ldr	r2, [sp, #16]
 800d334:	3208      	adds	r2, #8
 800d336:	f109 0901 	add.w	r9, r9, #1
 800d33a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d33e:	9204      	str	r2, [sp, #16]
 800d340:	e7c9      	b.n	800d2d6 <_strtod_l+0x4de>
 800d342:	d0ea      	beq.n	800d31a <_strtod_l+0x522>
 800d344:	f1c8 0800 	rsb	r8, r8, #0
 800d348:	f018 020f 	ands.w	r2, r8, #15
 800d34c:	d00a      	beq.n	800d364 <_strtod_l+0x56c>
 800d34e:	4b13      	ldr	r3, [pc, #76]	; (800d39c <_strtod_l+0x5a4>)
 800d350:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d354:	4650      	mov	r0, sl
 800d356:	4659      	mov	r1, fp
 800d358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d35c:	f7f3 fa8e 	bl	800087c <__aeabi_ddiv>
 800d360:	4682      	mov	sl, r0
 800d362:	468b      	mov	fp, r1
 800d364:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d368:	d0d7      	beq.n	800d31a <_strtod_l+0x522>
 800d36a:	f1b8 0f1f 	cmp.w	r8, #31
 800d36e:	dd1f      	ble.n	800d3b0 <_strtod_l+0x5b8>
 800d370:	2500      	movs	r5, #0
 800d372:	462e      	mov	r6, r5
 800d374:	9507      	str	r5, [sp, #28]
 800d376:	9505      	str	r5, [sp, #20]
 800d378:	2322      	movs	r3, #34	; 0x22
 800d37a:	f04f 0a00 	mov.w	sl, #0
 800d37e:	f04f 0b00 	mov.w	fp, #0
 800d382:	6023      	str	r3, [r4, #0]
 800d384:	e786      	b.n	800d294 <_strtod_l+0x49c>
 800d386:	bf00      	nop
 800d388:	08010a45 	.word	0x08010a45
 800d38c:	08010a88 	.word	0x08010a88
 800d390:	08010a3d 	.word	0x08010a3d
 800d394:	08010bcc 	.word	0x08010bcc
 800d398:	08010ee0 	.word	0x08010ee0
 800d39c:	08010dc0 	.word	0x08010dc0
 800d3a0:	08010d98 	.word	0x08010d98
 800d3a4:	7ff00000 	.word	0x7ff00000
 800d3a8:	7ca00000 	.word	0x7ca00000
 800d3ac:	7fefffff 	.word	0x7fefffff
 800d3b0:	f018 0310 	ands.w	r3, r8, #16
 800d3b4:	bf18      	it	ne
 800d3b6:	236a      	movne	r3, #106	; 0x6a
 800d3b8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d768 <_strtod_l+0x970>
 800d3bc:	9304      	str	r3, [sp, #16]
 800d3be:	4650      	mov	r0, sl
 800d3c0:	4659      	mov	r1, fp
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	f018 0f01 	tst.w	r8, #1
 800d3c8:	d004      	beq.n	800d3d4 <_strtod_l+0x5dc>
 800d3ca:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d3ce:	f7f3 f92b 	bl	8000628 <__aeabi_dmul>
 800d3d2:	2301      	movs	r3, #1
 800d3d4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d3d8:	f109 0908 	add.w	r9, r9, #8
 800d3dc:	d1f2      	bne.n	800d3c4 <_strtod_l+0x5cc>
 800d3de:	b10b      	cbz	r3, 800d3e4 <_strtod_l+0x5ec>
 800d3e0:	4682      	mov	sl, r0
 800d3e2:	468b      	mov	fp, r1
 800d3e4:	9b04      	ldr	r3, [sp, #16]
 800d3e6:	b1c3      	cbz	r3, 800d41a <_strtod_l+0x622>
 800d3e8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d3ec:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	4659      	mov	r1, fp
 800d3f4:	dd11      	ble.n	800d41a <_strtod_l+0x622>
 800d3f6:	2b1f      	cmp	r3, #31
 800d3f8:	f340 8124 	ble.w	800d644 <_strtod_l+0x84c>
 800d3fc:	2b34      	cmp	r3, #52	; 0x34
 800d3fe:	bfde      	ittt	le
 800d400:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d404:	f04f 33ff 	movle.w	r3, #4294967295
 800d408:	fa03 f202 	lslle.w	r2, r3, r2
 800d40c:	f04f 0a00 	mov.w	sl, #0
 800d410:	bfcc      	ite	gt
 800d412:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d416:	ea02 0b01 	andle.w	fp, r2, r1
 800d41a:	2200      	movs	r2, #0
 800d41c:	2300      	movs	r3, #0
 800d41e:	4650      	mov	r0, sl
 800d420:	4659      	mov	r1, fp
 800d422:	f7f3 fb69 	bl	8000af8 <__aeabi_dcmpeq>
 800d426:	2800      	cmp	r0, #0
 800d428:	d1a2      	bne.n	800d370 <_strtod_l+0x578>
 800d42a:	9b07      	ldr	r3, [sp, #28]
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	9908      	ldr	r1, [sp, #32]
 800d430:	462b      	mov	r3, r5
 800d432:	463a      	mov	r2, r7
 800d434:	4620      	mov	r0, r4
 800d436:	f002 f8fd 	bl	800f634 <__s2b>
 800d43a:	9007      	str	r0, [sp, #28]
 800d43c:	2800      	cmp	r0, #0
 800d43e:	f43f af1f 	beq.w	800d280 <_strtod_l+0x488>
 800d442:	9b05      	ldr	r3, [sp, #20]
 800d444:	1b9e      	subs	r6, r3, r6
 800d446:	9b06      	ldr	r3, [sp, #24]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	bfb4      	ite	lt
 800d44c:	4633      	movlt	r3, r6
 800d44e:	2300      	movge	r3, #0
 800d450:	930c      	str	r3, [sp, #48]	; 0x30
 800d452:	9b06      	ldr	r3, [sp, #24]
 800d454:	2500      	movs	r5, #0
 800d456:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d45a:	9312      	str	r3, [sp, #72]	; 0x48
 800d45c:	462e      	mov	r6, r5
 800d45e:	9b07      	ldr	r3, [sp, #28]
 800d460:	4620      	mov	r0, r4
 800d462:	6859      	ldr	r1, [r3, #4]
 800d464:	f002 f83e 	bl	800f4e4 <_Balloc>
 800d468:	9005      	str	r0, [sp, #20]
 800d46a:	2800      	cmp	r0, #0
 800d46c:	f43f af0c 	beq.w	800d288 <_strtod_l+0x490>
 800d470:	9b07      	ldr	r3, [sp, #28]
 800d472:	691a      	ldr	r2, [r3, #16]
 800d474:	3202      	adds	r2, #2
 800d476:	f103 010c 	add.w	r1, r3, #12
 800d47a:	0092      	lsls	r2, r2, #2
 800d47c:	300c      	adds	r0, #12
 800d47e:	f7fe fd25 	bl	800becc <memcpy>
 800d482:	ec4b ab10 	vmov	d0, sl, fp
 800d486:	aa1a      	add	r2, sp, #104	; 0x68
 800d488:	a919      	add	r1, sp, #100	; 0x64
 800d48a:	4620      	mov	r0, r4
 800d48c:	f002 fc18 	bl	800fcc0 <__d2b>
 800d490:	ec4b ab18 	vmov	d8, sl, fp
 800d494:	9018      	str	r0, [sp, #96]	; 0x60
 800d496:	2800      	cmp	r0, #0
 800d498:	f43f aef6 	beq.w	800d288 <_strtod_l+0x490>
 800d49c:	2101      	movs	r1, #1
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f002 f962 	bl	800f768 <__i2b>
 800d4a4:	4606      	mov	r6, r0
 800d4a6:	2800      	cmp	r0, #0
 800d4a8:	f43f aeee 	beq.w	800d288 <_strtod_l+0x490>
 800d4ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800d4ae:	9904      	ldr	r1, [sp, #16]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	bfab      	itete	ge
 800d4b4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800d4b6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800d4b8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800d4ba:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800d4be:	bfac      	ite	ge
 800d4c0:	eb03 0902 	addge.w	r9, r3, r2
 800d4c4:	1ad7      	sublt	r7, r2, r3
 800d4c6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800d4c8:	eba3 0801 	sub.w	r8, r3, r1
 800d4cc:	4490      	add	r8, r2
 800d4ce:	4ba1      	ldr	r3, [pc, #644]	; (800d754 <_strtod_l+0x95c>)
 800d4d0:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4d4:	4598      	cmp	r8, r3
 800d4d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800d4da:	f280 80c7 	bge.w	800d66c <_strtod_l+0x874>
 800d4de:	eba3 0308 	sub.w	r3, r3, r8
 800d4e2:	2b1f      	cmp	r3, #31
 800d4e4:	eba2 0203 	sub.w	r2, r2, r3
 800d4e8:	f04f 0101 	mov.w	r1, #1
 800d4ec:	f300 80b1 	bgt.w	800d652 <_strtod_l+0x85a>
 800d4f0:	fa01 f303 	lsl.w	r3, r1, r3
 800d4f4:	930d      	str	r3, [sp, #52]	; 0x34
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	9308      	str	r3, [sp, #32]
 800d4fa:	eb09 0802 	add.w	r8, r9, r2
 800d4fe:	9b04      	ldr	r3, [sp, #16]
 800d500:	45c1      	cmp	r9, r8
 800d502:	4417      	add	r7, r2
 800d504:	441f      	add	r7, r3
 800d506:	464b      	mov	r3, r9
 800d508:	bfa8      	it	ge
 800d50a:	4643      	movge	r3, r8
 800d50c:	42bb      	cmp	r3, r7
 800d50e:	bfa8      	it	ge
 800d510:	463b      	movge	r3, r7
 800d512:	2b00      	cmp	r3, #0
 800d514:	bfc2      	ittt	gt
 800d516:	eba8 0803 	subgt.w	r8, r8, r3
 800d51a:	1aff      	subgt	r7, r7, r3
 800d51c:	eba9 0903 	subgt.w	r9, r9, r3
 800d520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d522:	2b00      	cmp	r3, #0
 800d524:	dd17      	ble.n	800d556 <_strtod_l+0x75e>
 800d526:	4631      	mov	r1, r6
 800d528:	461a      	mov	r2, r3
 800d52a:	4620      	mov	r0, r4
 800d52c:	f002 f9dc 	bl	800f8e8 <__pow5mult>
 800d530:	4606      	mov	r6, r0
 800d532:	2800      	cmp	r0, #0
 800d534:	f43f aea8 	beq.w	800d288 <_strtod_l+0x490>
 800d538:	4601      	mov	r1, r0
 800d53a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d53c:	4620      	mov	r0, r4
 800d53e:	f002 f929 	bl	800f794 <__multiply>
 800d542:	900b      	str	r0, [sp, #44]	; 0x2c
 800d544:	2800      	cmp	r0, #0
 800d546:	f43f ae9f 	beq.w	800d288 <_strtod_l+0x490>
 800d54a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d54c:	4620      	mov	r0, r4
 800d54e:	f002 f809 	bl	800f564 <_Bfree>
 800d552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d554:	9318      	str	r3, [sp, #96]	; 0x60
 800d556:	f1b8 0f00 	cmp.w	r8, #0
 800d55a:	f300 808c 	bgt.w	800d676 <_strtod_l+0x87e>
 800d55e:	9b06      	ldr	r3, [sp, #24]
 800d560:	2b00      	cmp	r3, #0
 800d562:	dd08      	ble.n	800d576 <_strtod_l+0x77e>
 800d564:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d566:	9905      	ldr	r1, [sp, #20]
 800d568:	4620      	mov	r0, r4
 800d56a:	f002 f9bd 	bl	800f8e8 <__pow5mult>
 800d56e:	9005      	str	r0, [sp, #20]
 800d570:	2800      	cmp	r0, #0
 800d572:	f43f ae89 	beq.w	800d288 <_strtod_l+0x490>
 800d576:	2f00      	cmp	r7, #0
 800d578:	dd08      	ble.n	800d58c <_strtod_l+0x794>
 800d57a:	9905      	ldr	r1, [sp, #20]
 800d57c:	463a      	mov	r2, r7
 800d57e:	4620      	mov	r0, r4
 800d580:	f002 fa0c 	bl	800f99c <__lshift>
 800d584:	9005      	str	r0, [sp, #20]
 800d586:	2800      	cmp	r0, #0
 800d588:	f43f ae7e 	beq.w	800d288 <_strtod_l+0x490>
 800d58c:	f1b9 0f00 	cmp.w	r9, #0
 800d590:	dd08      	ble.n	800d5a4 <_strtod_l+0x7ac>
 800d592:	4631      	mov	r1, r6
 800d594:	464a      	mov	r2, r9
 800d596:	4620      	mov	r0, r4
 800d598:	f002 fa00 	bl	800f99c <__lshift>
 800d59c:	4606      	mov	r6, r0
 800d59e:	2800      	cmp	r0, #0
 800d5a0:	f43f ae72 	beq.w	800d288 <_strtod_l+0x490>
 800d5a4:	9a05      	ldr	r2, [sp, #20]
 800d5a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d5a8:	4620      	mov	r0, r4
 800d5aa:	f002 fa83 	bl	800fab4 <__mdiff>
 800d5ae:	4605      	mov	r5, r0
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	f43f ae69 	beq.w	800d288 <_strtod_l+0x490>
 800d5b6:	68c3      	ldr	r3, [r0, #12]
 800d5b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60c3      	str	r3, [r0, #12]
 800d5be:	4631      	mov	r1, r6
 800d5c0:	f002 fa5c 	bl	800fa7c <__mcmp>
 800d5c4:	2800      	cmp	r0, #0
 800d5c6:	da60      	bge.n	800d68a <_strtod_l+0x892>
 800d5c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d5ca:	ea53 030a 	orrs.w	r3, r3, sl
 800d5ce:	f040 8082 	bne.w	800d6d6 <_strtod_l+0x8de>
 800d5d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d17d      	bne.n	800d6d6 <_strtod_l+0x8de>
 800d5da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d5de:	0d1b      	lsrs	r3, r3, #20
 800d5e0:	051b      	lsls	r3, r3, #20
 800d5e2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d5e6:	d976      	bls.n	800d6d6 <_strtod_l+0x8de>
 800d5e8:	696b      	ldr	r3, [r5, #20]
 800d5ea:	b913      	cbnz	r3, 800d5f2 <_strtod_l+0x7fa>
 800d5ec:	692b      	ldr	r3, [r5, #16]
 800d5ee:	2b01      	cmp	r3, #1
 800d5f0:	dd71      	ble.n	800d6d6 <_strtod_l+0x8de>
 800d5f2:	4629      	mov	r1, r5
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	4620      	mov	r0, r4
 800d5f8:	f002 f9d0 	bl	800f99c <__lshift>
 800d5fc:	4631      	mov	r1, r6
 800d5fe:	4605      	mov	r5, r0
 800d600:	f002 fa3c 	bl	800fa7c <__mcmp>
 800d604:	2800      	cmp	r0, #0
 800d606:	dd66      	ble.n	800d6d6 <_strtod_l+0x8de>
 800d608:	9904      	ldr	r1, [sp, #16]
 800d60a:	4a53      	ldr	r2, [pc, #332]	; (800d758 <_strtod_l+0x960>)
 800d60c:	465b      	mov	r3, fp
 800d60e:	2900      	cmp	r1, #0
 800d610:	f000 8081 	beq.w	800d716 <_strtod_l+0x91e>
 800d614:	ea02 010b 	and.w	r1, r2, fp
 800d618:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d61c:	dc7b      	bgt.n	800d716 <_strtod_l+0x91e>
 800d61e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d622:	f77f aea9 	ble.w	800d378 <_strtod_l+0x580>
 800d626:	4b4d      	ldr	r3, [pc, #308]	; (800d75c <_strtod_l+0x964>)
 800d628:	4650      	mov	r0, sl
 800d62a:	4659      	mov	r1, fp
 800d62c:	2200      	movs	r2, #0
 800d62e:	f7f2 fffb 	bl	8000628 <__aeabi_dmul>
 800d632:	460b      	mov	r3, r1
 800d634:	4303      	orrs	r3, r0
 800d636:	bf08      	it	eq
 800d638:	2322      	moveq	r3, #34	; 0x22
 800d63a:	4682      	mov	sl, r0
 800d63c:	468b      	mov	fp, r1
 800d63e:	bf08      	it	eq
 800d640:	6023      	streq	r3, [r4, #0]
 800d642:	e62b      	b.n	800d29c <_strtod_l+0x4a4>
 800d644:	f04f 32ff 	mov.w	r2, #4294967295
 800d648:	fa02 f303 	lsl.w	r3, r2, r3
 800d64c:	ea03 0a0a 	and.w	sl, r3, sl
 800d650:	e6e3      	b.n	800d41a <_strtod_l+0x622>
 800d652:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d656:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d65a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d65e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d662:	fa01 f308 	lsl.w	r3, r1, r8
 800d666:	9308      	str	r3, [sp, #32]
 800d668:	910d      	str	r1, [sp, #52]	; 0x34
 800d66a:	e746      	b.n	800d4fa <_strtod_l+0x702>
 800d66c:	2300      	movs	r3, #0
 800d66e:	9308      	str	r3, [sp, #32]
 800d670:	2301      	movs	r3, #1
 800d672:	930d      	str	r3, [sp, #52]	; 0x34
 800d674:	e741      	b.n	800d4fa <_strtod_l+0x702>
 800d676:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d678:	4642      	mov	r2, r8
 800d67a:	4620      	mov	r0, r4
 800d67c:	f002 f98e 	bl	800f99c <__lshift>
 800d680:	9018      	str	r0, [sp, #96]	; 0x60
 800d682:	2800      	cmp	r0, #0
 800d684:	f47f af6b 	bne.w	800d55e <_strtod_l+0x766>
 800d688:	e5fe      	b.n	800d288 <_strtod_l+0x490>
 800d68a:	465f      	mov	r7, fp
 800d68c:	d16e      	bne.n	800d76c <_strtod_l+0x974>
 800d68e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d690:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d694:	b342      	cbz	r2, 800d6e8 <_strtod_l+0x8f0>
 800d696:	4a32      	ldr	r2, [pc, #200]	; (800d760 <_strtod_l+0x968>)
 800d698:	4293      	cmp	r3, r2
 800d69a:	d128      	bne.n	800d6ee <_strtod_l+0x8f6>
 800d69c:	9b04      	ldr	r3, [sp, #16]
 800d69e:	4651      	mov	r1, sl
 800d6a0:	b1eb      	cbz	r3, 800d6de <_strtod_l+0x8e6>
 800d6a2:	4b2d      	ldr	r3, [pc, #180]	; (800d758 <_strtod_l+0x960>)
 800d6a4:	403b      	ands	r3, r7
 800d6a6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d6aa:	f04f 32ff 	mov.w	r2, #4294967295
 800d6ae:	d819      	bhi.n	800d6e4 <_strtod_l+0x8ec>
 800d6b0:	0d1b      	lsrs	r3, r3, #20
 800d6b2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ba:	4299      	cmp	r1, r3
 800d6bc:	d117      	bne.n	800d6ee <_strtod_l+0x8f6>
 800d6be:	4b29      	ldr	r3, [pc, #164]	; (800d764 <_strtod_l+0x96c>)
 800d6c0:	429f      	cmp	r7, r3
 800d6c2:	d102      	bne.n	800d6ca <_strtod_l+0x8d2>
 800d6c4:	3101      	adds	r1, #1
 800d6c6:	f43f addf 	beq.w	800d288 <_strtod_l+0x490>
 800d6ca:	4b23      	ldr	r3, [pc, #140]	; (800d758 <_strtod_l+0x960>)
 800d6cc:	403b      	ands	r3, r7
 800d6ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d6d2:	f04f 0a00 	mov.w	sl, #0
 800d6d6:	9b04      	ldr	r3, [sp, #16]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d1a4      	bne.n	800d626 <_strtod_l+0x82e>
 800d6dc:	e5de      	b.n	800d29c <_strtod_l+0x4a4>
 800d6de:	f04f 33ff 	mov.w	r3, #4294967295
 800d6e2:	e7ea      	b.n	800d6ba <_strtod_l+0x8c2>
 800d6e4:	4613      	mov	r3, r2
 800d6e6:	e7e8      	b.n	800d6ba <_strtod_l+0x8c2>
 800d6e8:	ea53 030a 	orrs.w	r3, r3, sl
 800d6ec:	d08c      	beq.n	800d608 <_strtod_l+0x810>
 800d6ee:	9b08      	ldr	r3, [sp, #32]
 800d6f0:	b1db      	cbz	r3, 800d72a <_strtod_l+0x932>
 800d6f2:	423b      	tst	r3, r7
 800d6f4:	d0ef      	beq.n	800d6d6 <_strtod_l+0x8de>
 800d6f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6f8:	9a04      	ldr	r2, [sp, #16]
 800d6fa:	4650      	mov	r0, sl
 800d6fc:	4659      	mov	r1, fp
 800d6fe:	b1c3      	cbz	r3, 800d732 <_strtod_l+0x93a>
 800d700:	f7ff fb5c 	bl	800cdbc <sulp>
 800d704:	4602      	mov	r2, r0
 800d706:	460b      	mov	r3, r1
 800d708:	ec51 0b18 	vmov	r0, r1, d8
 800d70c:	f7f2 fdd6 	bl	80002bc <__adddf3>
 800d710:	4682      	mov	sl, r0
 800d712:	468b      	mov	fp, r1
 800d714:	e7df      	b.n	800d6d6 <_strtod_l+0x8de>
 800d716:	4013      	ands	r3, r2
 800d718:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d71c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d720:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d724:	f04f 3aff 	mov.w	sl, #4294967295
 800d728:	e7d5      	b.n	800d6d6 <_strtod_l+0x8de>
 800d72a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d72c:	ea13 0f0a 	tst.w	r3, sl
 800d730:	e7e0      	b.n	800d6f4 <_strtod_l+0x8fc>
 800d732:	f7ff fb43 	bl	800cdbc <sulp>
 800d736:	4602      	mov	r2, r0
 800d738:	460b      	mov	r3, r1
 800d73a:	ec51 0b18 	vmov	r0, r1, d8
 800d73e:	f7f2 fdbb 	bl	80002b8 <__aeabi_dsub>
 800d742:	2200      	movs	r2, #0
 800d744:	2300      	movs	r3, #0
 800d746:	4682      	mov	sl, r0
 800d748:	468b      	mov	fp, r1
 800d74a:	f7f3 f9d5 	bl	8000af8 <__aeabi_dcmpeq>
 800d74e:	2800      	cmp	r0, #0
 800d750:	d0c1      	beq.n	800d6d6 <_strtod_l+0x8de>
 800d752:	e611      	b.n	800d378 <_strtod_l+0x580>
 800d754:	fffffc02 	.word	0xfffffc02
 800d758:	7ff00000 	.word	0x7ff00000
 800d75c:	39500000 	.word	0x39500000
 800d760:	000fffff 	.word	0x000fffff
 800d764:	7fefffff 	.word	0x7fefffff
 800d768:	08010aa0 	.word	0x08010aa0
 800d76c:	4631      	mov	r1, r6
 800d76e:	4628      	mov	r0, r5
 800d770:	f002 fb02 	bl	800fd78 <__ratio>
 800d774:	ec59 8b10 	vmov	r8, r9, d0
 800d778:	ee10 0a10 	vmov	r0, s0
 800d77c:	2200      	movs	r2, #0
 800d77e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d782:	4649      	mov	r1, r9
 800d784:	f7f3 f9cc 	bl	8000b20 <__aeabi_dcmple>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d07a      	beq.n	800d882 <_strtod_l+0xa8a>
 800d78c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d04a      	beq.n	800d828 <_strtod_l+0xa30>
 800d792:	4b95      	ldr	r3, [pc, #596]	; (800d9e8 <_strtod_l+0xbf0>)
 800d794:	2200      	movs	r2, #0
 800d796:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d79a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d9e8 <_strtod_l+0xbf0>
 800d79e:	f04f 0800 	mov.w	r8, #0
 800d7a2:	4b92      	ldr	r3, [pc, #584]	; (800d9ec <_strtod_l+0xbf4>)
 800d7a4:	403b      	ands	r3, r7
 800d7a6:	930d      	str	r3, [sp, #52]	; 0x34
 800d7a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d7aa:	4b91      	ldr	r3, [pc, #580]	; (800d9f0 <_strtod_l+0xbf8>)
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	f040 80b0 	bne.w	800d912 <_strtod_l+0xb1a>
 800d7b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d7b6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d7ba:	ec4b ab10 	vmov	d0, sl, fp
 800d7be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d7c2:	f002 fa01 	bl	800fbc8 <__ulp>
 800d7c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d7ca:	ec53 2b10 	vmov	r2, r3, d0
 800d7ce:	f7f2 ff2b 	bl	8000628 <__aeabi_dmul>
 800d7d2:	4652      	mov	r2, sl
 800d7d4:	465b      	mov	r3, fp
 800d7d6:	f7f2 fd71 	bl	80002bc <__adddf3>
 800d7da:	460b      	mov	r3, r1
 800d7dc:	4983      	ldr	r1, [pc, #524]	; (800d9ec <_strtod_l+0xbf4>)
 800d7de:	4a85      	ldr	r2, [pc, #532]	; (800d9f4 <_strtod_l+0xbfc>)
 800d7e0:	4019      	ands	r1, r3
 800d7e2:	4291      	cmp	r1, r2
 800d7e4:	4682      	mov	sl, r0
 800d7e6:	d960      	bls.n	800d8aa <_strtod_l+0xab2>
 800d7e8:	ee18 3a90 	vmov	r3, s17
 800d7ec:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d104      	bne.n	800d7fe <_strtod_l+0xa06>
 800d7f4:	ee18 3a10 	vmov	r3, s16
 800d7f8:	3301      	adds	r3, #1
 800d7fa:	f43f ad45 	beq.w	800d288 <_strtod_l+0x490>
 800d7fe:	f8df b200 	ldr.w	fp, [pc, #512]	; 800da00 <_strtod_l+0xc08>
 800d802:	f04f 3aff 	mov.w	sl, #4294967295
 800d806:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d808:	4620      	mov	r0, r4
 800d80a:	f001 feab 	bl	800f564 <_Bfree>
 800d80e:	9905      	ldr	r1, [sp, #20]
 800d810:	4620      	mov	r0, r4
 800d812:	f001 fea7 	bl	800f564 <_Bfree>
 800d816:	4631      	mov	r1, r6
 800d818:	4620      	mov	r0, r4
 800d81a:	f001 fea3 	bl	800f564 <_Bfree>
 800d81e:	4629      	mov	r1, r5
 800d820:	4620      	mov	r0, r4
 800d822:	f001 fe9f 	bl	800f564 <_Bfree>
 800d826:	e61a      	b.n	800d45e <_strtod_l+0x666>
 800d828:	f1ba 0f00 	cmp.w	sl, #0
 800d82c:	d11b      	bne.n	800d866 <_strtod_l+0xa6e>
 800d82e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d832:	b9f3      	cbnz	r3, 800d872 <_strtod_l+0xa7a>
 800d834:	4b6c      	ldr	r3, [pc, #432]	; (800d9e8 <_strtod_l+0xbf0>)
 800d836:	2200      	movs	r2, #0
 800d838:	4640      	mov	r0, r8
 800d83a:	4649      	mov	r1, r9
 800d83c:	f7f3 f966 	bl	8000b0c <__aeabi_dcmplt>
 800d840:	b9d0      	cbnz	r0, 800d878 <_strtod_l+0xa80>
 800d842:	4640      	mov	r0, r8
 800d844:	4649      	mov	r1, r9
 800d846:	4b6c      	ldr	r3, [pc, #432]	; (800d9f8 <_strtod_l+0xc00>)
 800d848:	2200      	movs	r2, #0
 800d84a:	f7f2 feed 	bl	8000628 <__aeabi_dmul>
 800d84e:	4680      	mov	r8, r0
 800d850:	4689      	mov	r9, r1
 800d852:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d856:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d85a:	9315      	str	r3, [sp, #84]	; 0x54
 800d85c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d860:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d864:	e79d      	b.n	800d7a2 <_strtod_l+0x9aa>
 800d866:	f1ba 0f01 	cmp.w	sl, #1
 800d86a:	d102      	bne.n	800d872 <_strtod_l+0xa7a>
 800d86c:	2f00      	cmp	r7, #0
 800d86e:	f43f ad83 	beq.w	800d378 <_strtod_l+0x580>
 800d872:	4b62      	ldr	r3, [pc, #392]	; (800d9fc <_strtod_l+0xc04>)
 800d874:	2200      	movs	r2, #0
 800d876:	e78e      	b.n	800d796 <_strtod_l+0x99e>
 800d878:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d9f8 <_strtod_l+0xc00>
 800d87c:	f04f 0800 	mov.w	r8, #0
 800d880:	e7e7      	b.n	800d852 <_strtod_l+0xa5a>
 800d882:	4b5d      	ldr	r3, [pc, #372]	; (800d9f8 <_strtod_l+0xc00>)
 800d884:	4640      	mov	r0, r8
 800d886:	4649      	mov	r1, r9
 800d888:	2200      	movs	r2, #0
 800d88a:	f7f2 fecd 	bl	8000628 <__aeabi_dmul>
 800d88e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d890:	4680      	mov	r8, r0
 800d892:	4689      	mov	r9, r1
 800d894:	b933      	cbnz	r3, 800d8a4 <_strtod_l+0xaac>
 800d896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d89a:	900e      	str	r0, [sp, #56]	; 0x38
 800d89c:	930f      	str	r3, [sp, #60]	; 0x3c
 800d89e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d8a2:	e7dd      	b.n	800d860 <_strtod_l+0xa68>
 800d8a4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d8a8:	e7f9      	b.n	800d89e <_strtod_l+0xaa6>
 800d8aa:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d8ae:	9b04      	ldr	r3, [sp, #16]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d1a8      	bne.n	800d806 <_strtod_l+0xa0e>
 800d8b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d8b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d8ba:	0d1b      	lsrs	r3, r3, #20
 800d8bc:	051b      	lsls	r3, r3, #20
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	d1a1      	bne.n	800d806 <_strtod_l+0xa0e>
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	f7f3 fa0f 	bl	8000ce8 <__aeabi_d2lz>
 800d8ca:	f7f2 fe7f 	bl	80005cc <__aeabi_l2d>
 800d8ce:	4602      	mov	r2, r0
 800d8d0:	460b      	mov	r3, r1
 800d8d2:	4640      	mov	r0, r8
 800d8d4:	4649      	mov	r1, r9
 800d8d6:	f7f2 fcef 	bl	80002b8 <__aeabi_dsub>
 800d8da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d8dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d8e0:	ea43 030a 	orr.w	r3, r3, sl
 800d8e4:	4313      	orrs	r3, r2
 800d8e6:	4680      	mov	r8, r0
 800d8e8:	4689      	mov	r9, r1
 800d8ea:	d055      	beq.n	800d998 <_strtod_l+0xba0>
 800d8ec:	a336      	add	r3, pc, #216	; (adr r3, 800d9c8 <_strtod_l+0xbd0>)
 800d8ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f2:	f7f3 f90b 	bl	8000b0c <__aeabi_dcmplt>
 800d8f6:	2800      	cmp	r0, #0
 800d8f8:	f47f acd0 	bne.w	800d29c <_strtod_l+0x4a4>
 800d8fc:	a334      	add	r3, pc, #208	; (adr r3, 800d9d0 <_strtod_l+0xbd8>)
 800d8fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d902:	4640      	mov	r0, r8
 800d904:	4649      	mov	r1, r9
 800d906:	f7f3 f91f 	bl	8000b48 <__aeabi_dcmpgt>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	f43f af7b 	beq.w	800d806 <_strtod_l+0xa0e>
 800d910:	e4c4      	b.n	800d29c <_strtod_l+0x4a4>
 800d912:	9b04      	ldr	r3, [sp, #16]
 800d914:	b333      	cbz	r3, 800d964 <_strtod_l+0xb6c>
 800d916:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d918:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d91c:	d822      	bhi.n	800d964 <_strtod_l+0xb6c>
 800d91e:	a32e      	add	r3, pc, #184	; (adr r3, 800d9d8 <_strtod_l+0xbe0>)
 800d920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d924:	4640      	mov	r0, r8
 800d926:	4649      	mov	r1, r9
 800d928:	f7f3 f8fa 	bl	8000b20 <__aeabi_dcmple>
 800d92c:	b1a0      	cbz	r0, 800d958 <_strtod_l+0xb60>
 800d92e:	4649      	mov	r1, r9
 800d930:	4640      	mov	r0, r8
 800d932:	f7f3 f951 	bl	8000bd8 <__aeabi_d2uiz>
 800d936:	2801      	cmp	r0, #1
 800d938:	bf38      	it	cc
 800d93a:	2001      	movcc	r0, #1
 800d93c:	f7f2 fdfa 	bl	8000534 <__aeabi_ui2d>
 800d940:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d942:	4680      	mov	r8, r0
 800d944:	4689      	mov	r9, r1
 800d946:	bb23      	cbnz	r3, 800d992 <_strtod_l+0xb9a>
 800d948:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d94c:	9010      	str	r0, [sp, #64]	; 0x40
 800d94e:	9311      	str	r3, [sp, #68]	; 0x44
 800d950:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d954:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d958:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d95a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d95c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d960:	1a9b      	subs	r3, r3, r2
 800d962:	9309      	str	r3, [sp, #36]	; 0x24
 800d964:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d968:	eeb0 0a48 	vmov.f32	s0, s16
 800d96c:	eef0 0a68 	vmov.f32	s1, s17
 800d970:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d974:	f002 f928 	bl	800fbc8 <__ulp>
 800d978:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d97c:	ec53 2b10 	vmov	r2, r3, d0
 800d980:	f7f2 fe52 	bl	8000628 <__aeabi_dmul>
 800d984:	ec53 2b18 	vmov	r2, r3, d8
 800d988:	f7f2 fc98 	bl	80002bc <__adddf3>
 800d98c:	4682      	mov	sl, r0
 800d98e:	468b      	mov	fp, r1
 800d990:	e78d      	b.n	800d8ae <_strtod_l+0xab6>
 800d992:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d996:	e7db      	b.n	800d950 <_strtod_l+0xb58>
 800d998:	a311      	add	r3, pc, #68	; (adr r3, 800d9e0 <_strtod_l+0xbe8>)
 800d99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99e:	f7f3 f8b5 	bl	8000b0c <__aeabi_dcmplt>
 800d9a2:	e7b2      	b.n	800d90a <_strtod_l+0xb12>
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	930a      	str	r3, [sp, #40]	; 0x28
 800d9a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d9aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d9ac:	6013      	str	r3, [r2, #0]
 800d9ae:	f7ff ba6b 	b.w	800ce88 <_strtod_l+0x90>
 800d9b2:	2a65      	cmp	r2, #101	; 0x65
 800d9b4:	f43f ab5f 	beq.w	800d076 <_strtod_l+0x27e>
 800d9b8:	2a45      	cmp	r2, #69	; 0x45
 800d9ba:	f43f ab5c 	beq.w	800d076 <_strtod_l+0x27e>
 800d9be:	2301      	movs	r3, #1
 800d9c0:	f7ff bb94 	b.w	800d0ec <_strtod_l+0x2f4>
 800d9c4:	f3af 8000 	nop.w
 800d9c8:	94a03595 	.word	0x94a03595
 800d9cc:	3fdfffff 	.word	0x3fdfffff
 800d9d0:	35afe535 	.word	0x35afe535
 800d9d4:	3fe00000 	.word	0x3fe00000
 800d9d8:	ffc00000 	.word	0xffc00000
 800d9dc:	41dfffff 	.word	0x41dfffff
 800d9e0:	94a03595 	.word	0x94a03595
 800d9e4:	3fcfffff 	.word	0x3fcfffff
 800d9e8:	3ff00000 	.word	0x3ff00000
 800d9ec:	7ff00000 	.word	0x7ff00000
 800d9f0:	7fe00000 	.word	0x7fe00000
 800d9f4:	7c9fffff 	.word	0x7c9fffff
 800d9f8:	3fe00000 	.word	0x3fe00000
 800d9fc:	bff00000 	.word	0xbff00000
 800da00:	7fefffff 	.word	0x7fefffff

0800da04 <_strtod_r>:
 800da04:	4b01      	ldr	r3, [pc, #4]	; (800da0c <_strtod_r+0x8>)
 800da06:	f7ff b9f7 	b.w	800cdf8 <_strtod_l>
 800da0a:	bf00      	nop
 800da0c:	200001fc 	.word	0x200001fc

0800da10 <_strtol_l.constprop.0>:
 800da10:	2b01      	cmp	r3, #1
 800da12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da16:	d001      	beq.n	800da1c <_strtol_l.constprop.0+0xc>
 800da18:	2b24      	cmp	r3, #36	; 0x24
 800da1a:	d906      	bls.n	800da2a <_strtol_l.constprop.0+0x1a>
 800da1c:	f7fe fa2c 	bl	800be78 <__errno>
 800da20:	2316      	movs	r3, #22
 800da22:	6003      	str	r3, [r0, #0]
 800da24:	2000      	movs	r0, #0
 800da26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da2a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800db10 <_strtol_l.constprop.0+0x100>
 800da2e:	460d      	mov	r5, r1
 800da30:	462e      	mov	r6, r5
 800da32:	f815 4b01 	ldrb.w	r4, [r5], #1
 800da36:	f814 700c 	ldrb.w	r7, [r4, ip]
 800da3a:	f017 0708 	ands.w	r7, r7, #8
 800da3e:	d1f7      	bne.n	800da30 <_strtol_l.constprop.0+0x20>
 800da40:	2c2d      	cmp	r4, #45	; 0x2d
 800da42:	d132      	bne.n	800daaa <_strtol_l.constprop.0+0x9a>
 800da44:	782c      	ldrb	r4, [r5, #0]
 800da46:	2701      	movs	r7, #1
 800da48:	1cb5      	adds	r5, r6, #2
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d05b      	beq.n	800db06 <_strtol_l.constprop.0+0xf6>
 800da4e:	2b10      	cmp	r3, #16
 800da50:	d109      	bne.n	800da66 <_strtol_l.constprop.0+0x56>
 800da52:	2c30      	cmp	r4, #48	; 0x30
 800da54:	d107      	bne.n	800da66 <_strtol_l.constprop.0+0x56>
 800da56:	782c      	ldrb	r4, [r5, #0]
 800da58:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800da5c:	2c58      	cmp	r4, #88	; 0x58
 800da5e:	d14d      	bne.n	800dafc <_strtol_l.constprop.0+0xec>
 800da60:	786c      	ldrb	r4, [r5, #1]
 800da62:	2310      	movs	r3, #16
 800da64:	3502      	adds	r5, #2
 800da66:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800da6a:	f108 38ff 	add.w	r8, r8, #4294967295
 800da6e:	f04f 0c00 	mov.w	ip, #0
 800da72:	fbb8 f9f3 	udiv	r9, r8, r3
 800da76:	4666      	mov	r6, ip
 800da78:	fb03 8a19 	mls	sl, r3, r9, r8
 800da7c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800da80:	f1be 0f09 	cmp.w	lr, #9
 800da84:	d816      	bhi.n	800dab4 <_strtol_l.constprop.0+0xa4>
 800da86:	4674      	mov	r4, lr
 800da88:	42a3      	cmp	r3, r4
 800da8a:	dd24      	ble.n	800dad6 <_strtol_l.constprop.0+0xc6>
 800da8c:	f1bc 0f00 	cmp.w	ip, #0
 800da90:	db1e      	blt.n	800dad0 <_strtol_l.constprop.0+0xc0>
 800da92:	45b1      	cmp	r9, r6
 800da94:	d31c      	bcc.n	800dad0 <_strtol_l.constprop.0+0xc0>
 800da96:	d101      	bne.n	800da9c <_strtol_l.constprop.0+0x8c>
 800da98:	45a2      	cmp	sl, r4
 800da9a:	db19      	blt.n	800dad0 <_strtol_l.constprop.0+0xc0>
 800da9c:	fb06 4603 	mla	r6, r6, r3, r4
 800daa0:	f04f 0c01 	mov.w	ip, #1
 800daa4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800daa8:	e7e8      	b.n	800da7c <_strtol_l.constprop.0+0x6c>
 800daaa:	2c2b      	cmp	r4, #43	; 0x2b
 800daac:	bf04      	itt	eq
 800daae:	782c      	ldrbeq	r4, [r5, #0]
 800dab0:	1cb5      	addeq	r5, r6, #2
 800dab2:	e7ca      	b.n	800da4a <_strtol_l.constprop.0+0x3a>
 800dab4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800dab8:	f1be 0f19 	cmp.w	lr, #25
 800dabc:	d801      	bhi.n	800dac2 <_strtol_l.constprop.0+0xb2>
 800dabe:	3c37      	subs	r4, #55	; 0x37
 800dac0:	e7e2      	b.n	800da88 <_strtol_l.constprop.0+0x78>
 800dac2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800dac6:	f1be 0f19 	cmp.w	lr, #25
 800daca:	d804      	bhi.n	800dad6 <_strtol_l.constprop.0+0xc6>
 800dacc:	3c57      	subs	r4, #87	; 0x57
 800dace:	e7db      	b.n	800da88 <_strtol_l.constprop.0+0x78>
 800dad0:	f04f 3cff 	mov.w	ip, #4294967295
 800dad4:	e7e6      	b.n	800daa4 <_strtol_l.constprop.0+0x94>
 800dad6:	f1bc 0f00 	cmp.w	ip, #0
 800dada:	da05      	bge.n	800dae8 <_strtol_l.constprop.0+0xd8>
 800dadc:	2322      	movs	r3, #34	; 0x22
 800dade:	6003      	str	r3, [r0, #0]
 800dae0:	4646      	mov	r6, r8
 800dae2:	b942      	cbnz	r2, 800daf6 <_strtol_l.constprop.0+0xe6>
 800dae4:	4630      	mov	r0, r6
 800dae6:	e79e      	b.n	800da26 <_strtol_l.constprop.0+0x16>
 800dae8:	b107      	cbz	r7, 800daec <_strtol_l.constprop.0+0xdc>
 800daea:	4276      	negs	r6, r6
 800daec:	2a00      	cmp	r2, #0
 800daee:	d0f9      	beq.n	800dae4 <_strtol_l.constprop.0+0xd4>
 800daf0:	f1bc 0f00 	cmp.w	ip, #0
 800daf4:	d000      	beq.n	800daf8 <_strtol_l.constprop.0+0xe8>
 800daf6:	1e69      	subs	r1, r5, #1
 800daf8:	6011      	str	r1, [r2, #0]
 800dafa:	e7f3      	b.n	800dae4 <_strtol_l.constprop.0+0xd4>
 800dafc:	2430      	movs	r4, #48	; 0x30
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d1b1      	bne.n	800da66 <_strtol_l.constprop.0+0x56>
 800db02:	2308      	movs	r3, #8
 800db04:	e7af      	b.n	800da66 <_strtol_l.constprop.0+0x56>
 800db06:	2c30      	cmp	r4, #48	; 0x30
 800db08:	d0a5      	beq.n	800da56 <_strtol_l.constprop.0+0x46>
 800db0a:	230a      	movs	r3, #10
 800db0c:	e7ab      	b.n	800da66 <_strtol_l.constprop.0+0x56>
 800db0e:	bf00      	nop
 800db10:	08010ac9 	.word	0x08010ac9

0800db14 <_strtol_r>:
 800db14:	f7ff bf7c 	b.w	800da10 <_strtol_l.constprop.0>

0800db18 <__swbuf_r>:
 800db18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db1a:	460e      	mov	r6, r1
 800db1c:	4614      	mov	r4, r2
 800db1e:	4605      	mov	r5, r0
 800db20:	b118      	cbz	r0, 800db2a <__swbuf_r+0x12>
 800db22:	6983      	ldr	r3, [r0, #24]
 800db24:	b90b      	cbnz	r3, 800db2a <__swbuf_r+0x12>
 800db26:	f001 f84b 	bl	800ebc0 <__sinit>
 800db2a:	4b21      	ldr	r3, [pc, #132]	; (800dbb0 <__swbuf_r+0x98>)
 800db2c:	429c      	cmp	r4, r3
 800db2e:	d12b      	bne.n	800db88 <__swbuf_r+0x70>
 800db30:	686c      	ldr	r4, [r5, #4]
 800db32:	69a3      	ldr	r3, [r4, #24]
 800db34:	60a3      	str	r3, [r4, #8]
 800db36:	89a3      	ldrh	r3, [r4, #12]
 800db38:	071a      	lsls	r2, r3, #28
 800db3a:	d52f      	bpl.n	800db9c <__swbuf_r+0x84>
 800db3c:	6923      	ldr	r3, [r4, #16]
 800db3e:	b36b      	cbz	r3, 800db9c <__swbuf_r+0x84>
 800db40:	6923      	ldr	r3, [r4, #16]
 800db42:	6820      	ldr	r0, [r4, #0]
 800db44:	1ac0      	subs	r0, r0, r3
 800db46:	6963      	ldr	r3, [r4, #20]
 800db48:	b2f6      	uxtb	r6, r6
 800db4a:	4283      	cmp	r3, r0
 800db4c:	4637      	mov	r7, r6
 800db4e:	dc04      	bgt.n	800db5a <__swbuf_r+0x42>
 800db50:	4621      	mov	r1, r4
 800db52:	4628      	mov	r0, r5
 800db54:	f000 ffa0 	bl	800ea98 <_fflush_r>
 800db58:	bb30      	cbnz	r0, 800dba8 <__swbuf_r+0x90>
 800db5a:	68a3      	ldr	r3, [r4, #8]
 800db5c:	3b01      	subs	r3, #1
 800db5e:	60a3      	str	r3, [r4, #8]
 800db60:	6823      	ldr	r3, [r4, #0]
 800db62:	1c5a      	adds	r2, r3, #1
 800db64:	6022      	str	r2, [r4, #0]
 800db66:	701e      	strb	r6, [r3, #0]
 800db68:	6963      	ldr	r3, [r4, #20]
 800db6a:	3001      	adds	r0, #1
 800db6c:	4283      	cmp	r3, r0
 800db6e:	d004      	beq.n	800db7a <__swbuf_r+0x62>
 800db70:	89a3      	ldrh	r3, [r4, #12]
 800db72:	07db      	lsls	r3, r3, #31
 800db74:	d506      	bpl.n	800db84 <__swbuf_r+0x6c>
 800db76:	2e0a      	cmp	r6, #10
 800db78:	d104      	bne.n	800db84 <__swbuf_r+0x6c>
 800db7a:	4621      	mov	r1, r4
 800db7c:	4628      	mov	r0, r5
 800db7e:	f000 ff8b 	bl	800ea98 <_fflush_r>
 800db82:	b988      	cbnz	r0, 800dba8 <__swbuf_r+0x90>
 800db84:	4638      	mov	r0, r7
 800db86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db88:	4b0a      	ldr	r3, [pc, #40]	; (800dbb4 <__swbuf_r+0x9c>)
 800db8a:	429c      	cmp	r4, r3
 800db8c:	d101      	bne.n	800db92 <__swbuf_r+0x7a>
 800db8e:	68ac      	ldr	r4, [r5, #8]
 800db90:	e7cf      	b.n	800db32 <__swbuf_r+0x1a>
 800db92:	4b09      	ldr	r3, [pc, #36]	; (800dbb8 <__swbuf_r+0xa0>)
 800db94:	429c      	cmp	r4, r3
 800db96:	bf08      	it	eq
 800db98:	68ec      	ldreq	r4, [r5, #12]
 800db9a:	e7ca      	b.n	800db32 <__swbuf_r+0x1a>
 800db9c:	4621      	mov	r1, r4
 800db9e:	4628      	mov	r0, r5
 800dba0:	f000 f80c 	bl	800dbbc <__swsetup_r>
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d0cb      	beq.n	800db40 <__swbuf_r+0x28>
 800dba8:	f04f 37ff 	mov.w	r7, #4294967295
 800dbac:	e7ea      	b.n	800db84 <__swbuf_r+0x6c>
 800dbae:	bf00      	nop
 800dbb0:	08010c7c 	.word	0x08010c7c
 800dbb4:	08010c9c 	.word	0x08010c9c
 800dbb8:	08010c5c 	.word	0x08010c5c

0800dbbc <__swsetup_r>:
 800dbbc:	4b32      	ldr	r3, [pc, #200]	; (800dc88 <__swsetup_r+0xcc>)
 800dbbe:	b570      	push	{r4, r5, r6, lr}
 800dbc0:	681d      	ldr	r5, [r3, #0]
 800dbc2:	4606      	mov	r6, r0
 800dbc4:	460c      	mov	r4, r1
 800dbc6:	b125      	cbz	r5, 800dbd2 <__swsetup_r+0x16>
 800dbc8:	69ab      	ldr	r3, [r5, #24]
 800dbca:	b913      	cbnz	r3, 800dbd2 <__swsetup_r+0x16>
 800dbcc:	4628      	mov	r0, r5
 800dbce:	f000 fff7 	bl	800ebc0 <__sinit>
 800dbd2:	4b2e      	ldr	r3, [pc, #184]	; (800dc8c <__swsetup_r+0xd0>)
 800dbd4:	429c      	cmp	r4, r3
 800dbd6:	d10f      	bne.n	800dbf8 <__swsetup_r+0x3c>
 800dbd8:	686c      	ldr	r4, [r5, #4]
 800dbda:	89a3      	ldrh	r3, [r4, #12]
 800dbdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dbe0:	0719      	lsls	r1, r3, #28
 800dbe2:	d42c      	bmi.n	800dc3e <__swsetup_r+0x82>
 800dbe4:	06dd      	lsls	r5, r3, #27
 800dbe6:	d411      	bmi.n	800dc0c <__swsetup_r+0x50>
 800dbe8:	2309      	movs	r3, #9
 800dbea:	6033      	str	r3, [r6, #0]
 800dbec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800dbf0:	81a3      	strh	r3, [r4, #12]
 800dbf2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbf6:	e03e      	b.n	800dc76 <__swsetup_r+0xba>
 800dbf8:	4b25      	ldr	r3, [pc, #148]	; (800dc90 <__swsetup_r+0xd4>)
 800dbfa:	429c      	cmp	r4, r3
 800dbfc:	d101      	bne.n	800dc02 <__swsetup_r+0x46>
 800dbfe:	68ac      	ldr	r4, [r5, #8]
 800dc00:	e7eb      	b.n	800dbda <__swsetup_r+0x1e>
 800dc02:	4b24      	ldr	r3, [pc, #144]	; (800dc94 <__swsetup_r+0xd8>)
 800dc04:	429c      	cmp	r4, r3
 800dc06:	bf08      	it	eq
 800dc08:	68ec      	ldreq	r4, [r5, #12]
 800dc0a:	e7e6      	b.n	800dbda <__swsetup_r+0x1e>
 800dc0c:	0758      	lsls	r0, r3, #29
 800dc0e:	d512      	bpl.n	800dc36 <__swsetup_r+0x7a>
 800dc10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dc12:	b141      	cbz	r1, 800dc26 <__swsetup_r+0x6a>
 800dc14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dc18:	4299      	cmp	r1, r3
 800dc1a:	d002      	beq.n	800dc22 <__swsetup_r+0x66>
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	f002 f939 	bl	800fe94 <_free_r>
 800dc22:	2300      	movs	r3, #0
 800dc24:	6363      	str	r3, [r4, #52]	; 0x34
 800dc26:	89a3      	ldrh	r3, [r4, #12]
 800dc28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800dc2c:	81a3      	strh	r3, [r4, #12]
 800dc2e:	2300      	movs	r3, #0
 800dc30:	6063      	str	r3, [r4, #4]
 800dc32:	6923      	ldr	r3, [r4, #16]
 800dc34:	6023      	str	r3, [r4, #0]
 800dc36:	89a3      	ldrh	r3, [r4, #12]
 800dc38:	f043 0308 	orr.w	r3, r3, #8
 800dc3c:	81a3      	strh	r3, [r4, #12]
 800dc3e:	6923      	ldr	r3, [r4, #16]
 800dc40:	b94b      	cbnz	r3, 800dc56 <__swsetup_r+0x9a>
 800dc42:	89a3      	ldrh	r3, [r4, #12]
 800dc44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800dc48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800dc4c:	d003      	beq.n	800dc56 <__swsetup_r+0x9a>
 800dc4e:	4621      	mov	r1, r4
 800dc50:	4630      	mov	r0, r6
 800dc52:	f001 fbed 	bl	800f430 <__smakebuf_r>
 800dc56:	89a0      	ldrh	r0, [r4, #12]
 800dc58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800dc5c:	f010 0301 	ands.w	r3, r0, #1
 800dc60:	d00a      	beq.n	800dc78 <__swsetup_r+0xbc>
 800dc62:	2300      	movs	r3, #0
 800dc64:	60a3      	str	r3, [r4, #8]
 800dc66:	6963      	ldr	r3, [r4, #20]
 800dc68:	425b      	negs	r3, r3
 800dc6a:	61a3      	str	r3, [r4, #24]
 800dc6c:	6923      	ldr	r3, [r4, #16]
 800dc6e:	b943      	cbnz	r3, 800dc82 <__swsetup_r+0xc6>
 800dc70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800dc74:	d1ba      	bne.n	800dbec <__swsetup_r+0x30>
 800dc76:	bd70      	pop	{r4, r5, r6, pc}
 800dc78:	0781      	lsls	r1, r0, #30
 800dc7a:	bf58      	it	pl
 800dc7c:	6963      	ldrpl	r3, [r4, #20]
 800dc7e:	60a3      	str	r3, [r4, #8]
 800dc80:	e7f4      	b.n	800dc6c <__swsetup_r+0xb0>
 800dc82:	2000      	movs	r0, #0
 800dc84:	e7f7      	b.n	800dc76 <__swsetup_r+0xba>
 800dc86:	bf00      	nop
 800dc88:	20000194 	.word	0x20000194
 800dc8c:	08010c7c 	.word	0x08010c7c
 800dc90:	08010c9c 	.word	0x08010c9c
 800dc94:	08010c5c 	.word	0x08010c5c

0800dc98 <quorem>:
 800dc98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9c:	6903      	ldr	r3, [r0, #16]
 800dc9e:	690c      	ldr	r4, [r1, #16]
 800dca0:	42a3      	cmp	r3, r4
 800dca2:	4607      	mov	r7, r0
 800dca4:	f2c0 8081 	blt.w	800ddaa <quorem+0x112>
 800dca8:	3c01      	subs	r4, #1
 800dcaa:	f101 0814 	add.w	r8, r1, #20
 800dcae:	f100 0514 	add.w	r5, r0, #20
 800dcb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dcb6:	9301      	str	r3, [sp, #4]
 800dcb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dcbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dcc0:	3301      	adds	r3, #1
 800dcc2:	429a      	cmp	r2, r3
 800dcc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800dcc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dccc:	fbb2 f6f3 	udiv	r6, r2, r3
 800dcd0:	d331      	bcc.n	800dd36 <quorem+0x9e>
 800dcd2:	f04f 0e00 	mov.w	lr, #0
 800dcd6:	4640      	mov	r0, r8
 800dcd8:	46ac      	mov	ip, r5
 800dcda:	46f2      	mov	sl, lr
 800dcdc:	f850 2b04 	ldr.w	r2, [r0], #4
 800dce0:	b293      	uxth	r3, r2
 800dce2:	fb06 e303 	mla	r3, r6, r3, lr
 800dce6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	ebaa 0303 	sub.w	r3, sl, r3
 800dcf0:	f8dc a000 	ldr.w	sl, [ip]
 800dcf4:	0c12      	lsrs	r2, r2, #16
 800dcf6:	fa13 f38a 	uxtah	r3, r3, sl
 800dcfa:	fb06 e202 	mla	r2, r6, r2, lr
 800dcfe:	9300      	str	r3, [sp, #0]
 800dd00:	9b00      	ldr	r3, [sp, #0]
 800dd02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800dd06:	b292      	uxth	r2, r2
 800dd08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800dd0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd10:	f8bd 3000 	ldrh.w	r3, [sp]
 800dd14:	4581      	cmp	r9, r0
 800dd16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd1a:	f84c 3b04 	str.w	r3, [ip], #4
 800dd1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800dd22:	d2db      	bcs.n	800dcdc <quorem+0x44>
 800dd24:	f855 300b 	ldr.w	r3, [r5, fp]
 800dd28:	b92b      	cbnz	r3, 800dd36 <quorem+0x9e>
 800dd2a:	9b01      	ldr	r3, [sp, #4]
 800dd2c:	3b04      	subs	r3, #4
 800dd2e:	429d      	cmp	r5, r3
 800dd30:	461a      	mov	r2, r3
 800dd32:	d32e      	bcc.n	800dd92 <quorem+0xfa>
 800dd34:	613c      	str	r4, [r7, #16]
 800dd36:	4638      	mov	r0, r7
 800dd38:	f001 fea0 	bl	800fa7c <__mcmp>
 800dd3c:	2800      	cmp	r0, #0
 800dd3e:	db24      	blt.n	800dd8a <quorem+0xf2>
 800dd40:	3601      	adds	r6, #1
 800dd42:	4628      	mov	r0, r5
 800dd44:	f04f 0c00 	mov.w	ip, #0
 800dd48:	f858 2b04 	ldr.w	r2, [r8], #4
 800dd4c:	f8d0 e000 	ldr.w	lr, [r0]
 800dd50:	b293      	uxth	r3, r2
 800dd52:	ebac 0303 	sub.w	r3, ip, r3
 800dd56:	0c12      	lsrs	r2, r2, #16
 800dd58:	fa13 f38e 	uxtah	r3, r3, lr
 800dd5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800dd60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd6a:	45c1      	cmp	r9, r8
 800dd6c:	f840 3b04 	str.w	r3, [r0], #4
 800dd70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800dd74:	d2e8      	bcs.n	800dd48 <quorem+0xb0>
 800dd76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd7e:	b922      	cbnz	r2, 800dd8a <quorem+0xf2>
 800dd80:	3b04      	subs	r3, #4
 800dd82:	429d      	cmp	r5, r3
 800dd84:	461a      	mov	r2, r3
 800dd86:	d30a      	bcc.n	800dd9e <quorem+0x106>
 800dd88:	613c      	str	r4, [r7, #16]
 800dd8a:	4630      	mov	r0, r6
 800dd8c:	b003      	add	sp, #12
 800dd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd92:	6812      	ldr	r2, [r2, #0]
 800dd94:	3b04      	subs	r3, #4
 800dd96:	2a00      	cmp	r2, #0
 800dd98:	d1cc      	bne.n	800dd34 <quorem+0x9c>
 800dd9a:	3c01      	subs	r4, #1
 800dd9c:	e7c7      	b.n	800dd2e <quorem+0x96>
 800dd9e:	6812      	ldr	r2, [r2, #0]
 800dda0:	3b04      	subs	r3, #4
 800dda2:	2a00      	cmp	r2, #0
 800dda4:	d1f0      	bne.n	800dd88 <quorem+0xf0>
 800dda6:	3c01      	subs	r4, #1
 800dda8:	e7eb      	b.n	800dd82 <quorem+0xea>
 800ddaa:	2000      	movs	r0, #0
 800ddac:	e7ee      	b.n	800dd8c <quorem+0xf4>
	...

0800ddb0 <_dtoa_r>:
 800ddb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddb4:	ed2d 8b04 	vpush	{d8-d9}
 800ddb8:	ec57 6b10 	vmov	r6, r7, d0
 800ddbc:	b093      	sub	sp, #76	; 0x4c
 800ddbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ddc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ddc4:	9106      	str	r1, [sp, #24]
 800ddc6:	ee10 aa10 	vmov	sl, s0
 800ddca:	4604      	mov	r4, r0
 800ddcc:	9209      	str	r2, [sp, #36]	; 0x24
 800ddce:	930c      	str	r3, [sp, #48]	; 0x30
 800ddd0:	46bb      	mov	fp, r7
 800ddd2:	b975      	cbnz	r5, 800ddf2 <_dtoa_r+0x42>
 800ddd4:	2010      	movs	r0, #16
 800ddd6:	f001 fb6b 	bl	800f4b0 <malloc>
 800ddda:	4602      	mov	r2, r0
 800dddc:	6260      	str	r0, [r4, #36]	; 0x24
 800ddde:	b920      	cbnz	r0, 800ddea <_dtoa_r+0x3a>
 800dde0:	4ba7      	ldr	r3, [pc, #668]	; (800e080 <_dtoa_r+0x2d0>)
 800dde2:	21ea      	movs	r1, #234	; 0xea
 800dde4:	48a7      	ldr	r0, [pc, #668]	; (800e084 <_dtoa_r+0x2d4>)
 800dde6:	f002 fc79 	bl	80106dc <__assert_func>
 800ddea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ddee:	6005      	str	r5, [r0, #0]
 800ddf0:	60c5      	str	r5, [r0, #12]
 800ddf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ddf4:	6819      	ldr	r1, [r3, #0]
 800ddf6:	b151      	cbz	r1, 800de0e <_dtoa_r+0x5e>
 800ddf8:	685a      	ldr	r2, [r3, #4]
 800ddfa:	604a      	str	r2, [r1, #4]
 800ddfc:	2301      	movs	r3, #1
 800ddfe:	4093      	lsls	r3, r2
 800de00:	608b      	str	r3, [r1, #8]
 800de02:	4620      	mov	r0, r4
 800de04:	f001 fbae 	bl	800f564 <_Bfree>
 800de08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]
 800de0e:	1e3b      	subs	r3, r7, #0
 800de10:	bfaa      	itet	ge
 800de12:	2300      	movge	r3, #0
 800de14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800de18:	f8c8 3000 	strge.w	r3, [r8]
 800de1c:	4b9a      	ldr	r3, [pc, #616]	; (800e088 <_dtoa_r+0x2d8>)
 800de1e:	bfbc      	itt	lt
 800de20:	2201      	movlt	r2, #1
 800de22:	f8c8 2000 	strlt.w	r2, [r8]
 800de26:	ea33 030b 	bics.w	r3, r3, fp
 800de2a:	d11b      	bne.n	800de64 <_dtoa_r+0xb4>
 800de2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800de32:	6013      	str	r3, [r2, #0]
 800de34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de38:	4333      	orrs	r3, r6
 800de3a:	f000 8592 	beq.w	800e962 <_dtoa_r+0xbb2>
 800de3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de40:	b963      	cbnz	r3, 800de5c <_dtoa_r+0xac>
 800de42:	4b92      	ldr	r3, [pc, #584]	; (800e08c <_dtoa_r+0x2dc>)
 800de44:	e022      	b.n	800de8c <_dtoa_r+0xdc>
 800de46:	4b92      	ldr	r3, [pc, #584]	; (800e090 <_dtoa_r+0x2e0>)
 800de48:	9301      	str	r3, [sp, #4]
 800de4a:	3308      	adds	r3, #8
 800de4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800de4e:	6013      	str	r3, [r2, #0]
 800de50:	9801      	ldr	r0, [sp, #4]
 800de52:	b013      	add	sp, #76	; 0x4c
 800de54:	ecbd 8b04 	vpop	{d8-d9}
 800de58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de5c:	4b8b      	ldr	r3, [pc, #556]	; (800e08c <_dtoa_r+0x2dc>)
 800de5e:	9301      	str	r3, [sp, #4]
 800de60:	3303      	adds	r3, #3
 800de62:	e7f3      	b.n	800de4c <_dtoa_r+0x9c>
 800de64:	2200      	movs	r2, #0
 800de66:	2300      	movs	r3, #0
 800de68:	4650      	mov	r0, sl
 800de6a:	4659      	mov	r1, fp
 800de6c:	f7f2 fe44 	bl	8000af8 <__aeabi_dcmpeq>
 800de70:	ec4b ab19 	vmov	d9, sl, fp
 800de74:	4680      	mov	r8, r0
 800de76:	b158      	cbz	r0, 800de90 <_dtoa_r+0xe0>
 800de78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800de7a:	2301      	movs	r3, #1
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de80:	2b00      	cmp	r3, #0
 800de82:	f000 856b 	beq.w	800e95c <_dtoa_r+0xbac>
 800de86:	4883      	ldr	r0, [pc, #524]	; (800e094 <_dtoa_r+0x2e4>)
 800de88:	6018      	str	r0, [r3, #0]
 800de8a:	1e43      	subs	r3, r0, #1
 800de8c:	9301      	str	r3, [sp, #4]
 800de8e:	e7df      	b.n	800de50 <_dtoa_r+0xa0>
 800de90:	ec4b ab10 	vmov	d0, sl, fp
 800de94:	aa10      	add	r2, sp, #64	; 0x40
 800de96:	a911      	add	r1, sp, #68	; 0x44
 800de98:	4620      	mov	r0, r4
 800de9a:	f001 ff11 	bl	800fcc0 <__d2b>
 800de9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800dea2:	ee08 0a10 	vmov	s16, r0
 800dea6:	2d00      	cmp	r5, #0
 800dea8:	f000 8084 	beq.w	800dfb4 <_dtoa_r+0x204>
 800deac:	ee19 3a90 	vmov	r3, s19
 800deb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800deb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800deb8:	4656      	mov	r6, sl
 800deba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800debe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800dec2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800dec6:	4b74      	ldr	r3, [pc, #464]	; (800e098 <_dtoa_r+0x2e8>)
 800dec8:	2200      	movs	r2, #0
 800deca:	4630      	mov	r0, r6
 800decc:	4639      	mov	r1, r7
 800dece:	f7f2 f9f3 	bl	80002b8 <__aeabi_dsub>
 800ded2:	a365      	add	r3, pc, #404	; (adr r3, 800e068 <_dtoa_r+0x2b8>)
 800ded4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded8:	f7f2 fba6 	bl	8000628 <__aeabi_dmul>
 800dedc:	a364      	add	r3, pc, #400	; (adr r3, 800e070 <_dtoa_r+0x2c0>)
 800dede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee2:	f7f2 f9eb 	bl	80002bc <__adddf3>
 800dee6:	4606      	mov	r6, r0
 800dee8:	4628      	mov	r0, r5
 800deea:	460f      	mov	r7, r1
 800deec:	f7f2 fb32 	bl	8000554 <__aeabi_i2d>
 800def0:	a361      	add	r3, pc, #388	; (adr r3, 800e078 <_dtoa_r+0x2c8>)
 800def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def6:	f7f2 fb97 	bl	8000628 <__aeabi_dmul>
 800defa:	4602      	mov	r2, r0
 800defc:	460b      	mov	r3, r1
 800defe:	4630      	mov	r0, r6
 800df00:	4639      	mov	r1, r7
 800df02:	f7f2 f9db 	bl	80002bc <__adddf3>
 800df06:	4606      	mov	r6, r0
 800df08:	460f      	mov	r7, r1
 800df0a:	f7f2 fe3d 	bl	8000b88 <__aeabi_d2iz>
 800df0e:	2200      	movs	r2, #0
 800df10:	9000      	str	r0, [sp, #0]
 800df12:	2300      	movs	r3, #0
 800df14:	4630      	mov	r0, r6
 800df16:	4639      	mov	r1, r7
 800df18:	f7f2 fdf8 	bl	8000b0c <__aeabi_dcmplt>
 800df1c:	b150      	cbz	r0, 800df34 <_dtoa_r+0x184>
 800df1e:	9800      	ldr	r0, [sp, #0]
 800df20:	f7f2 fb18 	bl	8000554 <__aeabi_i2d>
 800df24:	4632      	mov	r2, r6
 800df26:	463b      	mov	r3, r7
 800df28:	f7f2 fde6 	bl	8000af8 <__aeabi_dcmpeq>
 800df2c:	b910      	cbnz	r0, 800df34 <_dtoa_r+0x184>
 800df2e:	9b00      	ldr	r3, [sp, #0]
 800df30:	3b01      	subs	r3, #1
 800df32:	9300      	str	r3, [sp, #0]
 800df34:	9b00      	ldr	r3, [sp, #0]
 800df36:	2b16      	cmp	r3, #22
 800df38:	d85a      	bhi.n	800dff0 <_dtoa_r+0x240>
 800df3a:	9a00      	ldr	r2, [sp, #0]
 800df3c:	4b57      	ldr	r3, [pc, #348]	; (800e09c <_dtoa_r+0x2ec>)
 800df3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df46:	ec51 0b19 	vmov	r0, r1, d9
 800df4a:	f7f2 fddf 	bl	8000b0c <__aeabi_dcmplt>
 800df4e:	2800      	cmp	r0, #0
 800df50:	d050      	beq.n	800dff4 <_dtoa_r+0x244>
 800df52:	9b00      	ldr	r3, [sp, #0]
 800df54:	3b01      	subs	r3, #1
 800df56:	9300      	str	r3, [sp, #0]
 800df58:	2300      	movs	r3, #0
 800df5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800df5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df5e:	1b5d      	subs	r5, r3, r5
 800df60:	1e6b      	subs	r3, r5, #1
 800df62:	9305      	str	r3, [sp, #20]
 800df64:	bf45      	ittet	mi
 800df66:	f1c5 0301 	rsbmi	r3, r5, #1
 800df6a:	9304      	strmi	r3, [sp, #16]
 800df6c:	2300      	movpl	r3, #0
 800df6e:	2300      	movmi	r3, #0
 800df70:	bf4c      	ite	mi
 800df72:	9305      	strmi	r3, [sp, #20]
 800df74:	9304      	strpl	r3, [sp, #16]
 800df76:	9b00      	ldr	r3, [sp, #0]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	db3d      	blt.n	800dff8 <_dtoa_r+0x248>
 800df7c:	9b05      	ldr	r3, [sp, #20]
 800df7e:	9a00      	ldr	r2, [sp, #0]
 800df80:	920a      	str	r2, [sp, #40]	; 0x28
 800df82:	4413      	add	r3, r2
 800df84:	9305      	str	r3, [sp, #20]
 800df86:	2300      	movs	r3, #0
 800df88:	9307      	str	r3, [sp, #28]
 800df8a:	9b06      	ldr	r3, [sp, #24]
 800df8c:	2b09      	cmp	r3, #9
 800df8e:	f200 8089 	bhi.w	800e0a4 <_dtoa_r+0x2f4>
 800df92:	2b05      	cmp	r3, #5
 800df94:	bfc4      	itt	gt
 800df96:	3b04      	subgt	r3, #4
 800df98:	9306      	strgt	r3, [sp, #24]
 800df9a:	9b06      	ldr	r3, [sp, #24]
 800df9c:	f1a3 0302 	sub.w	r3, r3, #2
 800dfa0:	bfcc      	ite	gt
 800dfa2:	2500      	movgt	r5, #0
 800dfa4:	2501      	movle	r5, #1
 800dfa6:	2b03      	cmp	r3, #3
 800dfa8:	f200 8087 	bhi.w	800e0ba <_dtoa_r+0x30a>
 800dfac:	e8df f003 	tbb	[pc, r3]
 800dfb0:	59383a2d 	.word	0x59383a2d
 800dfb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800dfb8:	441d      	add	r5, r3
 800dfba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800dfbe:	2b20      	cmp	r3, #32
 800dfc0:	bfc1      	itttt	gt
 800dfc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800dfc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800dfca:	fa0b f303 	lslgt.w	r3, fp, r3
 800dfce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800dfd2:	bfda      	itte	le
 800dfd4:	f1c3 0320 	rsble	r3, r3, #32
 800dfd8:	fa06 f003 	lslle.w	r0, r6, r3
 800dfdc:	4318      	orrgt	r0, r3
 800dfde:	f7f2 faa9 	bl	8000534 <__aeabi_ui2d>
 800dfe2:	2301      	movs	r3, #1
 800dfe4:	4606      	mov	r6, r0
 800dfe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800dfea:	3d01      	subs	r5, #1
 800dfec:	930e      	str	r3, [sp, #56]	; 0x38
 800dfee:	e76a      	b.n	800dec6 <_dtoa_r+0x116>
 800dff0:	2301      	movs	r3, #1
 800dff2:	e7b2      	b.n	800df5a <_dtoa_r+0x1aa>
 800dff4:	900b      	str	r0, [sp, #44]	; 0x2c
 800dff6:	e7b1      	b.n	800df5c <_dtoa_r+0x1ac>
 800dff8:	9b04      	ldr	r3, [sp, #16]
 800dffa:	9a00      	ldr	r2, [sp, #0]
 800dffc:	1a9b      	subs	r3, r3, r2
 800dffe:	9304      	str	r3, [sp, #16]
 800e000:	4253      	negs	r3, r2
 800e002:	9307      	str	r3, [sp, #28]
 800e004:	2300      	movs	r3, #0
 800e006:	930a      	str	r3, [sp, #40]	; 0x28
 800e008:	e7bf      	b.n	800df8a <_dtoa_r+0x1da>
 800e00a:	2300      	movs	r3, #0
 800e00c:	9308      	str	r3, [sp, #32]
 800e00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e010:	2b00      	cmp	r3, #0
 800e012:	dc55      	bgt.n	800e0c0 <_dtoa_r+0x310>
 800e014:	2301      	movs	r3, #1
 800e016:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e01a:	461a      	mov	r2, r3
 800e01c:	9209      	str	r2, [sp, #36]	; 0x24
 800e01e:	e00c      	b.n	800e03a <_dtoa_r+0x28a>
 800e020:	2301      	movs	r3, #1
 800e022:	e7f3      	b.n	800e00c <_dtoa_r+0x25c>
 800e024:	2300      	movs	r3, #0
 800e026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e028:	9308      	str	r3, [sp, #32]
 800e02a:	9b00      	ldr	r3, [sp, #0]
 800e02c:	4413      	add	r3, r2
 800e02e:	9302      	str	r3, [sp, #8]
 800e030:	3301      	adds	r3, #1
 800e032:	2b01      	cmp	r3, #1
 800e034:	9303      	str	r3, [sp, #12]
 800e036:	bfb8      	it	lt
 800e038:	2301      	movlt	r3, #1
 800e03a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e03c:	2200      	movs	r2, #0
 800e03e:	6042      	str	r2, [r0, #4]
 800e040:	2204      	movs	r2, #4
 800e042:	f102 0614 	add.w	r6, r2, #20
 800e046:	429e      	cmp	r6, r3
 800e048:	6841      	ldr	r1, [r0, #4]
 800e04a:	d93d      	bls.n	800e0c8 <_dtoa_r+0x318>
 800e04c:	4620      	mov	r0, r4
 800e04e:	f001 fa49 	bl	800f4e4 <_Balloc>
 800e052:	9001      	str	r0, [sp, #4]
 800e054:	2800      	cmp	r0, #0
 800e056:	d13b      	bne.n	800e0d0 <_dtoa_r+0x320>
 800e058:	4b11      	ldr	r3, [pc, #68]	; (800e0a0 <_dtoa_r+0x2f0>)
 800e05a:	4602      	mov	r2, r0
 800e05c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e060:	e6c0      	b.n	800dde4 <_dtoa_r+0x34>
 800e062:	2301      	movs	r3, #1
 800e064:	e7df      	b.n	800e026 <_dtoa_r+0x276>
 800e066:	bf00      	nop
 800e068:	636f4361 	.word	0x636f4361
 800e06c:	3fd287a7 	.word	0x3fd287a7
 800e070:	8b60c8b3 	.word	0x8b60c8b3
 800e074:	3fc68a28 	.word	0x3fc68a28
 800e078:	509f79fb 	.word	0x509f79fb
 800e07c:	3fd34413 	.word	0x3fd34413
 800e080:	08010bd6 	.word	0x08010bd6
 800e084:	08010bed 	.word	0x08010bed
 800e088:	7ff00000 	.word	0x7ff00000
 800e08c:	08010bd2 	.word	0x08010bd2
 800e090:	08010bc9 	.word	0x08010bc9
 800e094:	08010a49 	.word	0x08010a49
 800e098:	3ff80000 	.word	0x3ff80000
 800e09c:	08010dc0 	.word	0x08010dc0
 800e0a0:	08010c48 	.word	0x08010c48
 800e0a4:	2501      	movs	r5, #1
 800e0a6:	2300      	movs	r3, #0
 800e0a8:	9306      	str	r3, [sp, #24]
 800e0aa:	9508      	str	r5, [sp, #32]
 800e0ac:	f04f 33ff 	mov.w	r3, #4294967295
 800e0b0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e0b4:	2200      	movs	r2, #0
 800e0b6:	2312      	movs	r3, #18
 800e0b8:	e7b0      	b.n	800e01c <_dtoa_r+0x26c>
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	9308      	str	r3, [sp, #32]
 800e0be:	e7f5      	b.n	800e0ac <_dtoa_r+0x2fc>
 800e0c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e0c6:	e7b8      	b.n	800e03a <_dtoa_r+0x28a>
 800e0c8:	3101      	adds	r1, #1
 800e0ca:	6041      	str	r1, [r0, #4]
 800e0cc:	0052      	lsls	r2, r2, #1
 800e0ce:	e7b8      	b.n	800e042 <_dtoa_r+0x292>
 800e0d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e0d2:	9a01      	ldr	r2, [sp, #4]
 800e0d4:	601a      	str	r2, [r3, #0]
 800e0d6:	9b03      	ldr	r3, [sp, #12]
 800e0d8:	2b0e      	cmp	r3, #14
 800e0da:	f200 809d 	bhi.w	800e218 <_dtoa_r+0x468>
 800e0de:	2d00      	cmp	r5, #0
 800e0e0:	f000 809a 	beq.w	800e218 <_dtoa_r+0x468>
 800e0e4:	9b00      	ldr	r3, [sp, #0]
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	dd32      	ble.n	800e150 <_dtoa_r+0x3a0>
 800e0ea:	4ab7      	ldr	r2, [pc, #732]	; (800e3c8 <_dtoa_r+0x618>)
 800e0ec:	f003 030f 	and.w	r3, r3, #15
 800e0f0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e0f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e0f8:	9b00      	ldr	r3, [sp, #0]
 800e0fa:	05d8      	lsls	r0, r3, #23
 800e0fc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e100:	d516      	bpl.n	800e130 <_dtoa_r+0x380>
 800e102:	4bb2      	ldr	r3, [pc, #712]	; (800e3cc <_dtoa_r+0x61c>)
 800e104:	ec51 0b19 	vmov	r0, r1, d9
 800e108:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e10c:	f7f2 fbb6 	bl	800087c <__aeabi_ddiv>
 800e110:	f007 070f 	and.w	r7, r7, #15
 800e114:	4682      	mov	sl, r0
 800e116:	468b      	mov	fp, r1
 800e118:	2503      	movs	r5, #3
 800e11a:	4eac      	ldr	r6, [pc, #688]	; (800e3cc <_dtoa_r+0x61c>)
 800e11c:	b957      	cbnz	r7, 800e134 <_dtoa_r+0x384>
 800e11e:	4642      	mov	r2, r8
 800e120:	464b      	mov	r3, r9
 800e122:	4650      	mov	r0, sl
 800e124:	4659      	mov	r1, fp
 800e126:	f7f2 fba9 	bl	800087c <__aeabi_ddiv>
 800e12a:	4682      	mov	sl, r0
 800e12c:	468b      	mov	fp, r1
 800e12e:	e028      	b.n	800e182 <_dtoa_r+0x3d2>
 800e130:	2502      	movs	r5, #2
 800e132:	e7f2      	b.n	800e11a <_dtoa_r+0x36a>
 800e134:	07f9      	lsls	r1, r7, #31
 800e136:	d508      	bpl.n	800e14a <_dtoa_r+0x39a>
 800e138:	4640      	mov	r0, r8
 800e13a:	4649      	mov	r1, r9
 800e13c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e140:	f7f2 fa72 	bl	8000628 <__aeabi_dmul>
 800e144:	3501      	adds	r5, #1
 800e146:	4680      	mov	r8, r0
 800e148:	4689      	mov	r9, r1
 800e14a:	107f      	asrs	r7, r7, #1
 800e14c:	3608      	adds	r6, #8
 800e14e:	e7e5      	b.n	800e11c <_dtoa_r+0x36c>
 800e150:	f000 809b 	beq.w	800e28a <_dtoa_r+0x4da>
 800e154:	9b00      	ldr	r3, [sp, #0]
 800e156:	4f9d      	ldr	r7, [pc, #628]	; (800e3cc <_dtoa_r+0x61c>)
 800e158:	425e      	negs	r6, r3
 800e15a:	4b9b      	ldr	r3, [pc, #620]	; (800e3c8 <_dtoa_r+0x618>)
 800e15c:	f006 020f 	and.w	r2, r6, #15
 800e160:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e164:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e168:	ec51 0b19 	vmov	r0, r1, d9
 800e16c:	f7f2 fa5c 	bl	8000628 <__aeabi_dmul>
 800e170:	1136      	asrs	r6, r6, #4
 800e172:	4682      	mov	sl, r0
 800e174:	468b      	mov	fp, r1
 800e176:	2300      	movs	r3, #0
 800e178:	2502      	movs	r5, #2
 800e17a:	2e00      	cmp	r6, #0
 800e17c:	d17a      	bne.n	800e274 <_dtoa_r+0x4c4>
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d1d3      	bne.n	800e12a <_dtoa_r+0x37a>
 800e182:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e184:	2b00      	cmp	r3, #0
 800e186:	f000 8082 	beq.w	800e28e <_dtoa_r+0x4de>
 800e18a:	4b91      	ldr	r3, [pc, #580]	; (800e3d0 <_dtoa_r+0x620>)
 800e18c:	2200      	movs	r2, #0
 800e18e:	4650      	mov	r0, sl
 800e190:	4659      	mov	r1, fp
 800e192:	f7f2 fcbb 	bl	8000b0c <__aeabi_dcmplt>
 800e196:	2800      	cmp	r0, #0
 800e198:	d079      	beq.n	800e28e <_dtoa_r+0x4de>
 800e19a:	9b03      	ldr	r3, [sp, #12]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d076      	beq.n	800e28e <_dtoa_r+0x4de>
 800e1a0:	9b02      	ldr	r3, [sp, #8]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	dd36      	ble.n	800e214 <_dtoa_r+0x464>
 800e1a6:	9b00      	ldr	r3, [sp, #0]
 800e1a8:	4650      	mov	r0, sl
 800e1aa:	4659      	mov	r1, fp
 800e1ac:	1e5f      	subs	r7, r3, #1
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	4b88      	ldr	r3, [pc, #544]	; (800e3d4 <_dtoa_r+0x624>)
 800e1b2:	f7f2 fa39 	bl	8000628 <__aeabi_dmul>
 800e1b6:	9e02      	ldr	r6, [sp, #8]
 800e1b8:	4682      	mov	sl, r0
 800e1ba:	468b      	mov	fp, r1
 800e1bc:	3501      	adds	r5, #1
 800e1be:	4628      	mov	r0, r5
 800e1c0:	f7f2 f9c8 	bl	8000554 <__aeabi_i2d>
 800e1c4:	4652      	mov	r2, sl
 800e1c6:	465b      	mov	r3, fp
 800e1c8:	f7f2 fa2e 	bl	8000628 <__aeabi_dmul>
 800e1cc:	4b82      	ldr	r3, [pc, #520]	; (800e3d8 <_dtoa_r+0x628>)
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	f7f2 f874 	bl	80002bc <__adddf3>
 800e1d4:	46d0      	mov	r8, sl
 800e1d6:	46d9      	mov	r9, fp
 800e1d8:	4682      	mov	sl, r0
 800e1da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e1de:	2e00      	cmp	r6, #0
 800e1e0:	d158      	bne.n	800e294 <_dtoa_r+0x4e4>
 800e1e2:	4b7e      	ldr	r3, [pc, #504]	; (800e3dc <_dtoa_r+0x62c>)
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	4640      	mov	r0, r8
 800e1e8:	4649      	mov	r1, r9
 800e1ea:	f7f2 f865 	bl	80002b8 <__aeabi_dsub>
 800e1ee:	4652      	mov	r2, sl
 800e1f0:	465b      	mov	r3, fp
 800e1f2:	4680      	mov	r8, r0
 800e1f4:	4689      	mov	r9, r1
 800e1f6:	f7f2 fca7 	bl	8000b48 <__aeabi_dcmpgt>
 800e1fa:	2800      	cmp	r0, #0
 800e1fc:	f040 8295 	bne.w	800e72a <_dtoa_r+0x97a>
 800e200:	4652      	mov	r2, sl
 800e202:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e206:	4640      	mov	r0, r8
 800e208:	4649      	mov	r1, r9
 800e20a:	f7f2 fc7f 	bl	8000b0c <__aeabi_dcmplt>
 800e20e:	2800      	cmp	r0, #0
 800e210:	f040 8289 	bne.w	800e726 <_dtoa_r+0x976>
 800e214:	ec5b ab19 	vmov	sl, fp, d9
 800e218:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f2c0 8148 	blt.w	800e4b0 <_dtoa_r+0x700>
 800e220:	9a00      	ldr	r2, [sp, #0]
 800e222:	2a0e      	cmp	r2, #14
 800e224:	f300 8144 	bgt.w	800e4b0 <_dtoa_r+0x700>
 800e228:	4b67      	ldr	r3, [pc, #412]	; (800e3c8 <_dtoa_r+0x618>)
 800e22a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e22e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e234:	2b00      	cmp	r3, #0
 800e236:	f280 80d5 	bge.w	800e3e4 <_dtoa_r+0x634>
 800e23a:	9b03      	ldr	r3, [sp, #12]
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	f300 80d1 	bgt.w	800e3e4 <_dtoa_r+0x634>
 800e242:	f040 826f 	bne.w	800e724 <_dtoa_r+0x974>
 800e246:	4b65      	ldr	r3, [pc, #404]	; (800e3dc <_dtoa_r+0x62c>)
 800e248:	2200      	movs	r2, #0
 800e24a:	4640      	mov	r0, r8
 800e24c:	4649      	mov	r1, r9
 800e24e:	f7f2 f9eb 	bl	8000628 <__aeabi_dmul>
 800e252:	4652      	mov	r2, sl
 800e254:	465b      	mov	r3, fp
 800e256:	f7f2 fc6d 	bl	8000b34 <__aeabi_dcmpge>
 800e25a:	9e03      	ldr	r6, [sp, #12]
 800e25c:	4637      	mov	r7, r6
 800e25e:	2800      	cmp	r0, #0
 800e260:	f040 8245 	bne.w	800e6ee <_dtoa_r+0x93e>
 800e264:	9d01      	ldr	r5, [sp, #4]
 800e266:	2331      	movs	r3, #49	; 0x31
 800e268:	f805 3b01 	strb.w	r3, [r5], #1
 800e26c:	9b00      	ldr	r3, [sp, #0]
 800e26e:	3301      	adds	r3, #1
 800e270:	9300      	str	r3, [sp, #0]
 800e272:	e240      	b.n	800e6f6 <_dtoa_r+0x946>
 800e274:	07f2      	lsls	r2, r6, #31
 800e276:	d505      	bpl.n	800e284 <_dtoa_r+0x4d4>
 800e278:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e27c:	f7f2 f9d4 	bl	8000628 <__aeabi_dmul>
 800e280:	3501      	adds	r5, #1
 800e282:	2301      	movs	r3, #1
 800e284:	1076      	asrs	r6, r6, #1
 800e286:	3708      	adds	r7, #8
 800e288:	e777      	b.n	800e17a <_dtoa_r+0x3ca>
 800e28a:	2502      	movs	r5, #2
 800e28c:	e779      	b.n	800e182 <_dtoa_r+0x3d2>
 800e28e:	9f00      	ldr	r7, [sp, #0]
 800e290:	9e03      	ldr	r6, [sp, #12]
 800e292:	e794      	b.n	800e1be <_dtoa_r+0x40e>
 800e294:	9901      	ldr	r1, [sp, #4]
 800e296:	4b4c      	ldr	r3, [pc, #304]	; (800e3c8 <_dtoa_r+0x618>)
 800e298:	4431      	add	r1, r6
 800e29a:	910d      	str	r1, [sp, #52]	; 0x34
 800e29c:	9908      	ldr	r1, [sp, #32]
 800e29e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e2a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e2a6:	2900      	cmp	r1, #0
 800e2a8:	d043      	beq.n	800e332 <_dtoa_r+0x582>
 800e2aa:	494d      	ldr	r1, [pc, #308]	; (800e3e0 <_dtoa_r+0x630>)
 800e2ac:	2000      	movs	r0, #0
 800e2ae:	f7f2 fae5 	bl	800087c <__aeabi_ddiv>
 800e2b2:	4652      	mov	r2, sl
 800e2b4:	465b      	mov	r3, fp
 800e2b6:	f7f1 ffff 	bl	80002b8 <__aeabi_dsub>
 800e2ba:	9d01      	ldr	r5, [sp, #4]
 800e2bc:	4682      	mov	sl, r0
 800e2be:	468b      	mov	fp, r1
 800e2c0:	4649      	mov	r1, r9
 800e2c2:	4640      	mov	r0, r8
 800e2c4:	f7f2 fc60 	bl	8000b88 <__aeabi_d2iz>
 800e2c8:	4606      	mov	r6, r0
 800e2ca:	f7f2 f943 	bl	8000554 <__aeabi_i2d>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	460b      	mov	r3, r1
 800e2d2:	4640      	mov	r0, r8
 800e2d4:	4649      	mov	r1, r9
 800e2d6:	f7f1 ffef 	bl	80002b8 <__aeabi_dsub>
 800e2da:	3630      	adds	r6, #48	; 0x30
 800e2dc:	f805 6b01 	strb.w	r6, [r5], #1
 800e2e0:	4652      	mov	r2, sl
 800e2e2:	465b      	mov	r3, fp
 800e2e4:	4680      	mov	r8, r0
 800e2e6:	4689      	mov	r9, r1
 800e2e8:	f7f2 fc10 	bl	8000b0c <__aeabi_dcmplt>
 800e2ec:	2800      	cmp	r0, #0
 800e2ee:	d163      	bne.n	800e3b8 <_dtoa_r+0x608>
 800e2f0:	4642      	mov	r2, r8
 800e2f2:	464b      	mov	r3, r9
 800e2f4:	4936      	ldr	r1, [pc, #216]	; (800e3d0 <_dtoa_r+0x620>)
 800e2f6:	2000      	movs	r0, #0
 800e2f8:	f7f1 ffde 	bl	80002b8 <__aeabi_dsub>
 800e2fc:	4652      	mov	r2, sl
 800e2fe:	465b      	mov	r3, fp
 800e300:	f7f2 fc04 	bl	8000b0c <__aeabi_dcmplt>
 800e304:	2800      	cmp	r0, #0
 800e306:	f040 80b5 	bne.w	800e474 <_dtoa_r+0x6c4>
 800e30a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e30c:	429d      	cmp	r5, r3
 800e30e:	d081      	beq.n	800e214 <_dtoa_r+0x464>
 800e310:	4b30      	ldr	r3, [pc, #192]	; (800e3d4 <_dtoa_r+0x624>)
 800e312:	2200      	movs	r2, #0
 800e314:	4650      	mov	r0, sl
 800e316:	4659      	mov	r1, fp
 800e318:	f7f2 f986 	bl	8000628 <__aeabi_dmul>
 800e31c:	4b2d      	ldr	r3, [pc, #180]	; (800e3d4 <_dtoa_r+0x624>)
 800e31e:	4682      	mov	sl, r0
 800e320:	468b      	mov	fp, r1
 800e322:	4640      	mov	r0, r8
 800e324:	4649      	mov	r1, r9
 800e326:	2200      	movs	r2, #0
 800e328:	f7f2 f97e 	bl	8000628 <__aeabi_dmul>
 800e32c:	4680      	mov	r8, r0
 800e32e:	4689      	mov	r9, r1
 800e330:	e7c6      	b.n	800e2c0 <_dtoa_r+0x510>
 800e332:	4650      	mov	r0, sl
 800e334:	4659      	mov	r1, fp
 800e336:	f7f2 f977 	bl	8000628 <__aeabi_dmul>
 800e33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e33c:	9d01      	ldr	r5, [sp, #4]
 800e33e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e340:	4682      	mov	sl, r0
 800e342:	468b      	mov	fp, r1
 800e344:	4649      	mov	r1, r9
 800e346:	4640      	mov	r0, r8
 800e348:	f7f2 fc1e 	bl	8000b88 <__aeabi_d2iz>
 800e34c:	4606      	mov	r6, r0
 800e34e:	f7f2 f901 	bl	8000554 <__aeabi_i2d>
 800e352:	3630      	adds	r6, #48	; 0x30
 800e354:	4602      	mov	r2, r0
 800e356:	460b      	mov	r3, r1
 800e358:	4640      	mov	r0, r8
 800e35a:	4649      	mov	r1, r9
 800e35c:	f7f1 ffac 	bl	80002b8 <__aeabi_dsub>
 800e360:	f805 6b01 	strb.w	r6, [r5], #1
 800e364:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e366:	429d      	cmp	r5, r3
 800e368:	4680      	mov	r8, r0
 800e36a:	4689      	mov	r9, r1
 800e36c:	f04f 0200 	mov.w	r2, #0
 800e370:	d124      	bne.n	800e3bc <_dtoa_r+0x60c>
 800e372:	4b1b      	ldr	r3, [pc, #108]	; (800e3e0 <_dtoa_r+0x630>)
 800e374:	4650      	mov	r0, sl
 800e376:	4659      	mov	r1, fp
 800e378:	f7f1 ffa0 	bl	80002bc <__adddf3>
 800e37c:	4602      	mov	r2, r0
 800e37e:	460b      	mov	r3, r1
 800e380:	4640      	mov	r0, r8
 800e382:	4649      	mov	r1, r9
 800e384:	f7f2 fbe0 	bl	8000b48 <__aeabi_dcmpgt>
 800e388:	2800      	cmp	r0, #0
 800e38a:	d173      	bne.n	800e474 <_dtoa_r+0x6c4>
 800e38c:	4652      	mov	r2, sl
 800e38e:	465b      	mov	r3, fp
 800e390:	4913      	ldr	r1, [pc, #76]	; (800e3e0 <_dtoa_r+0x630>)
 800e392:	2000      	movs	r0, #0
 800e394:	f7f1 ff90 	bl	80002b8 <__aeabi_dsub>
 800e398:	4602      	mov	r2, r0
 800e39a:	460b      	mov	r3, r1
 800e39c:	4640      	mov	r0, r8
 800e39e:	4649      	mov	r1, r9
 800e3a0:	f7f2 fbb4 	bl	8000b0c <__aeabi_dcmplt>
 800e3a4:	2800      	cmp	r0, #0
 800e3a6:	f43f af35 	beq.w	800e214 <_dtoa_r+0x464>
 800e3aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e3ac:	1e6b      	subs	r3, r5, #1
 800e3ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800e3b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e3b4:	2b30      	cmp	r3, #48	; 0x30
 800e3b6:	d0f8      	beq.n	800e3aa <_dtoa_r+0x5fa>
 800e3b8:	9700      	str	r7, [sp, #0]
 800e3ba:	e049      	b.n	800e450 <_dtoa_r+0x6a0>
 800e3bc:	4b05      	ldr	r3, [pc, #20]	; (800e3d4 <_dtoa_r+0x624>)
 800e3be:	f7f2 f933 	bl	8000628 <__aeabi_dmul>
 800e3c2:	4680      	mov	r8, r0
 800e3c4:	4689      	mov	r9, r1
 800e3c6:	e7bd      	b.n	800e344 <_dtoa_r+0x594>
 800e3c8:	08010dc0 	.word	0x08010dc0
 800e3cc:	08010d98 	.word	0x08010d98
 800e3d0:	3ff00000 	.word	0x3ff00000
 800e3d4:	40240000 	.word	0x40240000
 800e3d8:	401c0000 	.word	0x401c0000
 800e3dc:	40140000 	.word	0x40140000
 800e3e0:	3fe00000 	.word	0x3fe00000
 800e3e4:	9d01      	ldr	r5, [sp, #4]
 800e3e6:	4656      	mov	r6, sl
 800e3e8:	465f      	mov	r7, fp
 800e3ea:	4642      	mov	r2, r8
 800e3ec:	464b      	mov	r3, r9
 800e3ee:	4630      	mov	r0, r6
 800e3f0:	4639      	mov	r1, r7
 800e3f2:	f7f2 fa43 	bl	800087c <__aeabi_ddiv>
 800e3f6:	f7f2 fbc7 	bl	8000b88 <__aeabi_d2iz>
 800e3fa:	4682      	mov	sl, r0
 800e3fc:	f7f2 f8aa 	bl	8000554 <__aeabi_i2d>
 800e400:	4642      	mov	r2, r8
 800e402:	464b      	mov	r3, r9
 800e404:	f7f2 f910 	bl	8000628 <__aeabi_dmul>
 800e408:	4602      	mov	r2, r0
 800e40a:	460b      	mov	r3, r1
 800e40c:	4630      	mov	r0, r6
 800e40e:	4639      	mov	r1, r7
 800e410:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e414:	f7f1 ff50 	bl	80002b8 <__aeabi_dsub>
 800e418:	f805 6b01 	strb.w	r6, [r5], #1
 800e41c:	9e01      	ldr	r6, [sp, #4]
 800e41e:	9f03      	ldr	r7, [sp, #12]
 800e420:	1bae      	subs	r6, r5, r6
 800e422:	42b7      	cmp	r7, r6
 800e424:	4602      	mov	r2, r0
 800e426:	460b      	mov	r3, r1
 800e428:	d135      	bne.n	800e496 <_dtoa_r+0x6e6>
 800e42a:	f7f1 ff47 	bl	80002bc <__adddf3>
 800e42e:	4642      	mov	r2, r8
 800e430:	464b      	mov	r3, r9
 800e432:	4606      	mov	r6, r0
 800e434:	460f      	mov	r7, r1
 800e436:	f7f2 fb87 	bl	8000b48 <__aeabi_dcmpgt>
 800e43a:	b9d0      	cbnz	r0, 800e472 <_dtoa_r+0x6c2>
 800e43c:	4642      	mov	r2, r8
 800e43e:	464b      	mov	r3, r9
 800e440:	4630      	mov	r0, r6
 800e442:	4639      	mov	r1, r7
 800e444:	f7f2 fb58 	bl	8000af8 <__aeabi_dcmpeq>
 800e448:	b110      	cbz	r0, 800e450 <_dtoa_r+0x6a0>
 800e44a:	f01a 0f01 	tst.w	sl, #1
 800e44e:	d110      	bne.n	800e472 <_dtoa_r+0x6c2>
 800e450:	4620      	mov	r0, r4
 800e452:	ee18 1a10 	vmov	r1, s16
 800e456:	f001 f885 	bl	800f564 <_Bfree>
 800e45a:	2300      	movs	r3, #0
 800e45c:	9800      	ldr	r0, [sp, #0]
 800e45e:	702b      	strb	r3, [r5, #0]
 800e460:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e462:	3001      	adds	r0, #1
 800e464:	6018      	str	r0, [r3, #0]
 800e466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e468:	2b00      	cmp	r3, #0
 800e46a:	f43f acf1 	beq.w	800de50 <_dtoa_r+0xa0>
 800e46e:	601d      	str	r5, [r3, #0]
 800e470:	e4ee      	b.n	800de50 <_dtoa_r+0xa0>
 800e472:	9f00      	ldr	r7, [sp, #0]
 800e474:	462b      	mov	r3, r5
 800e476:	461d      	mov	r5, r3
 800e478:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e47c:	2a39      	cmp	r2, #57	; 0x39
 800e47e:	d106      	bne.n	800e48e <_dtoa_r+0x6de>
 800e480:	9a01      	ldr	r2, [sp, #4]
 800e482:	429a      	cmp	r2, r3
 800e484:	d1f7      	bne.n	800e476 <_dtoa_r+0x6c6>
 800e486:	9901      	ldr	r1, [sp, #4]
 800e488:	2230      	movs	r2, #48	; 0x30
 800e48a:	3701      	adds	r7, #1
 800e48c:	700a      	strb	r2, [r1, #0]
 800e48e:	781a      	ldrb	r2, [r3, #0]
 800e490:	3201      	adds	r2, #1
 800e492:	701a      	strb	r2, [r3, #0]
 800e494:	e790      	b.n	800e3b8 <_dtoa_r+0x608>
 800e496:	4ba6      	ldr	r3, [pc, #664]	; (800e730 <_dtoa_r+0x980>)
 800e498:	2200      	movs	r2, #0
 800e49a:	f7f2 f8c5 	bl	8000628 <__aeabi_dmul>
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	4606      	mov	r6, r0
 800e4a4:	460f      	mov	r7, r1
 800e4a6:	f7f2 fb27 	bl	8000af8 <__aeabi_dcmpeq>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d09d      	beq.n	800e3ea <_dtoa_r+0x63a>
 800e4ae:	e7cf      	b.n	800e450 <_dtoa_r+0x6a0>
 800e4b0:	9a08      	ldr	r2, [sp, #32]
 800e4b2:	2a00      	cmp	r2, #0
 800e4b4:	f000 80d7 	beq.w	800e666 <_dtoa_r+0x8b6>
 800e4b8:	9a06      	ldr	r2, [sp, #24]
 800e4ba:	2a01      	cmp	r2, #1
 800e4bc:	f300 80ba 	bgt.w	800e634 <_dtoa_r+0x884>
 800e4c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e4c2:	2a00      	cmp	r2, #0
 800e4c4:	f000 80b2 	beq.w	800e62c <_dtoa_r+0x87c>
 800e4c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e4cc:	9e07      	ldr	r6, [sp, #28]
 800e4ce:	9d04      	ldr	r5, [sp, #16]
 800e4d0:	9a04      	ldr	r2, [sp, #16]
 800e4d2:	441a      	add	r2, r3
 800e4d4:	9204      	str	r2, [sp, #16]
 800e4d6:	9a05      	ldr	r2, [sp, #20]
 800e4d8:	2101      	movs	r1, #1
 800e4da:	441a      	add	r2, r3
 800e4dc:	4620      	mov	r0, r4
 800e4de:	9205      	str	r2, [sp, #20]
 800e4e0:	f001 f942 	bl	800f768 <__i2b>
 800e4e4:	4607      	mov	r7, r0
 800e4e6:	2d00      	cmp	r5, #0
 800e4e8:	dd0c      	ble.n	800e504 <_dtoa_r+0x754>
 800e4ea:	9b05      	ldr	r3, [sp, #20]
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	dd09      	ble.n	800e504 <_dtoa_r+0x754>
 800e4f0:	42ab      	cmp	r3, r5
 800e4f2:	9a04      	ldr	r2, [sp, #16]
 800e4f4:	bfa8      	it	ge
 800e4f6:	462b      	movge	r3, r5
 800e4f8:	1ad2      	subs	r2, r2, r3
 800e4fa:	9204      	str	r2, [sp, #16]
 800e4fc:	9a05      	ldr	r2, [sp, #20]
 800e4fe:	1aed      	subs	r5, r5, r3
 800e500:	1ad3      	subs	r3, r2, r3
 800e502:	9305      	str	r3, [sp, #20]
 800e504:	9b07      	ldr	r3, [sp, #28]
 800e506:	b31b      	cbz	r3, 800e550 <_dtoa_r+0x7a0>
 800e508:	9b08      	ldr	r3, [sp, #32]
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f000 80af 	beq.w	800e66e <_dtoa_r+0x8be>
 800e510:	2e00      	cmp	r6, #0
 800e512:	dd13      	ble.n	800e53c <_dtoa_r+0x78c>
 800e514:	4639      	mov	r1, r7
 800e516:	4632      	mov	r2, r6
 800e518:	4620      	mov	r0, r4
 800e51a:	f001 f9e5 	bl	800f8e8 <__pow5mult>
 800e51e:	ee18 2a10 	vmov	r2, s16
 800e522:	4601      	mov	r1, r0
 800e524:	4607      	mov	r7, r0
 800e526:	4620      	mov	r0, r4
 800e528:	f001 f934 	bl	800f794 <__multiply>
 800e52c:	ee18 1a10 	vmov	r1, s16
 800e530:	4680      	mov	r8, r0
 800e532:	4620      	mov	r0, r4
 800e534:	f001 f816 	bl	800f564 <_Bfree>
 800e538:	ee08 8a10 	vmov	s16, r8
 800e53c:	9b07      	ldr	r3, [sp, #28]
 800e53e:	1b9a      	subs	r2, r3, r6
 800e540:	d006      	beq.n	800e550 <_dtoa_r+0x7a0>
 800e542:	ee18 1a10 	vmov	r1, s16
 800e546:	4620      	mov	r0, r4
 800e548:	f001 f9ce 	bl	800f8e8 <__pow5mult>
 800e54c:	ee08 0a10 	vmov	s16, r0
 800e550:	2101      	movs	r1, #1
 800e552:	4620      	mov	r0, r4
 800e554:	f001 f908 	bl	800f768 <__i2b>
 800e558:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	4606      	mov	r6, r0
 800e55e:	f340 8088 	ble.w	800e672 <_dtoa_r+0x8c2>
 800e562:	461a      	mov	r2, r3
 800e564:	4601      	mov	r1, r0
 800e566:	4620      	mov	r0, r4
 800e568:	f001 f9be 	bl	800f8e8 <__pow5mult>
 800e56c:	9b06      	ldr	r3, [sp, #24]
 800e56e:	2b01      	cmp	r3, #1
 800e570:	4606      	mov	r6, r0
 800e572:	f340 8081 	ble.w	800e678 <_dtoa_r+0x8c8>
 800e576:	f04f 0800 	mov.w	r8, #0
 800e57a:	6933      	ldr	r3, [r6, #16]
 800e57c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e580:	6918      	ldr	r0, [r3, #16]
 800e582:	f001 f8a1 	bl	800f6c8 <__hi0bits>
 800e586:	f1c0 0020 	rsb	r0, r0, #32
 800e58a:	9b05      	ldr	r3, [sp, #20]
 800e58c:	4418      	add	r0, r3
 800e58e:	f010 001f 	ands.w	r0, r0, #31
 800e592:	f000 8092 	beq.w	800e6ba <_dtoa_r+0x90a>
 800e596:	f1c0 0320 	rsb	r3, r0, #32
 800e59a:	2b04      	cmp	r3, #4
 800e59c:	f340 808a 	ble.w	800e6b4 <_dtoa_r+0x904>
 800e5a0:	f1c0 001c 	rsb	r0, r0, #28
 800e5a4:	9b04      	ldr	r3, [sp, #16]
 800e5a6:	4403      	add	r3, r0
 800e5a8:	9304      	str	r3, [sp, #16]
 800e5aa:	9b05      	ldr	r3, [sp, #20]
 800e5ac:	4403      	add	r3, r0
 800e5ae:	4405      	add	r5, r0
 800e5b0:	9305      	str	r3, [sp, #20]
 800e5b2:	9b04      	ldr	r3, [sp, #16]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	dd07      	ble.n	800e5c8 <_dtoa_r+0x818>
 800e5b8:	ee18 1a10 	vmov	r1, s16
 800e5bc:	461a      	mov	r2, r3
 800e5be:	4620      	mov	r0, r4
 800e5c0:	f001 f9ec 	bl	800f99c <__lshift>
 800e5c4:	ee08 0a10 	vmov	s16, r0
 800e5c8:	9b05      	ldr	r3, [sp, #20]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	dd05      	ble.n	800e5da <_dtoa_r+0x82a>
 800e5ce:	4631      	mov	r1, r6
 800e5d0:	461a      	mov	r2, r3
 800e5d2:	4620      	mov	r0, r4
 800e5d4:	f001 f9e2 	bl	800f99c <__lshift>
 800e5d8:	4606      	mov	r6, r0
 800e5da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d06e      	beq.n	800e6be <_dtoa_r+0x90e>
 800e5e0:	ee18 0a10 	vmov	r0, s16
 800e5e4:	4631      	mov	r1, r6
 800e5e6:	f001 fa49 	bl	800fa7c <__mcmp>
 800e5ea:	2800      	cmp	r0, #0
 800e5ec:	da67      	bge.n	800e6be <_dtoa_r+0x90e>
 800e5ee:	9b00      	ldr	r3, [sp, #0]
 800e5f0:	3b01      	subs	r3, #1
 800e5f2:	ee18 1a10 	vmov	r1, s16
 800e5f6:	9300      	str	r3, [sp, #0]
 800e5f8:	220a      	movs	r2, #10
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	4620      	mov	r0, r4
 800e5fe:	f000 ffd3 	bl	800f5a8 <__multadd>
 800e602:	9b08      	ldr	r3, [sp, #32]
 800e604:	ee08 0a10 	vmov	s16, r0
 800e608:	2b00      	cmp	r3, #0
 800e60a:	f000 81b1 	beq.w	800e970 <_dtoa_r+0xbc0>
 800e60e:	2300      	movs	r3, #0
 800e610:	4639      	mov	r1, r7
 800e612:	220a      	movs	r2, #10
 800e614:	4620      	mov	r0, r4
 800e616:	f000 ffc7 	bl	800f5a8 <__multadd>
 800e61a:	9b02      	ldr	r3, [sp, #8]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	4607      	mov	r7, r0
 800e620:	f300 808e 	bgt.w	800e740 <_dtoa_r+0x990>
 800e624:	9b06      	ldr	r3, [sp, #24]
 800e626:	2b02      	cmp	r3, #2
 800e628:	dc51      	bgt.n	800e6ce <_dtoa_r+0x91e>
 800e62a:	e089      	b.n	800e740 <_dtoa_r+0x990>
 800e62c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e62e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800e632:	e74b      	b.n	800e4cc <_dtoa_r+0x71c>
 800e634:	9b03      	ldr	r3, [sp, #12]
 800e636:	1e5e      	subs	r6, r3, #1
 800e638:	9b07      	ldr	r3, [sp, #28]
 800e63a:	42b3      	cmp	r3, r6
 800e63c:	bfbf      	itttt	lt
 800e63e:	9b07      	ldrlt	r3, [sp, #28]
 800e640:	9607      	strlt	r6, [sp, #28]
 800e642:	1af2      	sublt	r2, r6, r3
 800e644:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800e646:	bfb6      	itet	lt
 800e648:	189b      	addlt	r3, r3, r2
 800e64a:	1b9e      	subge	r6, r3, r6
 800e64c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800e64e:	9b03      	ldr	r3, [sp, #12]
 800e650:	bfb8      	it	lt
 800e652:	2600      	movlt	r6, #0
 800e654:	2b00      	cmp	r3, #0
 800e656:	bfb7      	itett	lt
 800e658:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800e65c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800e660:	1a9d      	sublt	r5, r3, r2
 800e662:	2300      	movlt	r3, #0
 800e664:	e734      	b.n	800e4d0 <_dtoa_r+0x720>
 800e666:	9e07      	ldr	r6, [sp, #28]
 800e668:	9d04      	ldr	r5, [sp, #16]
 800e66a:	9f08      	ldr	r7, [sp, #32]
 800e66c:	e73b      	b.n	800e4e6 <_dtoa_r+0x736>
 800e66e:	9a07      	ldr	r2, [sp, #28]
 800e670:	e767      	b.n	800e542 <_dtoa_r+0x792>
 800e672:	9b06      	ldr	r3, [sp, #24]
 800e674:	2b01      	cmp	r3, #1
 800e676:	dc18      	bgt.n	800e6aa <_dtoa_r+0x8fa>
 800e678:	f1ba 0f00 	cmp.w	sl, #0
 800e67c:	d115      	bne.n	800e6aa <_dtoa_r+0x8fa>
 800e67e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e682:	b993      	cbnz	r3, 800e6aa <_dtoa_r+0x8fa>
 800e684:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e688:	0d1b      	lsrs	r3, r3, #20
 800e68a:	051b      	lsls	r3, r3, #20
 800e68c:	b183      	cbz	r3, 800e6b0 <_dtoa_r+0x900>
 800e68e:	9b04      	ldr	r3, [sp, #16]
 800e690:	3301      	adds	r3, #1
 800e692:	9304      	str	r3, [sp, #16]
 800e694:	9b05      	ldr	r3, [sp, #20]
 800e696:	3301      	adds	r3, #1
 800e698:	9305      	str	r3, [sp, #20]
 800e69a:	f04f 0801 	mov.w	r8, #1
 800e69e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6a0:	2b00      	cmp	r3, #0
 800e6a2:	f47f af6a 	bne.w	800e57a <_dtoa_r+0x7ca>
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	e76f      	b.n	800e58a <_dtoa_r+0x7da>
 800e6aa:	f04f 0800 	mov.w	r8, #0
 800e6ae:	e7f6      	b.n	800e69e <_dtoa_r+0x8ee>
 800e6b0:	4698      	mov	r8, r3
 800e6b2:	e7f4      	b.n	800e69e <_dtoa_r+0x8ee>
 800e6b4:	f43f af7d 	beq.w	800e5b2 <_dtoa_r+0x802>
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	301c      	adds	r0, #28
 800e6bc:	e772      	b.n	800e5a4 <_dtoa_r+0x7f4>
 800e6be:	9b03      	ldr	r3, [sp, #12]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	dc37      	bgt.n	800e734 <_dtoa_r+0x984>
 800e6c4:	9b06      	ldr	r3, [sp, #24]
 800e6c6:	2b02      	cmp	r3, #2
 800e6c8:	dd34      	ble.n	800e734 <_dtoa_r+0x984>
 800e6ca:	9b03      	ldr	r3, [sp, #12]
 800e6cc:	9302      	str	r3, [sp, #8]
 800e6ce:	9b02      	ldr	r3, [sp, #8]
 800e6d0:	b96b      	cbnz	r3, 800e6ee <_dtoa_r+0x93e>
 800e6d2:	4631      	mov	r1, r6
 800e6d4:	2205      	movs	r2, #5
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	f000 ff66 	bl	800f5a8 <__multadd>
 800e6dc:	4601      	mov	r1, r0
 800e6de:	4606      	mov	r6, r0
 800e6e0:	ee18 0a10 	vmov	r0, s16
 800e6e4:	f001 f9ca 	bl	800fa7c <__mcmp>
 800e6e8:	2800      	cmp	r0, #0
 800e6ea:	f73f adbb 	bgt.w	800e264 <_dtoa_r+0x4b4>
 800e6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6f0:	9d01      	ldr	r5, [sp, #4]
 800e6f2:	43db      	mvns	r3, r3
 800e6f4:	9300      	str	r3, [sp, #0]
 800e6f6:	f04f 0800 	mov.w	r8, #0
 800e6fa:	4631      	mov	r1, r6
 800e6fc:	4620      	mov	r0, r4
 800e6fe:	f000 ff31 	bl	800f564 <_Bfree>
 800e702:	2f00      	cmp	r7, #0
 800e704:	f43f aea4 	beq.w	800e450 <_dtoa_r+0x6a0>
 800e708:	f1b8 0f00 	cmp.w	r8, #0
 800e70c:	d005      	beq.n	800e71a <_dtoa_r+0x96a>
 800e70e:	45b8      	cmp	r8, r7
 800e710:	d003      	beq.n	800e71a <_dtoa_r+0x96a>
 800e712:	4641      	mov	r1, r8
 800e714:	4620      	mov	r0, r4
 800e716:	f000 ff25 	bl	800f564 <_Bfree>
 800e71a:	4639      	mov	r1, r7
 800e71c:	4620      	mov	r0, r4
 800e71e:	f000 ff21 	bl	800f564 <_Bfree>
 800e722:	e695      	b.n	800e450 <_dtoa_r+0x6a0>
 800e724:	2600      	movs	r6, #0
 800e726:	4637      	mov	r7, r6
 800e728:	e7e1      	b.n	800e6ee <_dtoa_r+0x93e>
 800e72a:	9700      	str	r7, [sp, #0]
 800e72c:	4637      	mov	r7, r6
 800e72e:	e599      	b.n	800e264 <_dtoa_r+0x4b4>
 800e730:	40240000 	.word	0x40240000
 800e734:	9b08      	ldr	r3, [sp, #32]
 800e736:	2b00      	cmp	r3, #0
 800e738:	f000 80ca 	beq.w	800e8d0 <_dtoa_r+0xb20>
 800e73c:	9b03      	ldr	r3, [sp, #12]
 800e73e:	9302      	str	r3, [sp, #8]
 800e740:	2d00      	cmp	r5, #0
 800e742:	dd05      	ble.n	800e750 <_dtoa_r+0x9a0>
 800e744:	4639      	mov	r1, r7
 800e746:	462a      	mov	r2, r5
 800e748:	4620      	mov	r0, r4
 800e74a:	f001 f927 	bl	800f99c <__lshift>
 800e74e:	4607      	mov	r7, r0
 800e750:	f1b8 0f00 	cmp.w	r8, #0
 800e754:	d05b      	beq.n	800e80e <_dtoa_r+0xa5e>
 800e756:	6879      	ldr	r1, [r7, #4]
 800e758:	4620      	mov	r0, r4
 800e75a:	f000 fec3 	bl	800f4e4 <_Balloc>
 800e75e:	4605      	mov	r5, r0
 800e760:	b928      	cbnz	r0, 800e76e <_dtoa_r+0x9be>
 800e762:	4b87      	ldr	r3, [pc, #540]	; (800e980 <_dtoa_r+0xbd0>)
 800e764:	4602      	mov	r2, r0
 800e766:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e76a:	f7ff bb3b 	b.w	800dde4 <_dtoa_r+0x34>
 800e76e:	693a      	ldr	r2, [r7, #16]
 800e770:	3202      	adds	r2, #2
 800e772:	0092      	lsls	r2, r2, #2
 800e774:	f107 010c 	add.w	r1, r7, #12
 800e778:	300c      	adds	r0, #12
 800e77a:	f7fd fba7 	bl	800becc <memcpy>
 800e77e:	2201      	movs	r2, #1
 800e780:	4629      	mov	r1, r5
 800e782:	4620      	mov	r0, r4
 800e784:	f001 f90a 	bl	800f99c <__lshift>
 800e788:	9b01      	ldr	r3, [sp, #4]
 800e78a:	f103 0901 	add.w	r9, r3, #1
 800e78e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e792:	4413      	add	r3, r2
 800e794:	9305      	str	r3, [sp, #20]
 800e796:	f00a 0301 	and.w	r3, sl, #1
 800e79a:	46b8      	mov	r8, r7
 800e79c:	9304      	str	r3, [sp, #16]
 800e79e:	4607      	mov	r7, r0
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	ee18 0a10 	vmov	r0, s16
 800e7a6:	f7ff fa77 	bl	800dc98 <quorem>
 800e7aa:	4641      	mov	r1, r8
 800e7ac:	9002      	str	r0, [sp, #8]
 800e7ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e7b2:	ee18 0a10 	vmov	r0, s16
 800e7b6:	f001 f961 	bl	800fa7c <__mcmp>
 800e7ba:	463a      	mov	r2, r7
 800e7bc:	9003      	str	r0, [sp, #12]
 800e7be:	4631      	mov	r1, r6
 800e7c0:	4620      	mov	r0, r4
 800e7c2:	f001 f977 	bl	800fab4 <__mdiff>
 800e7c6:	68c2      	ldr	r2, [r0, #12]
 800e7c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800e7cc:	4605      	mov	r5, r0
 800e7ce:	bb02      	cbnz	r2, 800e812 <_dtoa_r+0xa62>
 800e7d0:	4601      	mov	r1, r0
 800e7d2:	ee18 0a10 	vmov	r0, s16
 800e7d6:	f001 f951 	bl	800fa7c <__mcmp>
 800e7da:	4602      	mov	r2, r0
 800e7dc:	4629      	mov	r1, r5
 800e7de:	4620      	mov	r0, r4
 800e7e0:	9207      	str	r2, [sp, #28]
 800e7e2:	f000 febf 	bl	800f564 <_Bfree>
 800e7e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e7ea:	ea43 0102 	orr.w	r1, r3, r2
 800e7ee:	9b04      	ldr	r3, [sp, #16]
 800e7f0:	430b      	orrs	r3, r1
 800e7f2:	464d      	mov	r5, r9
 800e7f4:	d10f      	bne.n	800e816 <_dtoa_r+0xa66>
 800e7f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e7fa:	d02a      	beq.n	800e852 <_dtoa_r+0xaa2>
 800e7fc:	9b03      	ldr	r3, [sp, #12]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	dd02      	ble.n	800e808 <_dtoa_r+0xa58>
 800e802:	9b02      	ldr	r3, [sp, #8]
 800e804:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e808:	f88b a000 	strb.w	sl, [fp]
 800e80c:	e775      	b.n	800e6fa <_dtoa_r+0x94a>
 800e80e:	4638      	mov	r0, r7
 800e810:	e7ba      	b.n	800e788 <_dtoa_r+0x9d8>
 800e812:	2201      	movs	r2, #1
 800e814:	e7e2      	b.n	800e7dc <_dtoa_r+0xa2c>
 800e816:	9b03      	ldr	r3, [sp, #12]
 800e818:	2b00      	cmp	r3, #0
 800e81a:	db04      	blt.n	800e826 <_dtoa_r+0xa76>
 800e81c:	9906      	ldr	r1, [sp, #24]
 800e81e:	430b      	orrs	r3, r1
 800e820:	9904      	ldr	r1, [sp, #16]
 800e822:	430b      	orrs	r3, r1
 800e824:	d122      	bne.n	800e86c <_dtoa_r+0xabc>
 800e826:	2a00      	cmp	r2, #0
 800e828:	ddee      	ble.n	800e808 <_dtoa_r+0xa58>
 800e82a:	ee18 1a10 	vmov	r1, s16
 800e82e:	2201      	movs	r2, #1
 800e830:	4620      	mov	r0, r4
 800e832:	f001 f8b3 	bl	800f99c <__lshift>
 800e836:	4631      	mov	r1, r6
 800e838:	ee08 0a10 	vmov	s16, r0
 800e83c:	f001 f91e 	bl	800fa7c <__mcmp>
 800e840:	2800      	cmp	r0, #0
 800e842:	dc03      	bgt.n	800e84c <_dtoa_r+0xa9c>
 800e844:	d1e0      	bne.n	800e808 <_dtoa_r+0xa58>
 800e846:	f01a 0f01 	tst.w	sl, #1
 800e84a:	d0dd      	beq.n	800e808 <_dtoa_r+0xa58>
 800e84c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e850:	d1d7      	bne.n	800e802 <_dtoa_r+0xa52>
 800e852:	2339      	movs	r3, #57	; 0x39
 800e854:	f88b 3000 	strb.w	r3, [fp]
 800e858:	462b      	mov	r3, r5
 800e85a:	461d      	mov	r5, r3
 800e85c:	3b01      	subs	r3, #1
 800e85e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e862:	2a39      	cmp	r2, #57	; 0x39
 800e864:	d071      	beq.n	800e94a <_dtoa_r+0xb9a>
 800e866:	3201      	adds	r2, #1
 800e868:	701a      	strb	r2, [r3, #0]
 800e86a:	e746      	b.n	800e6fa <_dtoa_r+0x94a>
 800e86c:	2a00      	cmp	r2, #0
 800e86e:	dd07      	ble.n	800e880 <_dtoa_r+0xad0>
 800e870:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e874:	d0ed      	beq.n	800e852 <_dtoa_r+0xaa2>
 800e876:	f10a 0301 	add.w	r3, sl, #1
 800e87a:	f88b 3000 	strb.w	r3, [fp]
 800e87e:	e73c      	b.n	800e6fa <_dtoa_r+0x94a>
 800e880:	9b05      	ldr	r3, [sp, #20]
 800e882:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e886:	4599      	cmp	r9, r3
 800e888:	d047      	beq.n	800e91a <_dtoa_r+0xb6a>
 800e88a:	ee18 1a10 	vmov	r1, s16
 800e88e:	2300      	movs	r3, #0
 800e890:	220a      	movs	r2, #10
 800e892:	4620      	mov	r0, r4
 800e894:	f000 fe88 	bl	800f5a8 <__multadd>
 800e898:	45b8      	cmp	r8, r7
 800e89a:	ee08 0a10 	vmov	s16, r0
 800e89e:	f04f 0300 	mov.w	r3, #0
 800e8a2:	f04f 020a 	mov.w	r2, #10
 800e8a6:	4641      	mov	r1, r8
 800e8a8:	4620      	mov	r0, r4
 800e8aa:	d106      	bne.n	800e8ba <_dtoa_r+0xb0a>
 800e8ac:	f000 fe7c 	bl	800f5a8 <__multadd>
 800e8b0:	4680      	mov	r8, r0
 800e8b2:	4607      	mov	r7, r0
 800e8b4:	f109 0901 	add.w	r9, r9, #1
 800e8b8:	e772      	b.n	800e7a0 <_dtoa_r+0x9f0>
 800e8ba:	f000 fe75 	bl	800f5a8 <__multadd>
 800e8be:	4639      	mov	r1, r7
 800e8c0:	4680      	mov	r8, r0
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	220a      	movs	r2, #10
 800e8c6:	4620      	mov	r0, r4
 800e8c8:	f000 fe6e 	bl	800f5a8 <__multadd>
 800e8cc:	4607      	mov	r7, r0
 800e8ce:	e7f1      	b.n	800e8b4 <_dtoa_r+0xb04>
 800e8d0:	9b03      	ldr	r3, [sp, #12]
 800e8d2:	9302      	str	r3, [sp, #8]
 800e8d4:	9d01      	ldr	r5, [sp, #4]
 800e8d6:	ee18 0a10 	vmov	r0, s16
 800e8da:	4631      	mov	r1, r6
 800e8dc:	f7ff f9dc 	bl	800dc98 <quorem>
 800e8e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e8e4:	9b01      	ldr	r3, [sp, #4]
 800e8e6:	f805 ab01 	strb.w	sl, [r5], #1
 800e8ea:	1aea      	subs	r2, r5, r3
 800e8ec:	9b02      	ldr	r3, [sp, #8]
 800e8ee:	4293      	cmp	r3, r2
 800e8f0:	dd09      	ble.n	800e906 <_dtoa_r+0xb56>
 800e8f2:	ee18 1a10 	vmov	r1, s16
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	220a      	movs	r2, #10
 800e8fa:	4620      	mov	r0, r4
 800e8fc:	f000 fe54 	bl	800f5a8 <__multadd>
 800e900:	ee08 0a10 	vmov	s16, r0
 800e904:	e7e7      	b.n	800e8d6 <_dtoa_r+0xb26>
 800e906:	9b02      	ldr	r3, [sp, #8]
 800e908:	2b00      	cmp	r3, #0
 800e90a:	bfc8      	it	gt
 800e90c:	461d      	movgt	r5, r3
 800e90e:	9b01      	ldr	r3, [sp, #4]
 800e910:	bfd8      	it	le
 800e912:	2501      	movle	r5, #1
 800e914:	441d      	add	r5, r3
 800e916:	f04f 0800 	mov.w	r8, #0
 800e91a:	ee18 1a10 	vmov	r1, s16
 800e91e:	2201      	movs	r2, #1
 800e920:	4620      	mov	r0, r4
 800e922:	f001 f83b 	bl	800f99c <__lshift>
 800e926:	4631      	mov	r1, r6
 800e928:	ee08 0a10 	vmov	s16, r0
 800e92c:	f001 f8a6 	bl	800fa7c <__mcmp>
 800e930:	2800      	cmp	r0, #0
 800e932:	dc91      	bgt.n	800e858 <_dtoa_r+0xaa8>
 800e934:	d102      	bne.n	800e93c <_dtoa_r+0xb8c>
 800e936:	f01a 0f01 	tst.w	sl, #1
 800e93a:	d18d      	bne.n	800e858 <_dtoa_r+0xaa8>
 800e93c:	462b      	mov	r3, r5
 800e93e:	461d      	mov	r5, r3
 800e940:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e944:	2a30      	cmp	r2, #48	; 0x30
 800e946:	d0fa      	beq.n	800e93e <_dtoa_r+0xb8e>
 800e948:	e6d7      	b.n	800e6fa <_dtoa_r+0x94a>
 800e94a:	9a01      	ldr	r2, [sp, #4]
 800e94c:	429a      	cmp	r2, r3
 800e94e:	d184      	bne.n	800e85a <_dtoa_r+0xaaa>
 800e950:	9b00      	ldr	r3, [sp, #0]
 800e952:	3301      	adds	r3, #1
 800e954:	9300      	str	r3, [sp, #0]
 800e956:	2331      	movs	r3, #49	; 0x31
 800e958:	7013      	strb	r3, [r2, #0]
 800e95a:	e6ce      	b.n	800e6fa <_dtoa_r+0x94a>
 800e95c:	4b09      	ldr	r3, [pc, #36]	; (800e984 <_dtoa_r+0xbd4>)
 800e95e:	f7ff ba95 	b.w	800de8c <_dtoa_r+0xdc>
 800e962:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e964:	2b00      	cmp	r3, #0
 800e966:	f47f aa6e 	bne.w	800de46 <_dtoa_r+0x96>
 800e96a:	4b07      	ldr	r3, [pc, #28]	; (800e988 <_dtoa_r+0xbd8>)
 800e96c:	f7ff ba8e 	b.w	800de8c <_dtoa_r+0xdc>
 800e970:	9b02      	ldr	r3, [sp, #8]
 800e972:	2b00      	cmp	r3, #0
 800e974:	dcae      	bgt.n	800e8d4 <_dtoa_r+0xb24>
 800e976:	9b06      	ldr	r3, [sp, #24]
 800e978:	2b02      	cmp	r3, #2
 800e97a:	f73f aea8 	bgt.w	800e6ce <_dtoa_r+0x91e>
 800e97e:	e7a9      	b.n	800e8d4 <_dtoa_r+0xb24>
 800e980:	08010c48 	.word	0x08010c48
 800e984:	08010a48 	.word	0x08010a48
 800e988:	08010bc9 	.word	0x08010bc9

0800e98c <__sflush_r>:
 800e98c:	898a      	ldrh	r2, [r1, #12]
 800e98e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e992:	4605      	mov	r5, r0
 800e994:	0710      	lsls	r0, r2, #28
 800e996:	460c      	mov	r4, r1
 800e998:	d458      	bmi.n	800ea4c <__sflush_r+0xc0>
 800e99a:	684b      	ldr	r3, [r1, #4]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	dc05      	bgt.n	800e9ac <__sflush_r+0x20>
 800e9a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	dc02      	bgt.n	800e9ac <__sflush_r+0x20>
 800e9a6:	2000      	movs	r0, #0
 800e9a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e9ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9ae:	2e00      	cmp	r6, #0
 800e9b0:	d0f9      	beq.n	800e9a6 <__sflush_r+0x1a>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e9b8:	682f      	ldr	r7, [r5, #0]
 800e9ba:	602b      	str	r3, [r5, #0]
 800e9bc:	d032      	beq.n	800ea24 <__sflush_r+0x98>
 800e9be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e9c0:	89a3      	ldrh	r3, [r4, #12]
 800e9c2:	075a      	lsls	r2, r3, #29
 800e9c4:	d505      	bpl.n	800e9d2 <__sflush_r+0x46>
 800e9c6:	6863      	ldr	r3, [r4, #4]
 800e9c8:	1ac0      	subs	r0, r0, r3
 800e9ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e9cc:	b10b      	cbz	r3, 800e9d2 <__sflush_r+0x46>
 800e9ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e9d0:	1ac0      	subs	r0, r0, r3
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	4602      	mov	r2, r0
 800e9d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e9d8:	6a21      	ldr	r1, [r4, #32]
 800e9da:	4628      	mov	r0, r5
 800e9dc:	47b0      	blx	r6
 800e9de:	1c43      	adds	r3, r0, #1
 800e9e0:	89a3      	ldrh	r3, [r4, #12]
 800e9e2:	d106      	bne.n	800e9f2 <__sflush_r+0x66>
 800e9e4:	6829      	ldr	r1, [r5, #0]
 800e9e6:	291d      	cmp	r1, #29
 800e9e8:	d82c      	bhi.n	800ea44 <__sflush_r+0xb8>
 800e9ea:	4a2a      	ldr	r2, [pc, #168]	; (800ea94 <__sflush_r+0x108>)
 800e9ec:	40ca      	lsrs	r2, r1
 800e9ee:	07d6      	lsls	r6, r2, #31
 800e9f0:	d528      	bpl.n	800ea44 <__sflush_r+0xb8>
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	6062      	str	r2, [r4, #4]
 800e9f6:	04d9      	lsls	r1, r3, #19
 800e9f8:	6922      	ldr	r2, [r4, #16]
 800e9fa:	6022      	str	r2, [r4, #0]
 800e9fc:	d504      	bpl.n	800ea08 <__sflush_r+0x7c>
 800e9fe:	1c42      	adds	r2, r0, #1
 800ea00:	d101      	bne.n	800ea06 <__sflush_r+0x7a>
 800ea02:	682b      	ldr	r3, [r5, #0]
 800ea04:	b903      	cbnz	r3, 800ea08 <__sflush_r+0x7c>
 800ea06:	6560      	str	r0, [r4, #84]	; 0x54
 800ea08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ea0a:	602f      	str	r7, [r5, #0]
 800ea0c:	2900      	cmp	r1, #0
 800ea0e:	d0ca      	beq.n	800e9a6 <__sflush_r+0x1a>
 800ea10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ea14:	4299      	cmp	r1, r3
 800ea16:	d002      	beq.n	800ea1e <__sflush_r+0x92>
 800ea18:	4628      	mov	r0, r5
 800ea1a:	f001 fa3b 	bl	800fe94 <_free_r>
 800ea1e:	2000      	movs	r0, #0
 800ea20:	6360      	str	r0, [r4, #52]	; 0x34
 800ea22:	e7c1      	b.n	800e9a8 <__sflush_r+0x1c>
 800ea24:	6a21      	ldr	r1, [r4, #32]
 800ea26:	2301      	movs	r3, #1
 800ea28:	4628      	mov	r0, r5
 800ea2a:	47b0      	blx	r6
 800ea2c:	1c41      	adds	r1, r0, #1
 800ea2e:	d1c7      	bne.n	800e9c0 <__sflush_r+0x34>
 800ea30:	682b      	ldr	r3, [r5, #0]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d0c4      	beq.n	800e9c0 <__sflush_r+0x34>
 800ea36:	2b1d      	cmp	r3, #29
 800ea38:	d001      	beq.n	800ea3e <__sflush_r+0xb2>
 800ea3a:	2b16      	cmp	r3, #22
 800ea3c:	d101      	bne.n	800ea42 <__sflush_r+0xb6>
 800ea3e:	602f      	str	r7, [r5, #0]
 800ea40:	e7b1      	b.n	800e9a6 <__sflush_r+0x1a>
 800ea42:	89a3      	ldrh	r3, [r4, #12]
 800ea44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea48:	81a3      	strh	r3, [r4, #12]
 800ea4a:	e7ad      	b.n	800e9a8 <__sflush_r+0x1c>
 800ea4c:	690f      	ldr	r7, [r1, #16]
 800ea4e:	2f00      	cmp	r7, #0
 800ea50:	d0a9      	beq.n	800e9a6 <__sflush_r+0x1a>
 800ea52:	0793      	lsls	r3, r2, #30
 800ea54:	680e      	ldr	r6, [r1, #0]
 800ea56:	bf08      	it	eq
 800ea58:	694b      	ldreq	r3, [r1, #20]
 800ea5a:	600f      	str	r7, [r1, #0]
 800ea5c:	bf18      	it	ne
 800ea5e:	2300      	movne	r3, #0
 800ea60:	eba6 0807 	sub.w	r8, r6, r7
 800ea64:	608b      	str	r3, [r1, #8]
 800ea66:	f1b8 0f00 	cmp.w	r8, #0
 800ea6a:	dd9c      	ble.n	800e9a6 <__sflush_r+0x1a>
 800ea6c:	6a21      	ldr	r1, [r4, #32]
 800ea6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ea70:	4643      	mov	r3, r8
 800ea72:	463a      	mov	r2, r7
 800ea74:	4628      	mov	r0, r5
 800ea76:	47b0      	blx	r6
 800ea78:	2800      	cmp	r0, #0
 800ea7a:	dc06      	bgt.n	800ea8a <__sflush_r+0xfe>
 800ea7c:	89a3      	ldrh	r3, [r4, #12]
 800ea7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ea82:	81a3      	strh	r3, [r4, #12]
 800ea84:	f04f 30ff 	mov.w	r0, #4294967295
 800ea88:	e78e      	b.n	800e9a8 <__sflush_r+0x1c>
 800ea8a:	4407      	add	r7, r0
 800ea8c:	eba8 0800 	sub.w	r8, r8, r0
 800ea90:	e7e9      	b.n	800ea66 <__sflush_r+0xda>
 800ea92:	bf00      	nop
 800ea94:	20400001 	.word	0x20400001

0800ea98 <_fflush_r>:
 800ea98:	b538      	push	{r3, r4, r5, lr}
 800ea9a:	690b      	ldr	r3, [r1, #16]
 800ea9c:	4605      	mov	r5, r0
 800ea9e:	460c      	mov	r4, r1
 800eaa0:	b913      	cbnz	r3, 800eaa8 <_fflush_r+0x10>
 800eaa2:	2500      	movs	r5, #0
 800eaa4:	4628      	mov	r0, r5
 800eaa6:	bd38      	pop	{r3, r4, r5, pc}
 800eaa8:	b118      	cbz	r0, 800eab2 <_fflush_r+0x1a>
 800eaaa:	6983      	ldr	r3, [r0, #24]
 800eaac:	b90b      	cbnz	r3, 800eab2 <_fflush_r+0x1a>
 800eaae:	f000 f887 	bl	800ebc0 <__sinit>
 800eab2:	4b14      	ldr	r3, [pc, #80]	; (800eb04 <_fflush_r+0x6c>)
 800eab4:	429c      	cmp	r4, r3
 800eab6:	d11b      	bne.n	800eaf0 <_fflush_r+0x58>
 800eab8:	686c      	ldr	r4, [r5, #4]
 800eaba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d0ef      	beq.n	800eaa2 <_fflush_r+0xa>
 800eac2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800eac4:	07d0      	lsls	r0, r2, #31
 800eac6:	d404      	bmi.n	800ead2 <_fflush_r+0x3a>
 800eac8:	0599      	lsls	r1, r3, #22
 800eaca:	d402      	bmi.n	800ead2 <_fflush_r+0x3a>
 800eacc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eace:	f000 fc88 	bl	800f3e2 <__retarget_lock_acquire_recursive>
 800ead2:	4628      	mov	r0, r5
 800ead4:	4621      	mov	r1, r4
 800ead6:	f7ff ff59 	bl	800e98c <__sflush_r>
 800eada:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eadc:	07da      	lsls	r2, r3, #31
 800eade:	4605      	mov	r5, r0
 800eae0:	d4e0      	bmi.n	800eaa4 <_fflush_r+0xc>
 800eae2:	89a3      	ldrh	r3, [r4, #12]
 800eae4:	059b      	lsls	r3, r3, #22
 800eae6:	d4dd      	bmi.n	800eaa4 <_fflush_r+0xc>
 800eae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaea:	f000 fc7b 	bl	800f3e4 <__retarget_lock_release_recursive>
 800eaee:	e7d9      	b.n	800eaa4 <_fflush_r+0xc>
 800eaf0:	4b05      	ldr	r3, [pc, #20]	; (800eb08 <_fflush_r+0x70>)
 800eaf2:	429c      	cmp	r4, r3
 800eaf4:	d101      	bne.n	800eafa <_fflush_r+0x62>
 800eaf6:	68ac      	ldr	r4, [r5, #8]
 800eaf8:	e7df      	b.n	800eaba <_fflush_r+0x22>
 800eafa:	4b04      	ldr	r3, [pc, #16]	; (800eb0c <_fflush_r+0x74>)
 800eafc:	429c      	cmp	r4, r3
 800eafe:	bf08      	it	eq
 800eb00:	68ec      	ldreq	r4, [r5, #12]
 800eb02:	e7da      	b.n	800eaba <_fflush_r+0x22>
 800eb04:	08010c7c 	.word	0x08010c7c
 800eb08:	08010c9c 	.word	0x08010c9c
 800eb0c:	08010c5c 	.word	0x08010c5c

0800eb10 <std>:
 800eb10:	2300      	movs	r3, #0
 800eb12:	b510      	push	{r4, lr}
 800eb14:	4604      	mov	r4, r0
 800eb16:	e9c0 3300 	strd	r3, r3, [r0]
 800eb1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800eb1e:	6083      	str	r3, [r0, #8]
 800eb20:	8181      	strh	r1, [r0, #12]
 800eb22:	6643      	str	r3, [r0, #100]	; 0x64
 800eb24:	81c2      	strh	r2, [r0, #14]
 800eb26:	6183      	str	r3, [r0, #24]
 800eb28:	4619      	mov	r1, r3
 800eb2a:	2208      	movs	r2, #8
 800eb2c:	305c      	adds	r0, #92	; 0x5c
 800eb2e:	f7fd f9db 	bl	800bee8 <memset>
 800eb32:	4b05      	ldr	r3, [pc, #20]	; (800eb48 <std+0x38>)
 800eb34:	6263      	str	r3, [r4, #36]	; 0x24
 800eb36:	4b05      	ldr	r3, [pc, #20]	; (800eb4c <std+0x3c>)
 800eb38:	62a3      	str	r3, [r4, #40]	; 0x28
 800eb3a:	4b05      	ldr	r3, [pc, #20]	; (800eb50 <std+0x40>)
 800eb3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800eb3e:	4b05      	ldr	r3, [pc, #20]	; (800eb54 <std+0x44>)
 800eb40:	6224      	str	r4, [r4, #32]
 800eb42:	6323      	str	r3, [r4, #48]	; 0x30
 800eb44:	bd10      	pop	{r4, pc}
 800eb46:	bf00      	nop
 800eb48:	080105f1 	.word	0x080105f1
 800eb4c:	08010613 	.word	0x08010613
 800eb50:	0801064b 	.word	0x0801064b
 800eb54:	0801066f 	.word	0x0801066f

0800eb58 <_cleanup_r>:
 800eb58:	4901      	ldr	r1, [pc, #4]	; (800eb60 <_cleanup_r+0x8>)
 800eb5a:	f000 b8af 	b.w	800ecbc <_fwalk_reent>
 800eb5e:	bf00      	nop
 800eb60:	0800ea99 	.word	0x0800ea99

0800eb64 <__sfmoreglue>:
 800eb64:	b570      	push	{r4, r5, r6, lr}
 800eb66:	2268      	movs	r2, #104	; 0x68
 800eb68:	1e4d      	subs	r5, r1, #1
 800eb6a:	4355      	muls	r5, r2
 800eb6c:	460e      	mov	r6, r1
 800eb6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800eb72:	f001 f9fb 	bl	800ff6c <_malloc_r>
 800eb76:	4604      	mov	r4, r0
 800eb78:	b140      	cbz	r0, 800eb8c <__sfmoreglue+0x28>
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	e9c0 1600 	strd	r1, r6, [r0]
 800eb80:	300c      	adds	r0, #12
 800eb82:	60a0      	str	r0, [r4, #8]
 800eb84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800eb88:	f7fd f9ae 	bl	800bee8 <memset>
 800eb8c:	4620      	mov	r0, r4
 800eb8e:	bd70      	pop	{r4, r5, r6, pc}

0800eb90 <__sfp_lock_acquire>:
 800eb90:	4801      	ldr	r0, [pc, #4]	; (800eb98 <__sfp_lock_acquire+0x8>)
 800eb92:	f000 bc26 	b.w	800f3e2 <__retarget_lock_acquire_recursive>
 800eb96:	bf00      	nop
 800eb98:	20004589 	.word	0x20004589

0800eb9c <__sfp_lock_release>:
 800eb9c:	4801      	ldr	r0, [pc, #4]	; (800eba4 <__sfp_lock_release+0x8>)
 800eb9e:	f000 bc21 	b.w	800f3e4 <__retarget_lock_release_recursive>
 800eba2:	bf00      	nop
 800eba4:	20004589 	.word	0x20004589

0800eba8 <__sinit_lock_acquire>:
 800eba8:	4801      	ldr	r0, [pc, #4]	; (800ebb0 <__sinit_lock_acquire+0x8>)
 800ebaa:	f000 bc1a 	b.w	800f3e2 <__retarget_lock_acquire_recursive>
 800ebae:	bf00      	nop
 800ebb0:	2000458a 	.word	0x2000458a

0800ebb4 <__sinit_lock_release>:
 800ebb4:	4801      	ldr	r0, [pc, #4]	; (800ebbc <__sinit_lock_release+0x8>)
 800ebb6:	f000 bc15 	b.w	800f3e4 <__retarget_lock_release_recursive>
 800ebba:	bf00      	nop
 800ebbc:	2000458a 	.word	0x2000458a

0800ebc0 <__sinit>:
 800ebc0:	b510      	push	{r4, lr}
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	f7ff fff0 	bl	800eba8 <__sinit_lock_acquire>
 800ebc8:	69a3      	ldr	r3, [r4, #24]
 800ebca:	b11b      	cbz	r3, 800ebd4 <__sinit+0x14>
 800ebcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ebd0:	f7ff bff0 	b.w	800ebb4 <__sinit_lock_release>
 800ebd4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ebd8:	6523      	str	r3, [r4, #80]	; 0x50
 800ebda:	4b13      	ldr	r3, [pc, #76]	; (800ec28 <__sinit+0x68>)
 800ebdc:	4a13      	ldr	r2, [pc, #76]	; (800ec2c <__sinit+0x6c>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	62a2      	str	r2, [r4, #40]	; 0x28
 800ebe2:	42a3      	cmp	r3, r4
 800ebe4:	bf04      	itt	eq
 800ebe6:	2301      	moveq	r3, #1
 800ebe8:	61a3      	streq	r3, [r4, #24]
 800ebea:	4620      	mov	r0, r4
 800ebec:	f000 f820 	bl	800ec30 <__sfp>
 800ebf0:	6060      	str	r0, [r4, #4]
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	f000 f81c 	bl	800ec30 <__sfp>
 800ebf8:	60a0      	str	r0, [r4, #8]
 800ebfa:	4620      	mov	r0, r4
 800ebfc:	f000 f818 	bl	800ec30 <__sfp>
 800ec00:	2200      	movs	r2, #0
 800ec02:	60e0      	str	r0, [r4, #12]
 800ec04:	2104      	movs	r1, #4
 800ec06:	6860      	ldr	r0, [r4, #4]
 800ec08:	f7ff ff82 	bl	800eb10 <std>
 800ec0c:	68a0      	ldr	r0, [r4, #8]
 800ec0e:	2201      	movs	r2, #1
 800ec10:	2109      	movs	r1, #9
 800ec12:	f7ff ff7d 	bl	800eb10 <std>
 800ec16:	68e0      	ldr	r0, [r4, #12]
 800ec18:	2202      	movs	r2, #2
 800ec1a:	2112      	movs	r1, #18
 800ec1c:	f7ff ff78 	bl	800eb10 <std>
 800ec20:	2301      	movs	r3, #1
 800ec22:	61a3      	str	r3, [r4, #24]
 800ec24:	e7d2      	b.n	800ebcc <__sinit+0xc>
 800ec26:	bf00      	nop
 800ec28:	08010a34 	.word	0x08010a34
 800ec2c:	0800eb59 	.word	0x0800eb59

0800ec30 <__sfp>:
 800ec30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec32:	4607      	mov	r7, r0
 800ec34:	f7ff ffac 	bl	800eb90 <__sfp_lock_acquire>
 800ec38:	4b1e      	ldr	r3, [pc, #120]	; (800ecb4 <__sfp+0x84>)
 800ec3a:	681e      	ldr	r6, [r3, #0]
 800ec3c:	69b3      	ldr	r3, [r6, #24]
 800ec3e:	b913      	cbnz	r3, 800ec46 <__sfp+0x16>
 800ec40:	4630      	mov	r0, r6
 800ec42:	f7ff ffbd 	bl	800ebc0 <__sinit>
 800ec46:	3648      	adds	r6, #72	; 0x48
 800ec48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	d503      	bpl.n	800ec58 <__sfp+0x28>
 800ec50:	6833      	ldr	r3, [r6, #0]
 800ec52:	b30b      	cbz	r3, 800ec98 <__sfp+0x68>
 800ec54:	6836      	ldr	r6, [r6, #0]
 800ec56:	e7f7      	b.n	800ec48 <__sfp+0x18>
 800ec58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ec5c:	b9d5      	cbnz	r5, 800ec94 <__sfp+0x64>
 800ec5e:	4b16      	ldr	r3, [pc, #88]	; (800ecb8 <__sfp+0x88>)
 800ec60:	60e3      	str	r3, [r4, #12]
 800ec62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ec66:	6665      	str	r5, [r4, #100]	; 0x64
 800ec68:	f000 fbba 	bl	800f3e0 <__retarget_lock_init_recursive>
 800ec6c:	f7ff ff96 	bl	800eb9c <__sfp_lock_release>
 800ec70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ec74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ec78:	6025      	str	r5, [r4, #0]
 800ec7a:	61a5      	str	r5, [r4, #24]
 800ec7c:	2208      	movs	r2, #8
 800ec7e:	4629      	mov	r1, r5
 800ec80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ec84:	f7fd f930 	bl	800bee8 <memset>
 800ec88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ec8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ec90:	4620      	mov	r0, r4
 800ec92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec94:	3468      	adds	r4, #104	; 0x68
 800ec96:	e7d9      	b.n	800ec4c <__sfp+0x1c>
 800ec98:	2104      	movs	r1, #4
 800ec9a:	4638      	mov	r0, r7
 800ec9c:	f7ff ff62 	bl	800eb64 <__sfmoreglue>
 800eca0:	4604      	mov	r4, r0
 800eca2:	6030      	str	r0, [r6, #0]
 800eca4:	2800      	cmp	r0, #0
 800eca6:	d1d5      	bne.n	800ec54 <__sfp+0x24>
 800eca8:	f7ff ff78 	bl	800eb9c <__sfp_lock_release>
 800ecac:	230c      	movs	r3, #12
 800ecae:	603b      	str	r3, [r7, #0]
 800ecb0:	e7ee      	b.n	800ec90 <__sfp+0x60>
 800ecb2:	bf00      	nop
 800ecb4:	08010a34 	.word	0x08010a34
 800ecb8:	ffff0001 	.word	0xffff0001

0800ecbc <_fwalk_reent>:
 800ecbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ecc0:	4606      	mov	r6, r0
 800ecc2:	4688      	mov	r8, r1
 800ecc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ecc8:	2700      	movs	r7, #0
 800ecca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ecce:	f1b9 0901 	subs.w	r9, r9, #1
 800ecd2:	d505      	bpl.n	800ece0 <_fwalk_reent+0x24>
 800ecd4:	6824      	ldr	r4, [r4, #0]
 800ecd6:	2c00      	cmp	r4, #0
 800ecd8:	d1f7      	bne.n	800ecca <_fwalk_reent+0xe>
 800ecda:	4638      	mov	r0, r7
 800ecdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ece0:	89ab      	ldrh	r3, [r5, #12]
 800ece2:	2b01      	cmp	r3, #1
 800ece4:	d907      	bls.n	800ecf6 <_fwalk_reent+0x3a>
 800ece6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ecea:	3301      	adds	r3, #1
 800ecec:	d003      	beq.n	800ecf6 <_fwalk_reent+0x3a>
 800ecee:	4629      	mov	r1, r5
 800ecf0:	4630      	mov	r0, r6
 800ecf2:	47c0      	blx	r8
 800ecf4:	4307      	orrs	r7, r0
 800ecf6:	3568      	adds	r5, #104	; 0x68
 800ecf8:	e7e9      	b.n	800ecce <_fwalk_reent+0x12>

0800ecfa <rshift>:
 800ecfa:	6903      	ldr	r3, [r0, #16]
 800ecfc:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed04:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed08:	f100 0414 	add.w	r4, r0, #20
 800ed0c:	dd45      	ble.n	800ed9a <rshift+0xa0>
 800ed0e:	f011 011f 	ands.w	r1, r1, #31
 800ed12:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed16:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed1a:	d10c      	bne.n	800ed36 <rshift+0x3c>
 800ed1c:	f100 0710 	add.w	r7, r0, #16
 800ed20:	4629      	mov	r1, r5
 800ed22:	42b1      	cmp	r1, r6
 800ed24:	d334      	bcc.n	800ed90 <rshift+0x96>
 800ed26:	1a9b      	subs	r3, r3, r2
 800ed28:	009b      	lsls	r3, r3, #2
 800ed2a:	1eea      	subs	r2, r5, #3
 800ed2c:	4296      	cmp	r6, r2
 800ed2e:	bf38      	it	cc
 800ed30:	2300      	movcc	r3, #0
 800ed32:	4423      	add	r3, r4
 800ed34:	e015      	b.n	800ed62 <rshift+0x68>
 800ed36:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ed3a:	f1c1 0820 	rsb	r8, r1, #32
 800ed3e:	40cf      	lsrs	r7, r1
 800ed40:	f105 0e04 	add.w	lr, r5, #4
 800ed44:	46a1      	mov	r9, r4
 800ed46:	4576      	cmp	r6, lr
 800ed48:	46f4      	mov	ip, lr
 800ed4a:	d815      	bhi.n	800ed78 <rshift+0x7e>
 800ed4c:	1a9a      	subs	r2, r3, r2
 800ed4e:	0092      	lsls	r2, r2, #2
 800ed50:	3a04      	subs	r2, #4
 800ed52:	3501      	adds	r5, #1
 800ed54:	42ae      	cmp	r6, r5
 800ed56:	bf38      	it	cc
 800ed58:	2200      	movcc	r2, #0
 800ed5a:	18a3      	adds	r3, r4, r2
 800ed5c:	50a7      	str	r7, [r4, r2]
 800ed5e:	b107      	cbz	r7, 800ed62 <rshift+0x68>
 800ed60:	3304      	adds	r3, #4
 800ed62:	1b1a      	subs	r2, r3, r4
 800ed64:	42a3      	cmp	r3, r4
 800ed66:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ed6a:	bf08      	it	eq
 800ed6c:	2300      	moveq	r3, #0
 800ed6e:	6102      	str	r2, [r0, #16]
 800ed70:	bf08      	it	eq
 800ed72:	6143      	streq	r3, [r0, #20]
 800ed74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed78:	f8dc c000 	ldr.w	ip, [ip]
 800ed7c:	fa0c fc08 	lsl.w	ip, ip, r8
 800ed80:	ea4c 0707 	orr.w	r7, ip, r7
 800ed84:	f849 7b04 	str.w	r7, [r9], #4
 800ed88:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ed8c:	40cf      	lsrs	r7, r1
 800ed8e:	e7da      	b.n	800ed46 <rshift+0x4c>
 800ed90:	f851 cb04 	ldr.w	ip, [r1], #4
 800ed94:	f847 cf04 	str.w	ip, [r7, #4]!
 800ed98:	e7c3      	b.n	800ed22 <rshift+0x28>
 800ed9a:	4623      	mov	r3, r4
 800ed9c:	e7e1      	b.n	800ed62 <rshift+0x68>

0800ed9e <__hexdig_fun>:
 800ed9e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800eda2:	2b09      	cmp	r3, #9
 800eda4:	d802      	bhi.n	800edac <__hexdig_fun+0xe>
 800eda6:	3820      	subs	r0, #32
 800eda8:	b2c0      	uxtb	r0, r0
 800edaa:	4770      	bx	lr
 800edac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800edb0:	2b05      	cmp	r3, #5
 800edb2:	d801      	bhi.n	800edb8 <__hexdig_fun+0x1a>
 800edb4:	3847      	subs	r0, #71	; 0x47
 800edb6:	e7f7      	b.n	800eda8 <__hexdig_fun+0xa>
 800edb8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800edbc:	2b05      	cmp	r3, #5
 800edbe:	d801      	bhi.n	800edc4 <__hexdig_fun+0x26>
 800edc0:	3827      	subs	r0, #39	; 0x27
 800edc2:	e7f1      	b.n	800eda8 <__hexdig_fun+0xa>
 800edc4:	2000      	movs	r0, #0
 800edc6:	4770      	bx	lr

0800edc8 <__gethex>:
 800edc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edcc:	ed2d 8b02 	vpush	{d8}
 800edd0:	b089      	sub	sp, #36	; 0x24
 800edd2:	ee08 0a10 	vmov	s16, r0
 800edd6:	9304      	str	r3, [sp, #16]
 800edd8:	4bb4      	ldr	r3, [pc, #720]	; (800f0ac <__gethex+0x2e4>)
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	9301      	str	r3, [sp, #4]
 800edde:	4618      	mov	r0, r3
 800ede0:	468b      	mov	fp, r1
 800ede2:	4690      	mov	r8, r2
 800ede4:	f7f1 fa0c 	bl	8000200 <strlen>
 800ede8:	9b01      	ldr	r3, [sp, #4]
 800edea:	f8db 2000 	ldr.w	r2, [fp]
 800edee:	4403      	add	r3, r0
 800edf0:	4682      	mov	sl, r0
 800edf2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800edf6:	9305      	str	r3, [sp, #20]
 800edf8:	1c93      	adds	r3, r2, #2
 800edfa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800edfe:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ee02:	32fe      	adds	r2, #254	; 0xfe
 800ee04:	18d1      	adds	r1, r2, r3
 800ee06:	461f      	mov	r7, r3
 800ee08:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ee0c:	9100      	str	r1, [sp, #0]
 800ee0e:	2830      	cmp	r0, #48	; 0x30
 800ee10:	d0f8      	beq.n	800ee04 <__gethex+0x3c>
 800ee12:	f7ff ffc4 	bl	800ed9e <__hexdig_fun>
 800ee16:	4604      	mov	r4, r0
 800ee18:	2800      	cmp	r0, #0
 800ee1a:	d13a      	bne.n	800ee92 <__gethex+0xca>
 800ee1c:	9901      	ldr	r1, [sp, #4]
 800ee1e:	4652      	mov	r2, sl
 800ee20:	4638      	mov	r0, r7
 800ee22:	f001 fc28 	bl	8010676 <strncmp>
 800ee26:	4605      	mov	r5, r0
 800ee28:	2800      	cmp	r0, #0
 800ee2a:	d168      	bne.n	800eefe <__gethex+0x136>
 800ee2c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ee30:	eb07 060a 	add.w	r6, r7, sl
 800ee34:	f7ff ffb3 	bl	800ed9e <__hexdig_fun>
 800ee38:	2800      	cmp	r0, #0
 800ee3a:	d062      	beq.n	800ef02 <__gethex+0x13a>
 800ee3c:	4633      	mov	r3, r6
 800ee3e:	7818      	ldrb	r0, [r3, #0]
 800ee40:	2830      	cmp	r0, #48	; 0x30
 800ee42:	461f      	mov	r7, r3
 800ee44:	f103 0301 	add.w	r3, r3, #1
 800ee48:	d0f9      	beq.n	800ee3e <__gethex+0x76>
 800ee4a:	f7ff ffa8 	bl	800ed9e <__hexdig_fun>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	fab0 f480 	clz	r4, r0
 800ee54:	0964      	lsrs	r4, r4, #5
 800ee56:	4635      	mov	r5, r6
 800ee58:	9300      	str	r3, [sp, #0]
 800ee5a:	463a      	mov	r2, r7
 800ee5c:	4616      	mov	r6, r2
 800ee5e:	3201      	adds	r2, #1
 800ee60:	7830      	ldrb	r0, [r6, #0]
 800ee62:	f7ff ff9c 	bl	800ed9e <__hexdig_fun>
 800ee66:	2800      	cmp	r0, #0
 800ee68:	d1f8      	bne.n	800ee5c <__gethex+0x94>
 800ee6a:	9901      	ldr	r1, [sp, #4]
 800ee6c:	4652      	mov	r2, sl
 800ee6e:	4630      	mov	r0, r6
 800ee70:	f001 fc01 	bl	8010676 <strncmp>
 800ee74:	b980      	cbnz	r0, 800ee98 <__gethex+0xd0>
 800ee76:	b94d      	cbnz	r5, 800ee8c <__gethex+0xc4>
 800ee78:	eb06 050a 	add.w	r5, r6, sl
 800ee7c:	462a      	mov	r2, r5
 800ee7e:	4616      	mov	r6, r2
 800ee80:	3201      	adds	r2, #1
 800ee82:	7830      	ldrb	r0, [r6, #0]
 800ee84:	f7ff ff8b 	bl	800ed9e <__hexdig_fun>
 800ee88:	2800      	cmp	r0, #0
 800ee8a:	d1f8      	bne.n	800ee7e <__gethex+0xb6>
 800ee8c:	1bad      	subs	r5, r5, r6
 800ee8e:	00ad      	lsls	r5, r5, #2
 800ee90:	e004      	b.n	800ee9c <__gethex+0xd4>
 800ee92:	2400      	movs	r4, #0
 800ee94:	4625      	mov	r5, r4
 800ee96:	e7e0      	b.n	800ee5a <__gethex+0x92>
 800ee98:	2d00      	cmp	r5, #0
 800ee9a:	d1f7      	bne.n	800ee8c <__gethex+0xc4>
 800ee9c:	7833      	ldrb	r3, [r6, #0]
 800ee9e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800eea2:	2b50      	cmp	r3, #80	; 0x50
 800eea4:	d13b      	bne.n	800ef1e <__gethex+0x156>
 800eea6:	7873      	ldrb	r3, [r6, #1]
 800eea8:	2b2b      	cmp	r3, #43	; 0x2b
 800eeaa:	d02c      	beq.n	800ef06 <__gethex+0x13e>
 800eeac:	2b2d      	cmp	r3, #45	; 0x2d
 800eeae:	d02e      	beq.n	800ef0e <__gethex+0x146>
 800eeb0:	1c71      	adds	r1, r6, #1
 800eeb2:	f04f 0900 	mov.w	r9, #0
 800eeb6:	7808      	ldrb	r0, [r1, #0]
 800eeb8:	f7ff ff71 	bl	800ed9e <__hexdig_fun>
 800eebc:	1e43      	subs	r3, r0, #1
 800eebe:	b2db      	uxtb	r3, r3
 800eec0:	2b18      	cmp	r3, #24
 800eec2:	d82c      	bhi.n	800ef1e <__gethex+0x156>
 800eec4:	f1a0 0210 	sub.w	r2, r0, #16
 800eec8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800eecc:	f7ff ff67 	bl	800ed9e <__hexdig_fun>
 800eed0:	1e43      	subs	r3, r0, #1
 800eed2:	b2db      	uxtb	r3, r3
 800eed4:	2b18      	cmp	r3, #24
 800eed6:	d91d      	bls.n	800ef14 <__gethex+0x14c>
 800eed8:	f1b9 0f00 	cmp.w	r9, #0
 800eedc:	d000      	beq.n	800eee0 <__gethex+0x118>
 800eede:	4252      	negs	r2, r2
 800eee0:	4415      	add	r5, r2
 800eee2:	f8cb 1000 	str.w	r1, [fp]
 800eee6:	b1e4      	cbz	r4, 800ef22 <__gethex+0x15a>
 800eee8:	9b00      	ldr	r3, [sp, #0]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	bf14      	ite	ne
 800eeee:	2700      	movne	r7, #0
 800eef0:	2706      	moveq	r7, #6
 800eef2:	4638      	mov	r0, r7
 800eef4:	b009      	add	sp, #36	; 0x24
 800eef6:	ecbd 8b02 	vpop	{d8}
 800eefa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eefe:	463e      	mov	r6, r7
 800ef00:	4625      	mov	r5, r4
 800ef02:	2401      	movs	r4, #1
 800ef04:	e7ca      	b.n	800ee9c <__gethex+0xd4>
 800ef06:	f04f 0900 	mov.w	r9, #0
 800ef0a:	1cb1      	adds	r1, r6, #2
 800ef0c:	e7d3      	b.n	800eeb6 <__gethex+0xee>
 800ef0e:	f04f 0901 	mov.w	r9, #1
 800ef12:	e7fa      	b.n	800ef0a <__gethex+0x142>
 800ef14:	230a      	movs	r3, #10
 800ef16:	fb03 0202 	mla	r2, r3, r2, r0
 800ef1a:	3a10      	subs	r2, #16
 800ef1c:	e7d4      	b.n	800eec8 <__gethex+0x100>
 800ef1e:	4631      	mov	r1, r6
 800ef20:	e7df      	b.n	800eee2 <__gethex+0x11a>
 800ef22:	1bf3      	subs	r3, r6, r7
 800ef24:	3b01      	subs	r3, #1
 800ef26:	4621      	mov	r1, r4
 800ef28:	2b07      	cmp	r3, #7
 800ef2a:	dc0b      	bgt.n	800ef44 <__gethex+0x17c>
 800ef2c:	ee18 0a10 	vmov	r0, s16
 800ef30:	f000 fad8 	bl	800f4e4 <_Balloc>
 800ef34:	4604      	mov	r4, r0
 800ef36:	b940      	cbnz	r0, 800ef4a <__gethex+0x182>
 800ef38:	4b5d      	ldr	r3, [pc, #372]	; (800f0b0 <__gethex+0x2e8>)
 800ef3a:	4602      	mov	r2, r0
 800ef3c:	21de      	movs	r1, #222	; 0xde
 800ef3e:	485d      	ldr	r0, [pc, #372]	; (800f0b4 <__gethex+0x2ec>)
 800ef40:	f001 fbcc 	bl	80106dc <__assert_func>
 800ef44:	3101      	adds	r1, #1
 800ef46:	105b      	asrs	r3, r3, #1
 800ef48:	e7ee      	b.n	800ef28 <__gethex+0x160>
 800ef4a:	f100 0914 	add.w	r9, r0, #20
 800ef4e:	f04f 0b00 	mov.w	fp, #0
 800ef52:	f1ca 0301 	rsb	r3, sl, #1
 800ef56:	f8cd 9008 	str.w	r9, [sp, #8]
 800ef5a:	f8cd b000 	str.w	fp, [sp]
 800ef5e:	9306      	str	r3, [sp, #24]
 800ef60:	42b7      	cmp	r7, r6
 800ef62:	d340      	bcc.n	800efe6 <__gethex+0x21e>
 800ef64:	9802      	ldr	r0, [sp, #8]
 800ef66:	9b00      	ldr	r3, [sp, #0]
 800ef68:	f840 3b04 	str.w	r3, [r0], #4
 800ef6c:	eba0 0009 	sub.w	r0, r0, r9
 800ef70:	1080      	asrs	r0, r0, #2
 800ef72:	0146      	lsls	r6, r0, #5
 800ef74:	6120      	str	r0, [r4, #16]
 800ef76:	4618      	mov	r0, r3
 800ef78:	f000 fba6 	bl	800f6c8 <__hi0bits>
 800ef7c:	1a30      	subs	r0, r6, r0
 800ef7e:	f8d8 6000 	ldr.w	r6, [r8]
 800ef82:	42b0      	cmp	r0, r6
 800ef84:	dd63      	ble.n	800f04e <__gethex+0x286>
 800ef86:	1b87      	subs	r7, r0, r6
 800ef88:	4639      	mov	r1, r7
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f000 ff4a 	bl	800fe24 <__any_on>
 800ef90:	4682      	mov	sl, r0
 800ef92:	b1a8      	cbz	r0, 800efc0 <__gethex+0x1f8>
 800ef94:	1e7b      	subs	r3, r7, #1
 800ef96:	1159      	asrs	r1, r3, #5
 800ef98:	f003 021f 	and.w	r2, r3, #31
 800ef9c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800efa0:	f04f 0a01 	mov.w	sl, #1
 800efa4:	fa0a f202 	lsl.w	r2, sl, r2
 800efa8:	420a      	tst	r2, r1
 800efaa:	d009      	beq.n	800efc0 <__gethex+0x1f8>
 800efac:	4553      	cmp	r3, sl
 800efae:	dd05      	ble.n	800efbc <__gethex+0x1f4>
 800efb0:	1eb9      	subs	r1, r7, #2
 800efb2:	4620      	mov	r0, r4
 800efb4:	f000 ff36 	bl	800fe24 <__any_on>
 800efb8:	2800      	cmp	r0, #0
 800efba:	d145      	bne.n	800f048 <__gethex+0x280>
 800efbc:	f04f 0a02 	mov.w	sl, #2
 800efc0:	4639      	mov	r1, r7
 800efc2:	4620      	mov	r0, r4
 800efc4:	f7ff fe99 	bl	800ecfa <rshift>
 800efc8:	443d      	add	r5, r7
 800efca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800efce:	42ab      	cmp	r3, r5
 800efd0:	da4c      	bge.n	800f06c <__gethex+0x2a4>
 800efd2:	ee18 0a10 	vmov	r0, s16
 800efd6:	4621      	mov	r1, r4
 800efd8:	f000 fac4 	bl	800f564 <_Bfree>
 800efdc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800efde:	2300      	movs	r3, #0
 800efe0:	6013      	str	r3, [r2, #0]
 800efe2:	27a3      	movs	r7, #163	; 0xa3
 800efe4:	e785      	b.n	800eef2 <__gethex+0x12a>
 800efe6:	1e73      	subs	r3, r6, #1
 800efe8:	9a05      	ldr	r2, [sp, #20]
 800efea:	9303      	str	r3, [sp, #12]
 800efec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d019      	beq.n	800f028 <__gethex+0x260>
 800eff4:	f1bb 0f20 	cmp.w	fp, #32
 800eff8:	d107      	bne.n	800f00a <__gethex+0x242>
 800effa:	9b02      	ldr	r3, [sp, #8]
 800effc:	9a00      	ldr	r2, [sp, #0]
 800effe:	f843 2b04 	str.w	r2, [r3], #4
 800f002:	9302      	str	r3, [sp, #8]
 800f004:	2300      	movs	r3, #0
 800f006:	9300      	str	r3, [sp, #0]
 800f008:	469b      	mov	fp, r3
 800f00a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f00e:	f7ff fec6 	bl	800ed9e <__hexdig_fun>
 800f012:	9b00      	ldr	r3, [sp, #0]
 800f014:	f000 000f 	and.w	r0, r0, #15
 800f018:	fa00 f00b 	lsl.w	r0, r0, fp
 800f01c:	4303      	orrs	r3, r0
 800f01e:	9300      	str	r3, [sp, #0]
 800f020:	f10b 0b04 	add.w	fp, fp, #4
 800f024:	9b03      	ldr	r3, [sp, #12]
 800f026:	e00d      	b.n	800f044 <__gethex+0x27c>
 800f028:	9b03      	ldr	r3, [sp, #12]
 800f02a:	9a06      	ldr	r2, [sp, #24]
 800f02c:	4413      	add	r3, r2
 800f02e:	42bb      	cmp	r3, r7
 800f030:	d3e0      	bcc.n	800eff4 <__gethex+0x22c>
 800f032:	4618      	mov	r0, r3
 800f034:	9901      	ldr	r1, [sp, #4]
 800f036:	9307      	str	r3, [sp, #28]
 800f038:	4652      	mov	r2, sl
 800f03a:	f001 fb1c 	bl	8010676 <strncmp>
 800f03e:	9b07      	ldr	r3, [sp, #28]
 800f040:	2800      	cmp	r0, #0
 800f042:	d1d7      	bne.n	800eff4 <__gethex+0x22c>
 800f044:	461e      	mov	r6, r3
 800f046:	e78b      	b.n	800ef60 <__gethex+0x198>
 800f048:	f04f 0a03 	mov.w	sl, #3
 800f04c:	e7b8      	b.n	800efc0 <__gethex+0x1f8>
 800f04e:	da0a      	bge.n	800f066 <__gethex+0x29e>
 800f050:	1a37      	subs	r7, r6, r0
 800f052:	4621      	mov	r1, r4
 800f054:	ee18 0a10 	vmov	r0, s16
 800f058:	463a      	mov	r2, r7
 800f05a:	f000 fc9f 	bl	800f99c <__lshift>
 800f05e:	1bed      	subs	r5, r5, r7
 800f060:	4604      	mov	r4, r0
 800f062:	f100 0914 	add.w	r9, r0, #20
 800f066:	f04f 0a00 	mov.w	sl, #0
 800f06a:	e7ae      	b.n	800efca <__gethex+0x202>
 800f06c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f070:	42a8      	cmp	r0, r5
 800f072:	dd72      	ble.n	800f15a <__gethex+0x392>
 800f074:	1b45      	subs	r5, r0, r5
 800f076:	42ae      	cmp	r6, r5
 800f078:	dc36      	bgt.n	800f0e8 <__gethex+0x320>
 800f07a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f07e:	2b02      	cmp	r3, #2
 800f080:	d02a      	beq.n	800f0d8 <__gethex+0x310>
 800f082:	2b03      	cmp	r3, #3
 800f084:	d02c      	beq.n	800f0e0 <__gethex+0x318>
 800f086:	2b01      	cmp	r3, #1
 800f088:	d11c      	bne.n	800f0c4 <__gethex+0x2fc>
 800f08a:	42ae      	cmp	r6, r5
 800f08c:	d11a      	bne.n	800f0c4 <__gethex+0x2fc>
 800f08e:	2e01      	cmp	r6, #1
 800f090:	d112      	bne.n	800f0b8 <__gethex+0x2f0>
 800f092:	9a04      	ldr	r2, [sp, #16]
 800f094:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f098:	6013      	str	r3, [r2, #0]
 800f09a:	2301      	movs	r3, #1
 800f09c:	6123      	str	r3, [r4, #16]
 800f09e:	f8c9 3000 	str.w	r3, [r9]
 800f0a2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f0a4:	2762      	movs	r7, #98	; 0x62
 800f0a6:	601c      	str	r4, [r3, #0]
 800f0a8:	e723      	b.n	800eef2 <__gethex+0x12a>
 800f0aa:	bf00      	nop
 800f0ac:	08010d24 	.word	0x08010d24
 800f0b0:	08010c48 	.word	0x08010c48
 800f0b4:	08010cbc 	.word	0x08010cbc
 800f0b8:	1e71      	subs	r1, r6, #1
 800f0ba:	4620      	mov	r0, r4
 800f0bc:	f000 feb2 	bl	800fe24 <__any_on>
 800f0c0:	2800      	cmp	r0, #0
 800f0c2:	d1e6      	bne.n	800f092 <__gethex+0x2ca>
 800f0c4:	ee18 0a10 	vmov	r0, s16
 800f0c8:	4621      	mov	r1, r4
 800f0ca:	f000 fa4b 	bl	800f564 <_Bfree>
 800f0ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	6013      	str	r3, [r2, #0]
 800f0d4:	2750      	movs	r7, #80	; 0x50
 800f0d6:	e70c      	b.n	800eef2 <__gethex+0x12a>
 800f0d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d1f2      	bne.n	800f0c4 <__gethex+0x2fc>
 800f0de:	e7d8      	b.n	800f092 <__gethex+0x2ca>
 800f0e0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f0e2:	2b00      	cmp	r3, #0
 800f0e4:	d1d5      	bne.n	800f092 <__gethex+0x2ca>
 800f0e6:	e7ed      	b.n	800f0c4 <__gethex+0x2fc>
 800f0e8:	1e6f      	subs	r7, r5, #1
 800f0ea:	f1ba 0f00 	cmp.w	sl, #0
 800f0ee:	d131      	bne.n	800f154 <__gethex+0x38c>
 800f0f0:	b127      	cbz	r7, 800f0fc <__gethex+0x334>
 800f0f2:	4639      	mov	r1, r7
 800f0f4:	4620      	mov	r0, r4
 800f0f6:	f000 fe95 	bl	800fe24 <__any_on>
 800f0fa:	4682      	mov	sl, r0
 800f0fc:	117b      	asrs	r3, r7, #5
 800f0fe:	2101      	movs	r1, #1
 800f100:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f104:	f007 071f 	and.w	r7, r7, #31
 800f108:	fa01 f707 	lsl.w	r7, r1, r7
 800f10c:	421f      	tst	r7, r3
 800f10e:	4629      	mov	r1, r5
 800f110:	4620      	mov	r0, r4
 800f112:	bf18      	it	ne
 800f114:	f04a 0a02 	orrne.w	sl, sl, #2
 800f118:	1b76      	subs	r6, r6, r5
 800f11a:	f7ff fdee 	bl	800ecfa <rshift>
 800f11e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f122:	2702      	movs	r7, #2
 800f124:	f1ba 0f00 	cmp.w	sl, #0
 800f128:	d048      	beq.n	800f1bc <__gethex+0x3f4>
 800f12a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f12e:	2b02      	cmp	r3, #2
 800f130:	d015      	beq.n	800f15e <__gethex+0x396>
 800f132:	2b03      	cmp	r3, #3
 800f134:	d017      	beq.n	800f166 <__gethex+0x39e>
 800f136:	2b01      	cmp	r3, #1
 800f138:	d109      	bne.n	800f14e <__gethex+0x386>
 800f13a:	f01a 0f02 	tst.w	sl, #2
 800f13e:	d006      	beq.n	800f14e <__gethex+0x386>
 800f140:	f8d9 0000 	ldr.w	r0, [r9]
 800f144:	ea4a 0a00 	orr.w	sl, sl, r0
 800f148:	f01a 0f01 	tst.w	sl, #1
 800f14c:	d10e      	bne.n	800f16c <__gethex+0x3a4>
 800f14e:	f047 0710 	orr.w	r7, r7, #16
 800f152:	e033      	b.n	800f1bc <__gethex+0x3f4>
 800f154:	f04f 0a01 	mov.w	sl, #1
 800f158:	e7d0      	b.n	800f0fc <__gethex+0x334>
 800f15a:	2701      	movs	r7, #1
 800f15c:	e7e2      	b.n	800f124 <__gethex+0x35c>
 800f15e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f160:	f1c3 0301 	rsb	r3, r3, #1
 800f164:	9315      	str	r3, [sp, #84]	; 0x54
 800f166:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d0f0      	beq.n	800f14e <__gethex+0x386>
 800f16c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f170:	f104 0314 	add.w	r3, r4, #20
 800f174:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f178:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f17c:	f04f 0c00 	mov.w	ip, #0
 800f180:	4618      	mov	r0, r3
 800f182:	f853 2b04 	ldr.w	r2, [r3], #4
 800f186:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f18a:	d01c      	beq.n	800f1c6 <__gethex+0x3fe>
 800f18c:	3201      	adds	r2, #1
 800f18e:	6002      	str	r2, [r0, #0]
 800f190:	2f02      	cmp	r7, #2
 800f192:	f104 0314 	add.w	r3, r4, #20
 800f196:	d13f      	bne.n	800f218 <__gethex+0x450>
 800f198:	f8d8 2000 	ldr.w	r2, [r8]
 800f19c:	3a01      	subs	r2, #1
 800f19e:	42b2      	cmp	r2, r6
 800f1a0:	d10a      	bne.n	800f1b8 <__gethex+0x3f0>
 800f1a2:	1171      	asrs	r1, r6, #5
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f1aa:	f006 061f 	and.w	r6, r6, #31
 800f1ae:	fa02 f606 	lsl.w	r6, r2, r6
 800f1b2:	421e      	tst	r6, r3
 800f1b4:	bf18      	it	ne
 800f1b6:	4617      	movne	r7, r2
 800f1b8:	f047 0720 	orr.w	r7, r7, #32
 800f1bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f1be:	601c      	str	r4, [r3, #0]
 800f1c0:	9b04      	ldr	r3, [sp, #16]
 800f1c2:	601d      	str	r5, [r3, #0]
 800f1c4:	e695      	b.n	800eef2 <__gethex+0x12a>
 800f1c6:	4299      	cmp	r1, r3
 800f1c8:	f843 cc04 	str.w	ip, [r3, #-4]
 800f1cc:	d8d8      	bhi.n	800f180 <__gethex+0x3b8>
 800f1ce:	68a3      	ldr	r3, [r4, #8]
 800f1d0:	459b      	cmp	fp, r3
 800f1d2:	db19      	blt.n	800f208 <__gethex+0x440>
 800f1d4:	6861      	ldr	r1, [r4, #4]
 800f1d6:	ee18 0a10 	vmov	r0, s16
 800f1da:	3101      	adds	r1, #1
 800f1dc:	f000 f982 	bl	800f4e4 <_Balloc>
 800f1e0:	4681      	mov	r9, r0
 800f1e2:	b918      	cbnz	r0, 800f1ec <__gethex+0x424>
 800f1e4:	4b1a      	ldr	r3, [pc, #104]	; (800f250 <__gethex+0x488>)
 800f1e6:	4602      	mov	r2, r0
 800f1e8:	2184      	movs	r1, #132	; 0x84
 800f1ea:	e6a8      	b.n	800ef3e <__gethex+0x176>
 800f1ec:	6922      	ldr	r2, [r4, #16]
 800f1ee:	3202      	adds	r2, #2
 800f1f0:	f104 010c 	add.w	r1, r4, #12
 800f1f4:	0092      	lsls	r2, r2, #2
 800f1f6:	300c      	adds	r0, #12
 800f1f8:	f7fc fe68 	bl	800becc <memcpy>
 800f1fc:	4621      	mov	r1, r4
 800f1fe:	ee18 0a10 	vmov	r0, s16
 800f202:	f000 f9af 	bl	800f564 <_Bfree>
 800f206:	464c      	mov	r4, r9
 800f208:	6923      	ldr	r3, [r4, #16]
 800f20a:	1c5a      	adds	r2, r3, #1
 800f20c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f210:	6122      	str	r2, [r4, #16]
 800f212:	2201      	movs	r2, #1
 800f214:	615a      	str	r2, [r3, #20]
 800f216:	e7bb      	b.n	800f190 <__gethex+0x3c8>
 800f218:	6922      	ldr	r2, [r4, #16]
 800f21a:	455a      	cmp	r2, fp
 800f21c:	dd0b      	ble.n	800f236 <__gethex+0x46e>
 800f21e:	2101      	movs	r1, #1
 800f220:	4620      	mov	r0, r4
 800f222:	f7ff fd6a 	bl	800ecfa <rshift>
 800f226:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f22a:	3501      	adds	r5, #1
 800f22c:	42ab      	cmp	r3, r5
 800f22e:	f6ff aed0 	blt.w	800efd2 <__gethex+0x20a>
 800f232:	2701      	movs	r7, #1
 800f234:	e7c0      	b.n	800f1b8 <__gethex+0x3f0>
 800f236:	f016 061f 	ands.w	r6, r6, #31
 800f23a:	d0fa      	beq.n	800f232 <__gethex+0x46a>
 800f23c:	4453      	add	r3, sl
 800f23e:	f1c6 0620 	rsb	r6, r6, #32
 800f242:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f246:	f000 fa3f 	bl	800f6c8 <__hi0bits>
 800f24a:	42b0      	cmp	r0, r6
 800f24c:	dbe7      	blt.n	800f21e <__gethex+0x456>
 800f24e:	e7f0      	b.n	800f232 <__gethex+0x46a>
 800f250:	08010c48 	.word	0x08010c48

0800f254 <L_shift>:
 800f254:	f1c2 0208 	rsb	r2, r2, #8
 800f258:	0092      	lsls	r2, r2, #2
 800f25a:	b570      	push	{r4, r5, r6, lr}
 800f25c:	f1c2 0620 	rsb	r6, r2, #32
 800f260:	6843      	ldr	r3, [r0, #4]
 800f262:	6804      	ldr	r4, [r0, #0]
 800f264:	fa03 f506 	lsl.w	r5, r3, r6
 800f268:	432c      	orrs	r4, r5
 800f26a:	40d3      	lsrs	r3, r2
 800f26c:	6004      	str	r4, [r0, #0]
 800f26e:	f840 3f04 	str.w	r3, [r0, #4]!
 800f272:	4288      	cmp	r0, r1
 800f274:	d3f4      	bcc.n	800f260 <L_shift+0xc>
 800f276:	bd70      	pop	{r4, r5, r6, pc}

0800f278 <__match>:
 800f278:	b530      	push	{r4, r5, lr}
 800f27a:	6803      	ldr	r3, [r0, #0]
 800f27c:	3301      	adds	r3, #1
 800f27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f282:	b914      	cbnz	r4, 800f28a <__match+0x12>
 800f284:	6003      	str	r3, [r0, #0]
 800f286:	2001      	movs	r0, #1
 800f288:	bd30      	pop	{r4, r5, pc}
 800f28a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f28e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f292:	2d19      	cmp	r5, #25
 800f294:	bf98      	it	ls
 800f296:	3220      	addls	r2, #32
 800f298:	42a2      	cmp	r2, r4
 800f29a:	d0f0      	beq.n	800f27e <__match+0x6>
 800f29c:	2000      	movs	r0, #0
 800f29e:	e7f3      	b.n	800f288 <__match+0x10>

0800f2a0 <__hexnan>:
 800f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a4:	680b      	ldr	r3, [r1, #0]
 800f2a6:	115e      	asrs	r6, r3, #5
 800f2a8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f2ac:	f013 031f 	ands.w	r3, r3, #31
 800f2b0:	b087      	sub	sp, #28
 800f2b2:	bf18      	it	ne
 800f2b4:	3604      	addne	r6, #4
 800f2b6:	2500      	movs	r5, #0
 800f2b8:	1f37      	subs	r7, r6, #4
 800f2ba:	4690      	mov	r8, r2
 800f2bc:	6802      	ldr	r2, [r0, #0]
 800f2be:	9301      	str	r3, [sp, #4]
 800f2c0:	4682      	mov	sl, r0
 800f2c2:	f846 5c04 	str.w	r5, [r6, #-4]
 800f2c6:	46b9      	mov	r9, r7
 800f2c8:	463c      	mov	r4, r7
 800f2ca:	9502      	str	r5, [sp, #8]
 800f2cc:	46ab      	mov	fp, r5
 800f2ce:	7851      	ldrb	r1, [r2, #1]
 800f2d0:	1c53      	adds	r3, r2, #1
 800f2d2:	9303      	str	r3, [sp, #12]
 800f2d4:	b341      	cbz	r1, 800f328 <__hexnan+0x88>
 800f2d6:	4608      	mov	r0, r1
 800f2d8:	9205      	str	r2, [sp, #20]
 800f2da:	9104      	str	r1, [sp, #16]
 800f2dc:	f7ff fd5f 	bl	800ed9e <__hexdig_fun>
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d14f      	bne.n	800f384 <__hexnan+0xe4>
 800f2e4:	9904      	ldr	r1, [sp, #16]
 800f2e6:	9a05      	ldr	r2, [sp, #20]
 800f2e8:	2920      	cmp	r1, #32
 800f2ea:	d818      	bhi.n	800f31e <__hexnan+0x7e>
 800f2ec:	9b02      	ldr	r3, [sp, #8]
 800f2ee:	459b      	cmp	fp, r3
 800f2f0:	dd13      	ble.n	800f31a <__hexnan+0x7a>
 800f2f2:	454c      	cmp	r4, r9
 800f2f4:	d206      	bcs.n	800f304 <__hexnan+0x64>
 800f2f6:	2d07      	cmp	r5, #7
 800f2f8:	dc04      	bgt.n	800f304 <__hexnan+0x64>
 800f2fa:	462a      	mov	r2, r5
 800f2fc:	4649      	mov	r1, r9
 800f2fe:	4620      	mov	r0, r4
 800f300:	f7ff ffa8 	bl	800f254 <L_shift>
 800f304:	4544      	cmp	r4, r8
 800f306:	d950      	bls.n	800f3aa <__hexnan+0x10a>
 800f308:	2300      	movs	r3, #0
 800f30a:	f1a4 0904 	sub.w	r9, r4, #4
 800f30e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f312:	f8cd b008 	str.w	fp, [sp, #8]
 800f316:	464c      	mov	r4, r9
 800f318:	461d      	mov	r5, r3
 800f31a:	9a03      	ldr	r2, [sp, #12]
 800f31c:	e7d7      	b.n	800f2ce <__hexnan+0x2e>
 800f31e:	2929      	cmp	r1, #41	; 0x29
 800f320:	d156      	bne.n	800f3d0 <__hexnan+0x130>
 800f322:	3202      	adds	r2, #2
 800f324:	f8ca 2000 	str.w	r2, [sl]
 800f328:	f1bb 0f00 	cmp.w	fp, #0
 800f32c:	d050      	beq.n	800f3d0 <__hexnan+0x130>
 800f32e:	454c      	cmp	r4, r9
 800f330:	d206      	bcs.n	800f340 <__hexnan+0xa0>
 800f332:	2d07      	cmp	r5, #7
 800f334:	dc04      	bgt.n	800f340 <__hexnan+0xa0>
 800f336:	462a      	mov	r2, r5
 800f338:	4649      	mov	r1, r9
 800f33a:	4620      	mov	r0, r4
 800f33c:	f7ff ff8a 	bl	800f254 <L_shift>
 800f340:	4544      	cmp	r4, r8
 800f342:	d934      	bls.n	800f3ae <__hexnan+0x10e>
 800f344:	f1a8 0204 	sub.w	r2, r8, #4
 800f348:	4623      	mov	r3, r4
 800f34a:	f853 1b04 	ldr.w	r1, [r3], #4
 800f34e:	f842 1f04 	str.w	r1, [r2, #4]!
 800f352:	429f      	cmp	r7, r3
 800f354:	d2f9      	bcs.n	800f34a <__hexnan+0xaa>
 800f356:	1b3b      	subs	r3, r7, r4
 800f358:	f023 0303 	bic.w	r3, r3, #3
 800f35c:	3304      	adds	r3, #4
 800f35e:	3401      	adds	r4, #1
 800f360:	3e03      	subs	r6, #3
 800f362:	42b4      	cmp	r4, r6
 800f364:	bf88      	it	hi
 800f366:	2304      	movhi	r3, #4
 800f368:	4443      	add	r3, r8
 800f36a:	2200      	movs	r2, #0
 800f36c:	f843 2b04 	str.w	r2, [r3], #4
 800f370:	429f      	cmp	r7, r3
 800f372:	d2fb      	bcs.n	800f36c <__hexnan+0xcc>
 800f374:	683b      	ldr	r3, [r7, #0]
 800f376:	b91b      	cbnz	r3, 800f380 <__hexnan+0xe0>
 800f378:	4547      	cmp	r7, r8
 800f37a:	d127      	bne.n	800f3cc <__hexnan+0x12c>
 800f37c:	2301      	movs	r3, #1
 800f37e:	603b      	str	r3, [r7, #0]
 800f380:	2005      	movs	r0, #5
 800f382:	e026      	b.n	800f3d2 <__hexnan+0x132>
 800f384:	3501      	adds	r5, #1
 800f386:	2d08      	cmp	r5, #8
 800f388:	f10b 0b01 	add.w	fp, fp, #1
 800f38c:	dd06      	ble.n	800f39c <__hexnan+0xfc>
 800f38e:	4544      	cmp	r4, r8
 800f390:	d9c3      	bls.n	800f31a <__hexnan+0x7a>
 800f392:	2300      	movs	r3, #0
 800f394:	f844 3c04 	str.w	r3, [r4, #-4]
 800f398:	2501      	movs	r5, #1
 800f39a:	3c04      	subs	r4, #4
 800f39c:	6822      	ldr	r2, [r4, #0]
 800f39e:	f000 000f 	and.w	r0, r0, #15
 800f3a2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f3a6:	6022      	str	r2, [r4, #0]
 800f3a8:	e7b7      	b.n	800f31a <__hexnan+0x7a>
 800f3aa:	2508      	movs	r5, #8
 800f3ac:	e7b5      	b.n	800f31a <__hexnan+0x7a>
 800f3ae:	9b01      	ldr	r3, [sp, #4]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d0df      	beq.n	800f374 <__hexnan+0xd4>
 800f3b4:	f04f 32ff 	mov.w	r2, #4294967295
 800f3b8:	f1c3 0320 	rsb	r3, r3, #32
 800f3bc:	fa22 f303 	lsr.w	r3, r2, r3
 800f3c0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f3c4:	401a      	ands	r2, r3
 800f3c6:	f846 2c04 	str.w	r2, [r6, #-4]
 800f3ca:	e7d3      	b.n	800f374 <__hexnan+0xd4>
 800f3cc:	3f04      	subs	r7, #4
 800f3ce:	e7d1      	b.n	800f374 <__hexnan+0xd4>
 800f3d0:	2004      	movs	r0, #4
 800f3d2:	b007      	add	sp, #28
 800f3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f3d8 <_localeconv_r>:
 800f3d8:	4800      	ldr	r0, [pc, #0]	; (800f3dc <_localeconv_r+0x4>)
 800f3da:	4770      	bx	lr
 800f3dc:	200002ec 	.word	0x200002ec

0800f3e0 <__retarget_lock_init_recursive>:
 800f3e0:	4770      	bx	lr

0800f3e2 <__retarget_lock_acquire_recursive>:
 800f3e2:	4770      	bx	lr

0800f3e4 <__retarget_lock_release_recursive>:
 800f3e4:	4770      	bx	lr

0800f3e6 <__swhatbuf_r>:
 800f3e6:	b570      	push	{r4, r5, r6, lr}
 800f3e8:	460e      	mov	r6, r1
 800f3ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f3ee:	2900      	cmp	r1, #0
 800f3f0:	b096      	sub	sp, #88	; 0x58
 800f3f2:	4614      	mov	r4, r2
 800f3f4:	461d      	mov	r5, r3
 800f3f6:	da08      	bge.n	800f40a <__swhatbuf_r+0x24>
 800f3f8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f3fc:	2200      	movs	r2, #0
 800f3fe:	602a      	str	r2, [r5, #0]
 800f400:	061a      	lsls	r2, r3, #24
 800f402:	d410      	bmi.n	800f426 <__swhatbuf_r+0x40>
 800f404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f408:	e00e      	b.n	800f428 <__swhatbuf_r+0x42>
 800f40a:	466a      	mov	r2, sp
 800f40c:	f001 f9a6 	bl	801075c <_fstat_r>
 800f410:	2800      	cmp	r0, #0
 800f412:	dbf1      	blt.n	800f3f8 <__swhatbuf_r+0x12>
 800f414:	9a01      	ldr	r2, [sp, #4]
 800f416:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f41a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f41e:	425a      	negs	r2, r3
 800f420:	415a      	adcs	r2, r3
 800f422:	602a      	str	r2, [r5, #0]
 800f424:	e7ee      	b.n	800f404 <__swhatbuf_r+0x1e>
 800f426:	2340      	movs	r3, #64	; 0x40
 800f428:	2000      	movs	r0, #0
 800f42a:	6023      	str	r3, [r4, #0]
 800f42c:	b016      	add	sp, #88	; 0x58
 800f42e:	bd70      	pop	{r4, r5, r6, pc}

0800f430 <__smakebuf_r>:
 800f430:	898b      	ldrh	r3, [r1, #12]
 800f432:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f434:	079d      	lsls	r5, r3, #30
 800f436:	4606      	mov	r6, r0
 800f438:	460c      	mov	r4, r1
 800f43a:	d507      	bpl.n	800f44c <__smakebuf_r+0x1c>
 800f43c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f440:	6023      	str	r3, [r4, #0]
 800f442:	6123      	str	r3, [r4, #16]
 800f444:	2301      	movs	r3, #1
 800f446:	6163      	str	r3, [r4, #20]
 800f448:	b002      	add	sp, #8
 800f44a:	bd70      	pop	{r4, r5, r6, pc}
 800f44c:	ab01      	add	r3, sp, #4
 800f44e:	466a      	mov	r2, sp
 800f450:	f7ff ffc9 	bl	800f3e6 <__swhatbuf_r>
 800f454:	9900      	ldr	r1, [sp, #0]
 800f456:	4605      	mov	r5, r0
 800f458:	4630      	mov	r0, r6
 800f45a:	f000 fd87 	bl	800ff6c <_malloc_r>
 800f45e:	b948      	cbnz	r0, 800f474 <__smakebuf_r+0x44>
 800f460:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f464:	059a      	lsls	r2, r3, #22
 800f466:	d4ef      	bmi.n	800f448 <__smakebuf_r+0x18>
 800f468:	f023 0303 	bic.w	r3, r3, #3
 800f46c:	f043 0302 	orr.w	r3, r3, #2
 800f470:	81a3      	strh	r3, [r4, #12]
 800f472:	e7e3      	b.n	800f43c <__smakebuf_r+0xc>
 800f474:	4b0d      	ldr	r3, [pc, #52]	; (800f4ac <__smakebuf_r+0x7c>)
 800f476:	62b3      	str	r3, [r6, #40]	; 0x28
 800f478:	89a3      	ldrh	r3, [r4, #12]
 800f47a:	6020      	str	r0, [r4, #0]
 800f47c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f480:	81a3      	strh	r3, [r4, #12]
 800f482:	9b00      	ldr	r3, [sp, #0]
 800f484:	6163      	str	r3, [r4, #20]
 800f486:	9b01      	ldr	r3, [sp, #4]
 800f488:	6120      	str	r0, [r4, #16]
 800f48a:	b15b      	cbz	r3, 800f4a4 <__smakebuf_r+0x74>
 800f48c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f490:	4630      	mov	r0, r6
 800f492:	f001 f975 	bl	8010780 <_isatty_r>
 800f496:	b128      	cbz	r0, 800f4a4 <__smakebuf_r+0x74>
 800f498:	89a3      	ldrh	r3, [r4, #12]
 800f49a:	f023 0303 	bic.w	r3, r3, #3
 800f49e:	f043 0301 	orr.w	r3, r3, #1
 800f4a2:	81a3      	strh	r3, [r4, #12]
 800f4a4:	89a0      	ldrh	r0, [r4, #12]
 800f4a6:	4305      	orrs	r5, r0
 800f4a8:	81a5      	strh	r5, [r4, #12]
 800f4aa:	e7cd      	b.n	800f448 <__smakebuf_r+0x18>
 800f4ac:	0800eb59 	.word	0x0800eb59

0800f4b0 <malloc>:
 800f4b0:	4b02      	ldr	r3, [pc, #8]	; (800f4bc <malloc+0xc>)
 800f4b2:	4601      	mov	r1, r0
 800f4b4:	6818      	ldr	r0, [r3, #0]
 800f4b6:	f000 bd59 	b.w	800ff6c <_malloc_r>
 800f4ba:	bf00      	nop
 800f4bc:	20000194 	.word	0x20000194

0800f4c0 <__ascii_mbtowc>:
 800f4c0:	b082      	sub	sp, #8
 800f4c2:	b901      	cbnz	r1, 800f4c6 <__ascii_mbtowc+0x6>
 800f4c4:	a901      	add	r1, sp, #4
 800f4c6:	b142      	cbz	r2, 800f4da <__ascii_mbtowc+0x1a>
 800f4c8:	b14b      	cbz	r3, 800f4de <__ascii_mbtowc+0x1e>
 800f4ca:	7813      	ldrb	r3, [r2, #0]
 800f4cc:	600b      	str	r3, [r1, #0]
 800f4ce:	7812      	ldrb	r2, [r2, #0]
 800f4d0:	1e10      	subs	r0, r2, #0
 800f4d2:	bf18      	it	ne
 800f4d4:	2001      	movne	r0, #1
 800f4d6:	b002      	add	sp, #8
 800f4d8:	4770      	bx	lr
 800f4da:	4610      	mov	r0, r2
 800f4dc:	e7fb      	b.n	800f4d6 <__ascii_mbtowc+0x16>
 800f4de:	f06f 0001 	mvn.w	r0, #1
 800f4e2:	e7f8      	b.n	800f4d6 <__ascii_mbtowc+0x16>

0800f4e4 <_Balloc>:
 800f4e4:	b570      	push	{r4, r5, r6, lr}
 800f4e6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f4e8:	4604      	mov	r4, r0
 800f4ea:	460d      	mov	r5, r1
 800f4ec:	b976      	cbnz	r6, 800f50c <_Balloc+0x28>
 800f4ee:	2010      	movs	r0, #16
 800f4f0:	f7ff ffde 	bl	800f4b0 <malloc>
 800f4f4:	4602      	mov	r2, r0
 800f4f6:	6260      	str	r0, [r4, #36]	; 0x24
 800f4f8:	b920      	cbnz	r0, 800f504 <_Balloc+0x20>
 800f4fa:	4b18      	ldr	r3, [pc, #96]	; (800f55c <_Balloc+0x78>)
 800f4fc:	4818      	ldr	r0, [pc, #96]	; (800f560 <_Balloc+0x7c>)
 800f4fe:	2166      	movs	r1, #102	; 0x66
 800f500:	f001 f8ec 	bl	80106dc <__assert_func>
 800f504:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f508:	6006      	str	r6, [r0, #0]
 800f50a:	60c6      	str	r6, [r0, #12]
 800f50c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f50e:	68f3      	ldr	r3, [r6, #12]
 800f510:	b183      	cbz	r3, 800f534 <_Balloc+0x50>
 800f512:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f514:	68db      	ldr	r3, [r3, #12]
 800f516:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f51a:	b9b8      	cbnz	r0, 800f54c <_Balloc+0x68>
 800f51c:	2101      	movs	r1, #1
 800f51e:	fa01 f605 	lsl.w	r6, r1, r5
 800f522:	1d72      	adds	r2, r6, #5
 800f524:	0092      	lsls	r2, r2, #2
 800f526:	4620      	mov	r0, r4
 800f528:	f000 fc9d 	bl	800fe66 <_calloc_r>
 800f52c:	b160      	cbz	r0, 800f548 <_Balloc+0x64>
 800f52e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f532:	e00e      	b.n	800f552 <_Balloc+0x6e>
 800f534:	2221      	movs	r2, #33	; 0x21
 800f536:	2104      	movs	r1, #4
 800f538:	4620      	mov	r0, r4
 800f53a:	f000 fc94 	bl	800fe66 <_calloc_r>
 800f53e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f540:	60f0      	str	r0, [r6, #12]
 800f542:	68db      	ldr	r3, [r3, #12]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d1e4      	bne.n	800f512 <_Balloc+0x2e>
 800f548:	2000      	movs	r0, #0
 800f54a:	bd70      	pop	{r4, r5, r6, pc}
 800f54c:	6802      	ldr	r2, [r0, #0]
 800f54e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f552:	2300      	movs	r3, #0
 800f554:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f558:	e7f7      	b.n	800f54a <_Balloc+0x66>
 800f55a:	bf00      	nop
 800f55c:	08010bd6 	.word	0x08010bd6
 800f560:	08010d38 	.word	0x08010d38

0800f564 <_Bfree>:
 800f564:	b570      	push	{r4, r5, r6, lr}
 800f566:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f568:	4605      	mov	r5, r0
 800f56a:	460c      	mov	r4, r1
 800f56c:	b976      	cbnz	r6, 800f58c <_Bfree+0x28>
 800f56e:	2010      	movs	r0, #16
 800f570:	f7ff ff9e 	bl	800f4b0 <malloc>
 800f574:	4602      	mov	r2, r0
 800f576:	6268      	str	r0, [r5, #36]	; 0x24
 800f578:	b920      	cbnz	r0, 800f584 <_Bfree+0x20>
 800f57a:	4b09      	ldr	r3, [pc, #36]	; (800f5a0 <_Bfree+0x3c>)
 800f57c:	4809      	ldr	r0, [pc, #36]	; (800f5a4 <_Bfree+0x40>)
 800f57e:	218a      	movs	r1, #138	; 0x8a
 800f580:	f001 f8ac 	bl	80106dc <__assert_func>
 800f584:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f588:	6006      	str	r6, [r0, #0]
 800f58a:	60c6      	str	r6, [r0, #12]
 800f58c:	b13c      	cbz	r4, 800f59e <_Bfree+0x3a>
 800f58e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f590:	6862      	ldr	r2, [r4, #4]
 800f592:	68db      	ldr	r3, [r3, #12]
 800f594:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f598:	6021      	str	r1, [r4, #0]
 800f59a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f59e:	bd70      	pop	{r4, r5, r6, pc}
 800f5a0:	08010bd6 	.word	0x08010bd6
 800f5a4:	08010d38 	.word	0x08010d38

0800f5a8 <__multadd>:
 800f5a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ac:	690d      	ldr	r5, [r1, #16]
 800f5ae:	4607      	mov	r7, r0
 800f5b0:	460c      	mov	r4, r1
 800f5b2:	461e      	mov	r6, r3
 800f5b4:	f101 0c14 	add.w	ip, r1, #20
 800f5b8:	2000      	movs	r0, #0
 800f5ba:	f8dc 3000 	ldr.w	r3, [ip]
 800f5be:	b299      	uxth	r1, r3
 800f5c0:	fb02 6101 	mla	r1, r2, r1, r6
 800f5c4:	0c1e      	lsrs	r6, r3, #16
 800f5c6:	0c0b      	lsrs	r3, r1, #16
 800f5c8:	fb02 3306 	mla	r3, r2, r6, r3
 800f5cc:	b289      	uxth	r1, r1
 800f5ce:	3001      	adds	r0, #1
 800f5d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f5d4:	4285      	cmp	r5, r0
 800f5d6:	f84c 1b04 	str.w	r1, [ip], #4
 800f5da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f5de:	dcec      	bgt.n	800f5ba <__multadd+0x12>
 800f5e0:	b30e      	cbz	r6, 800f626 <__multadd+0x7e>
 800f5e2:	68a3      	ldr	r3, [r4, #8]
 800f5e4:	42ab      	cmp	r3, r5
 800f5e6:	dc19      	bgt.n	800f61c <__multadd+0x74>
 800f5e8:	6861      	ldr	r1, [r4, #4]
 800f5ea:	4638      	mov	r0, r7
 800f5ec:	3101      	adds	r1, #1
 800f5ee:	f7ff ff79 	bl	800f4e4 <_Balloc>
 800f5f2:	4680      	mov	r8, r0
 800f5f4:	b928      	cbnz	r0, 800f602 <__multadd+0x5a>
 800f5f6:	4602      	mov	r2, r0
 800f5f8:	4b0c      	ldr	r3, [pc, #48]	; (800f62c <__multadd+0x84>)
 800f5fa:	480d      	ldr	r0, [pc, #52]	; (800f630 <__multadd+0x88>)
 800f5fc:	21b5      	movs	r1, #181	; 0xb5
 800f5fe:	f001 f86d 	bl	80106dc <__assert_func>
 800f602:	6922      	ldr	r2, [r4, #16]
 800f604:	3202      	adds	r2, #2
 800f606:	f104 010c 	add.w	r1, r4, #12
 800f60a:	0092      	lsls	r2, r2, #2
 800f60c:	300c      	adds	r0, #12
 800f60e:	f7fc fc5d 	bl	800becc <memcpy>
 800f612:	4621      	mov	r1, r4
 800f614:	4638      	mov	r0, r7
 800f616:	f7ff ffa5 	bl	800f564 <_Bfree>
 800f61a:	4644      	mov	r4, r8
 800f61c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f620:	3501      	adds	r5, #1
 800f622:	615e      	str	r6, [r3, #20]
 800f624:	6125      	str	r5, [r4, #16]
 800f626:	4620      	mov	r0, r4
 800f628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f62c:	08010c48 	.word	0x08010c48
 800f630:	08010d38 	.word	0x08010d38

0800f634 <__s2b>:
 800f634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f638:	460c      	mov	r4, r1
 800f63a:	4615      	mov	r5, r2
 800f63c:	461f      	mov	r7, r3
 800f63e:	2209      	movs	r2, #9
 800f640:	3308      	adds	r3, #8
 800f642:	4606      	mov	r6, r0
 800f644:	fb93 f3f2 	sdiv	r3, r3, r2
 800f648:	2100      	movs	r1, #0
 800f64a:	2201      	movs	r2, #1
 800f64c:	429a      	cmp	r2, r3
 800f64e:	db09      	blt.n	800f664 <__s2b+0x30>
 800f650:	4630      	mov	r0, r6
 800f652:	f7ff ff47 	bl	800f4e4 <_Balloc>
 800f656:	b940      	cbnz	r0, 800f66a <__s2b+0x36>
 800f658:	4602      	mov	r2, r0
 800f65a:	4b19      	ldr	r3, [pc, #100]	; (800f6c0 <__s2b+0x8c>)
 800f65c:	4819      	ldr	r0, [pc, #100]	; (800f6c4 <__s2b+0x90>)
 800f65e:	21ce      	movs	r1, #206	; 0xce
 800f660:	f001 f83c 	bl	80106dc <__assert_func>
 800f664:	0052      	lsls	r2, r2, #1
 800f666:	3101      	adds	r1, #1
 800f668:	e7f0      	b.n	800f64c <__s2b+0x18>
 800f66a:	9b08      	ldr	r3, [sp, #32]
 800f66c:	6143      	str	r3, [r0, #20]
 800f66e:	2d09      	cmp	r5, #9
 800f670:	f04f 0301 	mov.w	r3, #1
 800f674:	6103      	str	r3, [r0, #16]
 800f676:	dd16      	ble.n	800f6a6 <__s2b+0x72>
 800f678:	f104 0909 	add.w	r9, r4, #9
 800f67c:	46c8      	mov	r8, r9
 800f67e:	442c      	add	r4, r5
 800f680:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f684:	4601      	mov	r1, r0
 800f686:	3b30      	subs	r3, #48	; 0x30
 800f688:	220a      	movs	r2, #10
 800f68a:	4630      	mov	r0, r6
 800f68c:	f7ff ff8c 	bl	800f5a8 <__multadd>
 800f690:	45a0      	cmp	r8, r4
 800f692:	d1f5      	bne.n	800f680 <__s2b+0x4c>
 800f694:	f1a5 0408 	sub.w	r4, r5, #8
 800f698:	444c      	add	r4, r9
 800f69a:	1b2d      	subs	r5, r5, r4
 800f69c:	1963      	adds	r3, r4, r5
 800f69e:	42bb      	cmp	r3, r7
 800f6a0:	db04      	blt.n	800f6ac <__s2b+0x78>
 800f6a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f6a6:	340a      	adds	r4, #10
 800f6a8:	2509      	movs	r5, #9
 800f6aa:	e7f6      	b.n	800f69a <__s2b+0x66>
 800f6ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6b0:	4601      	mov	r1, r0
 800f6b2:	3b30      	subs	r3, #48	; 0x30
 800f6b4:	220a      	movs	r2, #10
 800f6b6:	4630      	mov	r0, r6
 800f6b8:	f7ff ff76 	bl	800f5a8 <__multadd>
 800f6bc:	e7ee      	b.n	800f69c <__s2b+0x68>
 800f6be:	bf00      	nop
 800f6c0:	08010c48 	.word	0x08010c48
 800f6c4:	08010d38 	.word	0x08010d38

0800f6c8 <__hi0bits>:
 800f6c8:	0c03      	lsrs	r3, r0, #16
 800f6ca:	041b      	lsls	r3, r3, #16
 800f6cc:	b9d3      	cbnz	r3, 800f704 <__hi0bits+0x3c>
 800f6ce:	0400      	lsls	r0, r0, #16
 800f6d0:	2310      	movs	r3, #16
 800f6d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f6d6:	bf04      	itt	eq
 800f6d8:	0200      	lsleq	r0, r0, #8
 800f6da:	3308      	addeq	r3, #8
 800f6dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f6e0:	bf04      	itt	eq
 800f6e2:	0100      	lsleq	r0, r0, #4
 800f6e4:	3304      	addeq	r3, #4
 800f6e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f6ea:	bf04      	itt	eq
 800f6ec:	0080      	lsleq	r0, r0, #2
 800f6ee:	3302      	addeq	r3, #2
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	db05      	blt.n	800f700 <__hi0bits+0x38>
 800f6f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f6f8:	f103 0301 	add.w	r3, r3, #1
 800f6fc:	bf08      	it	eq
 800f6fe:	2320      	moveq	r3, #32
 800f700:	4618      	mov	r0, r3
 800f702:	4770      	bx	lr
 800f704:	2300      	movs	r3, #0
 800f706:	e7e4      	b.n	800f6d2 <__hi0bits+0xa>

0800f708 <__lo0bits>:
 800f708:	6803      	ldr	r3, [r0, #0]
 800f70a:	f013 0207 	ands.w	r2, r3, #7
 800f70e:	4601      	mov	r1, r0
 800f710:	d00b      	beq.n	800f72a <__lo0bits+0x22>
 800f712:	07da      	lsls	r2, r3, #31
 800f714:	d423      	bmi.n	800f75e <__lo0bits+0x56>
 800f716:	0798      	lsls	r0, r3, #30
 800f718:	bf49      	itett	mi
 800f71a:	085b      	lsrmi	r3, r3, #1
 800f71c:	089b      	lsrpl	r3, r3, #2
 800f71e:	2001      	movmi	r0, #1
 800f720:	600b      	strmi	r3, [r1, #0]
 800f722:	bf5c      	itt	pl
 800f724:	600b      	strpl	r3, [r1, #0]
 800f726:	2002      	movpl	r0, #2
 800f728:	4770      	bx	lr
 800f72a:	b298      	uxth	r0, r3
 800f72c:	b9a8      	cbnz	r0, 800f75a <__lo0bits+0x52>
 800f72e:	0c1b      	lsrs	r3, r3, #16
 800f730:	2010      	movs	r0, #16
 800f732:	b2da      	uxtb	r2, r3
 800f734:	b90a      	cbnz	r2, 800f73a <__lo0bits+0x32>
 800f736:	3008      	adds	r0, #8
 800f738:	0a1b      	lsrs	r3, r3, #8
 800f73a:	071a      	lsls	r2, r3, #28
 800f73c:	bf04      	itt	eq
 800f73e:	091b      	lsreq	r3, r3, #4
 800f740:	3004      	addeq	r0, #4
 800f742:	079a      	lsls	r2, r3, #30
 800f744:	bf04      	itt	eq
 800f746:	089b      	lsreq	r3, r3, #2
 800f748:	3002      	addeq	r0, #2
 800f74a:	07da      	lsls	r2, r3, #31
 800f74c:	d403      	bmi.n	800f756 <__lo0bits+0x4e>
 800f74e:	085b      	lsrs	r3, r3, #1
 800f750:	f100 0001 	add.w	r0, r0, #1
 800f754:	d005      	beq.n	800f762 <__lo0bits+0x5a>
 800f756:	600b      	str	r3, [r1, #0]
 800f758:	4770      	bx	lr
 800f75a:	4610      	mov	r0, r2
 800f75c:	e7e9      	b.n	800f732 <__lo0bits+0x2a>
 800f75e:	2000      	movs	r0, #0
 800f760:	4770      	bx	lr
 800f762:	2020      	movs	r0, #32
 800f764:	4770      	bx	lr
	...

0800f768 <__i2b>:
 800f768:	b510      	push	{r4, lr}
 800f76a:	460c      	mov	r4, r1
 800f76c:	2101      	movs	r1, #1
 800f76e:	f7ff feb9 	bl	800f4e4 <_Balloc>
 800f772:	4602      	mov	r2, r0
 800f774:	b928      	cbnz	r0, 800f782 <__i2b+0x1a>
 800f776:	4b05      	ldr	r3, [pc, #20]	; (800f78c <__i2b+0x24>)
 800f778:	4805      	ldr	r0, [pc, #20]	; (800f790 <__i2b+0x28>)
 800f77a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f77e:	f000 ffad 	bl	80106dc <__assert_func>
 800f782:	2301      	movs	r3, #1
 800f784:	6144      	str	r4, [r0, #20]
 800f786:	6103      	str	r3, [r0, #16]
 800f788:	bd10      	pop	{r4, pc}
 800f78a:	bf00      	nop
 800f78c:	08010c48 	.word	0x08010c48
 800f790:	08010d38 	.word	0x08010d38

0800f794 <__multiply>:
 800f794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f798:	4691      	mov	r9, r2
 800f79a:	690a      	ldr	r2, [r1, #16]
 800f79c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	bfb8      	it	lt
 800f7a4:	460b      	movlt	r3, r1
 800f7a6:	460c      	mov	r4, r1
 800f7a8:	bfbc      	itt	lt
 800f7aa:	464c      	movlt	r4, r9
 800f7ac:	4699      	movlt	r9, r3
 800f7ae:	6927      	ldr	r7, [r4, #16]
 800f7b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f7b4:	68a3      	ldr	r3, [r4, #8]
 800f7b6:	6861      	ldr	r1, [r4, #4]
 800f7b8:	eb07 060a 	add.w	r6, r7, sl
 800f7bc:	42b3      	cmp	r3, r6
 800f7be:	b085      	sub	sp, #20
 800f7c0:	bfb8      	it	lt
 800f7c2:	3101      	addlt	r1, #1
 800f7c4:	f7ff fe8e 	bl	800f4e4 <_Balloc>
 800f7c8:	b930      	cbnz	r0, 800f7d8 <__multiply+0x44>
 800f7ca:	4602      	mov	r2, r0
 800f7cc:	4b44      	ldr	r3, [pc, #272]	; (800f8e0 <__multiply+0x14c>)
 800f7ce:	4845      	ldr	r0, [pc, #276]	; (800f8e4 <__multiply+0x150>)
 800f7d0:	f240 115d 	movw	r1, #349	; 0x15d
 800f7d4:	f000 ff82 	bl	80106dc <__assert_func>
 800f7d8:	f100 0514 	add.w	r5, r0, #20
 800f7dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f7e0:	462b      	mov	r3, r5
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	4543      	cmp	r3, r8
 800f7e6:	d321      	bcc.n	800f82c <__multiply+0x98>
 800f7e8:	f104 0314 	add.w	r3, r4, #20
 800f7ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f7f0:	f109 0314 	add.w	r3, r9, #20
 800f7f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f7f8:	9202      	str	r2, [sp, #8]
 800f7fa:	1b3a      	subs	r2, r7, r4
 800f7fc:	3a15      	subs	r2, #21
 800f7fe:	f022 0203 	bic.w	r2, r2, #3
 800f802:	3204      	adds	r2, #4
 800f804:	f104 0115 	add.w	r1, r4, #21
 800f808:	428f      	cmp	r7, r1
 800f80a:	bf38      	it	cc
 800f80c:	2204      	movcc	r2, #4
 800f80e:	9201      	str	r2, [sp, #4]
 800f810:	9a02      	ldr	r2, [sp, #8]
 800f812:	9303      	str	r3, [sp, #12]
 800f814:	429a      	cmp	r2, r3
 800f816:	d80c      	bhi.n	800f832 <__multiply+0x9e>
 800f818:	2e00      	cmp	r6, #0
 800f81a:	dd03      	ble.n	800f824 <__multiply+0x90>
 800f81c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f820:	2b00      	cmp	r3, #0
 800f822:	d05a      	beq.n	800f8da <__multiply+0x146>
 800f824:	6106      	str	r6, [r0, #16]
 800f826:	b005      	add	sp, #20
 800f828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f82c:	f843 2b04 	str.w	r2, [r3], #4
 800f830:	e7d8      	b.n	800f7e4 <__multiply+0x50>
 800f832:	f8b3 a000 	ldrh.w	sl, [r3]
 800f836:	f1ba 0f00 	cmp.w	sl, #0
 800f83a:	d024      	beq.n	800f886 <__multiply+0xf2>
 800f83c:	f104 0e14 	add.w	lr, r4, #20
 800f840:	46a9      	mov	r9, r5
 800f842:	f04f 0c00 	mov.w	ip, #0
 800f846:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f84a:	f8d9 1000 	ldr.w	r1, [r9]
 800f84e:	fa1f fb82 	uxth.w	fp, r2
 800f852:	b289      	uxth	r1, r1
 800f854:	fb0a 110b 	mla	r1, sl, fp, r1
 800f858:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f85c:	f8d9 2000 	ldr.w	r2, [r9]
 800f860:	4461      	add	r1, ip
 800f862:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f866:	fb0a c20b 	mla	r2, sl, fp, ip
 800f86a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f86e:	b289      	uxth	r1, r1
 800f870:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f874:	4577      	cmp	r7, lr
 800f876:	f849 1b04 	str.w	r1, [r9], #4
 800f87a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f87e:	d8e2      	bhi.n	800f846 <__multiply+0xb2>
 800f880:	9a01      	ldr	r2, [sp, #4]
 800f882:	f845 c002 	str.w	ip, [r5, r2]
 800f886:	9a03      	ldr	r2, [sp, #12]
 800f888:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f88c:	3304      	adds	r3, #4
 800f88e:	f1b9 0f00 	cmp.w	r9, #0
 800f892:	d020      	beq.n	800f8d6 <__multiply+0x142>
 800f894:	6829      	ldr	r1, [r5, #0]
 800f896:	f104 0c14 	add.w	ip, r4, #20
 800f89a:	46ae      	mov	lr, r5
 800f89c:	f04f 0a00 	mov.w	sl, #0
 800f8a0:	f8bc b000 	ldrh.w	fp, [ip]
 800f8a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f8a8:	fb09 220b 	mla	r2, r9, fp, r2
 800f8ac:	4492      	add	sl, r2
 800f8ae:	b289      	uxth	r1, r1
 800f8b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f8b4:	f84e 1b04 	str.w	r1, [lr], #4
 800f8b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f8bc:	f8be 1000 	ldrh.w	r1, [lr]
 800f8c0:	0c12      	lsrs	r2, r2, #16
 800f8c2:	fb09 1102 	mla	r1, r9, r2, r1
 800f8c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f8ca:	4567      	cmp	r7, ip
 800f8cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8d0:	d8e6      	bhi.n	800f8a0 <__multiply+0x10c>
 800f8d2:	9a01      	ldr	r2, [sp, #4]
 800f8d4:	50a9      	str	r1, [r5, r2]
 800f8d6:	3504      	adds	r5, #4
 800f8d8:	e79a      	b.n	800f810 <__multiply+0x7c>
 800f8da:	3e01      	subs	r6, #1
 800f8dc:	e79c      	b.n	800f818 <__multiply+0x84>
 800f8de:	bf00      	nop
 800f8e0:	08010c48 	.word	0x08010c48
 800f8e4:	08010d38 	.word	0x08010d38

0800f8e8 <__pow5mult>:
 800f8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8ec:	4615      	mov	r5, r2
 800f8ee:	f012 0203 	ands.w	r2, r2, #3
 800f8f2:	4606      	mov	r6, r0
 800f8f4:	460f      	mov	r7, r1
 800f8f6:	d007      	beq.n	800f908 <__pow5mult+0x20>
 800f8f8:	4c25      	ldr	r4, [pc, #148]	; (800f990 <__pow5mult+0xa8>)
 800f8fa:	3a01      	subs	r2, #1
 800f8fc:	2300      	movs	r3, #0
 800f8fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f902:	f7ff fe51 	bl	800f5a8 <__multadd>
 800f906:	4607      	mov	r7, r0
 800f908:	10ad      	asrs	r5, r5, #2
 800f90a:	d03d      	beq.n	800f988 <__pow5mult+0xa0>
 800f90c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f90e:	b97c      	cbnz	r4, 800f930 <__pow5mult+0x48>
 800f910:	2010      	movs	r0, #16
 800f912:	f7ff fdcd 	bl	800f4b0 <malloc>
 800f916:	4602      	mov	r2, r0
 800f918:	6270      	str	r0, [r6, #36]	; 0x24
 800f91a:	b928      	cbnz	r0, 800f928 <__pow5mult+0x40>
 800f91c:	4b1d      	ldr	r3, [pc, #116]	; (800f994 <__pow5mult+0xac>)
 800f91e:	481e      	ldr	r0, [pc, #120]	; (800f998 <__pow5mult+0xb0>)
 800f920:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f924:	f000 feda 	bl	80106dc <__assert_func>
 800f928:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f92c:	6004      	str	r4, [r0, #0]
 800f92e:	60c4      	str	r4, [r0, #12]
 800f930:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f934:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f938:	b94c      	cbnz	r4, 800f94e <__pow5mult+0x66>
 800f93a:	f240 2171 	movw	r1, #625	; 0x271
 800f93e:	4630      	mov	r0, r6
 800f940:	f7ff ff12 	bl	800f768 <__i2b>
 800f944:	2300      	movs	r3, #0
 800f946:	f8c8 0008 	str.w	r0, [r8, #8]
 800f94a:	4604      	mov	r4, r0
 800f94c:	6003      	str	r3, [r0, #0]
 800f94e:	f04f 0900 	mov.w	r9, #0
 800f952:	07eb      	lsls	r3, r5, #31
 800f954:	d50a      	bpl.n	800f96c <__pow5mult+0x84>
 800f956:	4639      	mov	r1, r7
 800f958:	4622      	mov	r2, r4
 800f95a:	4630      	mov	r0, r6
 800f95c:	f7ff ff1a 	bl	800f794 <__multiply>
 800f960:	4639      	mov	r1, r7
 800f962:	4680      	mov	r8, r0
 800f964:	4630      	mov	r0, r6
 800f966:	f7ff fdfd 	bl	800f564 <_Bfree>
 800f96a:	4647      	mov	r7, r8
 800f96c:	106d      	asrs	r5, r5, #1
 800f96e:	d00b      	beq.n	800f988 <__pow5mult+0xa0>
 800f970:	6820      	ldr	r0, [r4, #0]
 800f972:	b938      	cbnz	r0, 800f984 <__pow5mult+0x9c>
 800f974:	4622      	mov	r2, r4
 800f976:	4621      	mov	r1, r4
 800f978:	4630      	mov	r0, r6
 800f97a:	f7ff ff0b 	bl	800f794 <__multiply>
 800f97e:	6020      	str	r0, [r4, #0]
 800f980:	f8c0 9000 	str.w	r9, [r0]
 800f984:	4604      	mov	r4, r0
 800f986:	e7e4      	b.n	800f952 <__pow5mult+0x6a>
 800f988:	4638      	mov	r0, r7
 800f98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f98e:	bf00      	nop
 800f990:	08010e88 	.word	0x08010e88
 800f994:	08010bd6 	.word	0x08010bd6
 800f998:	08010d38 	.word	0x08010d38

0800f99c <__lshift>:
 800f99c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9a0:	460c      	mov	r4, r1
 800f9a2:	6849      	ldr	r1, [r1, #4]
 800f9a4:	6923      	ldr	r3, [r4, #16]
 800f9a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f9aa:	68a3      	ldr	r3, [r4, #8]
 800f9ac:	4607      	mov	r7, r0
 800f9ae:	4691      	mov	r9, r2
 800f9b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9b4:	f108 0601 	add.w	r6, r8, #1
 800f9b8:	42b3      	cmp	r3, r6
 800f9ba:	db0b      	blt.n	800f9d4 <__lshift+0x38>
 800f9bc:	4638      	mov	r0, r7
 800f9be:	f7ff fd91 	bl	800f4e4 <_Balloc>
 800f9c2:	4605      	mov	r5, r0
 800f9c4:	b948      	cbnz	r0, 800f9da <__lshift+0x3e>
 800f9c6:	4602      	mov	r2, r0
 800f9c8:	4b2a      	ldr	r3, [pc, #168]	; (800fa74 <__lshift+0xd8>)
 800f9ca:	482b      	ldr	r0, [pc, #172]	; (800fa78 <__lshift+0xdc>)
 800f9cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f9d0:	f000 fe84 	bl	80106dc <__assert_func>
 800f9d4:	3101      	adds	r1, #1
 800f9d6:	005b      	lsls	r3, r3, #1
 800f9d8:	e7ee      	b.n	800f9b8 <__lshift+0x1c>
 800f9da:	2300      	movs	r3, #0
 800f9dc:	f100 0114 	add.w	r1, r0, #20
 800f9e0:	f100 0210 	add.w	r2, r0, #16
 800f9e4:	4618      	mov	r0, r3
 800f9e6:	4553      	cmp	r3, sl
 800f9e8:	db37      	blt.n	800fa5a <__lshift+0xbe>
 800f9ea:	6920      	ldr	r0, [r4, #16]
 800f9ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9f0:	f104 0314 	add.w	r3, r4, #20
 800f9f4:	f019 091f 	ands.w	r9, r9, #31
 800f9f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fa00:	d02f      	beq.n	800fa62 <__lshift+0xc6>
 800fa02:	f1c9 0e20 	rsb	lr, r9, #32
 800fa06:	468a      	mov	sl, r1
 800fa08:	f04f 0c00 	mov.w	ip, #0
 800fa0c:	681a      	ldr	r2, [r3, #0]
 800fa0e:	fa02 f209 	lsl.w	r2, r2, r9
 800fa12:	ea42 020c 	orr.w	r2, r2, ip
 800fa16:	f84a 2b04 	str.w	r2, [sl], #4
 800fa1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa1e:	4298      	cmp	r0, r3
 800fa20:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fa24:	d8f2      	bhi.n	800fa0c <__lshift+0x70>
 800fa26:	1b03      	subs	r3, r0, r4
 800fa28:	3b15      	subs	r3, #21
 800fa2a:	f023 0303 	bic.w	r3, r3, #3
 800fa2e:	3304      	adds	r3, #4
 800fa30:	f104 0215 	add.w	r2, r4, #21
 800fa34:	4290      	cmp	r0, r2
 800fa36:	bf38      	it	cc
 800fa38:	2304      	movcc	r3, #4
 800fa3a:	f841 c003 	str.w	ip, [r1, r3]
 800fa3e:	f1bc 0f00 	cmp.w	ip, #0
 800fa42:	d001      	beq.n	800fa48 <__lshift+0xac>
 800fa44:	f108 0602 	add.w	r6, r8, #2
 800fa48:	3e01      	subs	r6, #1
 800fa4a:	4638      	mov	r0, r7
 800fa4c:	612e      	str	r6, [r5, #16]
 800fa4e:	4621      	mov	r1, r4
 800fa50:	f7ff fd88 	bl	800f564 <_Bfree>
 800fa54:	4628      	mov	r0, r5
 800fa56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa5a:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa5e:	3301      	adds	r3, #1
 800fa60:	e7c1      	b.n	800f9e6 <__lshift+0x4a>
 800fa62:	3904      	subs	r1, #4
 800fa64:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa68:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa6c:	4298      	cmp	r0, r3
 800fa6e:	d8f9      	bhi.n	800fa64 <__lshift+0xc8>
 800fa70:	e7ea      	b.n	800fa48 <__lshift+0xac>
 800fa72:	bf00      	nop
 800fa74:	08010c48 	.word	0x08010c48
 800fa78:	08010d38 	.word	0x08010d38

0800fa7c <__mcmp>:
 800fa7c:	b530      	push	{r4, r5, lr}
 800fa7e:	6902      	ldr	r2, [r0, #16]
 800fa80:	690c      	ldr	r4, [r1, #16]
 800fa82:	1b12      	subs	r2, r2, r4
 800fa84:	d10e      	bne.n	800faa4 <__mcmp+0x28>
 800fa86:	f100 0314 	add.w	r3, r0, #20
 800fa8a:	3114      	adds	r1, #20
 800fa8c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa90:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa94:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa98:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa9c:	42a5      	cmp	r5, r4
 800fa9e:	d003      	beq.n	800faa8 <__mcmp+0x2c>
 800faa0:	d305      	bcc.n	800faae <__mcmp+0x32>
 800faa2:	2201      	movs	r2, #1
 800faa4:	4610      	mov	r0, r2
 800faa6:	bd30      	pop	{r4, r5, pc}
 800faa8:	4283      	cmp	r3, r0
 800faaa:	d3f3      	bcc.n	800fa94 <__mcmp+0x18>
 800faac:	e7fa      	b.n	800faa4 <__mcmp+0x28>
 800faae:	f04f 32ff 	mov.w	r2, #4294967295
 800fab2:	e7f7      	b.n	800faa4 <__mcmp+0x28>

0800fab4 <__mdiff>:
 800fab4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fab8:	460c      	mov	r4, r1
 800faba:	4606      	mov	r6, r0
 800fabc:	4611      	mov	r1, r2
 800fabe:	4620      	mov	r0, r4
 800fac0:	4690      	mov	r8, r2
 800fac2:	f7ff ffdb 	bl	800fa7c <__mcmp>
 800fac6:	1e05      	subs	r5, r0, #0
 800fac8:	d110      	bne.n	800faec <__mdiff+0x38>
 800faca:	4629      	mov	r1, r5
 800facc:	4630      	mov	r0, r6
 800face:	f7ff fd09 	bl	800f4e4 <_Balloc>
 800fad2:	b930      	cbnz	r0, 800fae2 <__mdiff+0x2e>
 800fad4:	4b3a      	ldr	r3, [pc, #232]	; (800fbc0 <__mdiff+0x10c>)
 800fad6:	4602      	mov	r2, r0
 800fad8:	f240 2132 	movw	r1, #562	; 0x232
 800fadc:	4839      	ldr	r0, [pc, #228]	; (800fbc4 <__mdiff+0x110>)
 800fade:	f000 fdfd 	bl	80106dc <__assert_func>
 800fae2:	2301      	movs	r3, #1
 800fae4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fae8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faec:	bfa4      	itt	ge
 800faee:	4643      	movge	r3, r8
 800faf0:	46a0      	movge	r8, r4
 800faf2:	4630      	mov	r0, r6
 800faf4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800faf8:	bfa6      	itte	ge
 800fafa:	461c      	movge	r4, r3
 800fafc:	2500      	movge	r5, #0
 800fafe:	2501      	movlt	r5, #1
 800fb00:	f7ff fcf0 	bl	800f4e4 <_Balloc>
 800fb04:	b920      	cbnz	r0, 800fb10 <__mdiff+0x5c>
 800fb06:	4b2e      	ldr	r3, [pc, #184]	; (800fbc0 <__mdiff+0x10c>)
 800fb08:	4602      	mov	r2, r0
 800fb0a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fb0e:	e7e5      	b.n	800fadc <__mdiff+0x28>
 800fb10:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb14:	6926      	ldr	r6, [r4, #16]
 800fb16:	60c5      	str	r5, [r0, #12]
 800fb18:	f104 0914 	add.w	r9, r4, #20
 800fb1c:	f108 0514 	add.w	r5, r8, #20
 800fb20:	f100 0e14 	add.w	lr, r0, #20
 800fb24:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb28:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb2c:	f108 0210 	add.w	r2, r8, #16
 800fb30:	46f2      	mov	sl, lr
 800fb32:	2100      	movs	r1, #0
 800fb34:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb38:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb3c:	fa1f f883 	uxth.w	r8, r3
 800fb40:	fa11 f18b 	uxtah	r1, r1, fp
 800fb44:	0c1b      	lsrs	r3, r3, #16
 800fb46:	eba1 0808 	sub.w	r8, r1, r8
 800fb4a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb4e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb52:	fa1f f888 	uxth.w	r8, r8
 800fb56:	1419      	asrs	r1, r3, #16
 800fb58:	454e      	cmp	r6, r9
 800fb5a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb5e:	f84a 3b04 	str.w	r3, [sl], #4
 800fb62:	d8e7      	bhi.n	800fb34 <__mdiff+0x80>
 800fb64:	1b33      	subs	r3, r6, r4
 800fb66:	3b15      	subs	r3, #21
 800fb68:	f023 0303 	bic.w	r3, r3, #3
 800fb6c:	3304      	adds	r3, #4
 800fb6e:	3415      	adds	r4, #21
 800fb70:	42a6      	cmp	r6, r4
 800fb72:	bf38      	it	cc
 800fb74:	2304      	movcc	r3, #4
 800fb76:	441d      	add	r5, r3
 800fb78:	4473      	add	r3, lr
 800fb7a:	469e      	mov	lr, r3
 800fb7c:	462e      	mov	r6, r5
 800fb7e:	4566      	cmp	r6, ip
 800fb80:	d30e      	bcc.n	800fba0 <__mdiff+0xec>
 800fb82:	f10c 0203 	add.w	r2, ip, #3
 800fb86:	1b52      	subs	r2, r2, r5
 800fb88:	f022 0203 	bic.w	r2, r2, #3
 800fb8c:	3d03      	subs	r5, #3
 800fb8e:	45ac      	cmp	ip, r5
 800fb90:	bf38      	it	cc
 800fb92:	2200      	movcc	r2, #0
 800fb94:	441a      	add	r2, r3
 800fb96:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fb9a:	b17b      	cbz	r3, 800fbbc <__mdiff+0x108>
 800fb9c:	6107      	str	r7, [r0, #16]
 800fb9e:	e7a3      	b.n	800fae8 <__mdiff+0x34>
 800fba0:	f856 8b04 	ldr.w	r8, [r6], #4
 800fba4:	fa11 f288 	uxtah	r2, r1, r8
 800fba8:	1414      	asrs	r4, r2, #16
 800fbaa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fbae:	b292      	uxth	r2, r2
 800fbb0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fbb4:	f84e 2b04 	str.w	r2, [lr], #4
 800fbb8:	1421      	asrs	r1, r4, #16
 800fbba:	e7e0      	b.n	800fb7e <__mdiff+0xca>
 800fbbc:	3f01      	subs	r7, #1
 800fbbe:	e7ea      	b.n	800fb96 <__mdiff+0xe2>
 800fbc0:	08010c48 	.word	0x08010c48
 800fbc4:	08010d38 	.word	0x08010d38

0800fbc8 <__ulp>:
 800fbc8:	b082      	sub	sp, #8
 800fbca:	ed8d 0b00 	vstr	d0, [sp]
 800fbce:	9b01      	ldr	r3, [sp, #4]
 800fbd0:	4912      	ldr	r1, [pc, #72]	; (800fc1c <__ulp+0x54>)
 800fbd2:	4019      	ands	r1, r3
 800fbd4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fbd8:	2900      	cmp	r1, #0
 800fbda:	dd05      	ble.n	800fbe8 <__ulp+0x20>
 800fbdc:	2200      	movs	r2, #0
 800fbde:	460b      	mov	r3, r1
 800fbe0:	ec43 2b10 	vmov	d0, r2, r3
 800fbe4:	b002      	add	sp, #8
 800fbe6:	4770      	bx	lr
 800fbe8:	4249      	negs	r1, r1
 800fbea:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fbee:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fbf2:	f04f 0200 	mov.w	r2, #0
 800fbf6:	f04f 0300 	mov.w	r3, #0
 800fbfa:	da04      	bge.n	800fc06 <__ulp+0x3e>
 800fbfc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fc00:	fa41 f300 	asr.w	r3, r1, r0
 800fc04:	e7ec      	b.n	800fbe0 <__ulp+0x18>
 800fc06:	f1a0 0114 	sub.w	r1, r0, #20
 800fc0a:	291e      	cmp	r1, #30
 800fc0c:	bfda      	itte	le
 800fc0e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fc12:	fa20 f101 	lsrle.w	r1, r0, r1
 800fc16:	2101      	movgt	r1, #1
 800fc18:	460a      	mov	r2, r1
 800fc1a:	e7e1      	b.n	800fbe0 <__ulp+0x18>
 800fc1c:	7ff00000 	.word	0x7ff00000

0800fc20 <__b2d>:
 800fc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc22:	6905      	ldr	r5, [r0, #16]
 800fc24:	f100 0714 	add.w	r7, r0, #20
 800fc28:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fc2c:	1f2e      	subs	r6, r5, #4
 800fc2e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fc32:	4620      	mov	r0, r4
 800fc34:	f7ff fd48 	bl	800f6c8 <__hi0bits>
 800fc38:	f1c0 0320 	rsb	r3, r0, #32
 800fc3c:	280a      	cmp	r0, #10
 800fc3e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fcbc <__b2d+0x9c>
 800fc42:	600b      	str	r3, [r1, #0]
 800fc44:	dc14      	bgt.n	800fc70 <__b2d+0x50>
 800fc46:	f1c0 0e0b 	rsb	lr, r0, #11
 800fc4a:	fa24 f10e 	lsr.w	r1, r4, lr
 800fc4e:	42b7      	cmp	r7, r6
 800fc50:	ea41 030c 	orr.w	r3, r1, ip
 800fc54:	bf34      	ite	cc
 800fc56:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc5a:	2100      	movcs	r1, #0
 800fc5c:	3015      	adds	r0, #21
 800fc5e:	fa04 f000 	lsl.w	r0, r4, r0
 800fc62:	fa21 f10e 	lsr.w	r1, r1, lr
 800fc66:	ea40 0201 	orr.w	r2, r0, r1
 800fc6a:	ec43 2b10 	vmov	d0, r2, r3
 800fc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc70:	42b7      	cmp	r7, r6
 800fc72:	bf3a      	itte	cc
 800fc74:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc78:	f1a5 0608 	subcc.w	r6, r5, #8
 800fc7c:	2100      	movcs	r1, #0
 800fc7e:	380b      	subs	r0, #11
 800fc80:	d017      	beq.n	800fcb2 <__b2d+0x92>
 800fc82:	f1c0 0c20 	rsb	ip, r0, #32
 800fc86:	fa04 f500 	lsl.w	r5, r4, r0
 800fc8a:	42be      	cmp	r6, r7
 800fc8c:	fa21 f40c 	lsr.w	r4, r1, ip
 800fc90:	ea45 0504 	orr.w	r5, r5, r4
 800fc94:	bf8c      	ite	hi
 800fc96:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fc9a:	2400      	movls	r4, #0
 800fc9c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fca0:	fa01 f000 	lsl.w	r0, r1, r0
 800fca4:	fa24 f40c 	lsr.w	r4, r4, ip
 800fca8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fcac:	ea40 0204 	orr.w	r2, r0, r4
 800fcb0:	e7db      	b.n	800fc6a <__b2d+0x4a>
 800fcb2:	ea44 030c 	orr.w	r3, r4, ip
 800fcb6:	460a      	mov	r2, r1
 800fcb8:	e7d7      	b.n	800fc6a <__b2d+0x4a>
 800fcba:	bf00      	nop
 800fcbc:	3ff00000 	.word	0x3ff00000

0800fcc0 <__d2b>:
 800fcc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fcc4:	4689      	mov	r9, r1
 800fcc6:	2101      	movs	r1, #1
 800fcc8:	ec57 6b10 	vmov	r6, r7, d0
 800fccc:	4690      	mov	r8, r2
 800fcce:	f7ff fc09 	bl	800f4e4 <_Balloc>
 800fcd2:	4604      	mov	r4, r0
 800fcd4:	b930      	cbnz	r0, 800fce4 <__d2b+0x24>
 800fcd6:	4602      	mov	r2, r0
 800fcd8:	4b25      	ldr	r3, [pc, #148]	; (800fd70 <__d2b+0xb0>)
 800fcda:	4826      	ldr	r0, [pc, #152]	; (800fd74 <__d2b+0xb4>)
 800fcdc:	f240 310a 	movw	r1, #778	; 0x30a
 800fce0:	f000 fcfc 	bl	80106dc <__assert_func>
 800fce4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fce8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fcec:	bb35      	cbnz	r5, 800fd3c <__d2b+0x7c>
 800fcee:	2e00      	cmp	r6, #0
 800fcf0:	9301      	str	r3, [sp, #4]
 800fcf2:	d028      	beq.n	800fd46 <__d2b+0x86>
 800fcf4:	4668      	mov	r0, sp
 800fcf6:	9600      	str	r6, [sp, #0]
 800fcf8:	f7ff fd06 	bl	800f708 <__lo0bits>
 800fcfc:	9900      	ldr	r1, [sp, #0]
 800fcfe:	b300      	cbz	r0, 800fd42 <__d2b+0x82>
 800fd00:	9a01      	ldr	r2, [sp, #4]
 800fd02:	f1c0 0320 	rsb	r3, r0, #32
 800fd06:	fa02 f303 	lsl.w	r3, r2, r3
 800fd0a:	430b      	orrs	r3, r1
 800fd0c:	40c2      	lsrs	r2, r0
 800fd0e:	6163      	str	r3, [r4, #20]
 800fd10:	9201      	str	r2, [sp, #4]
 800fd12:	9b01      	ldr	r3, [sp, #4]
 800fd14:	61a3      	str	r3, [r4, #24]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	bf14      	ite	ne
 800fd1a:	2202      	movne	r2, #2
 800fd1c:	2201      	moveq	r2, #1
 800fd1e:	6122      	str	r2, [r4, #16]
 800fd20:	b1d5      	cbz	r5, 800fd58 <__d2b+0x98>
 800fd22:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fd26:	4405      	add	r5, r0
 800fd28:	f8c9 5000 	str.w	r5, [r9]
 800fd2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd30:	f8c8 0000 	str.w	r0, [r8]
 800fd34:	4620      	mov	r0, r4
 800fd36:	b003      	add	sp, #12
 800fd38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd40:	e7d5      	b.n	800fcee <__d2b+0x2e>
 800fd42:	6161      	str	r1, [r4, #20]
 800fd44:	e7e5      	b.n	800fd12 <__d2b+0x52>
 800fd46:	a801      	add	r0, sp, #4
 800fd48:	f7ff fcde 	bl	800f708 <__lo0bits>
 800fd4c:	9b01      	ldr	r3, [sp, #4]
 800fd4e:	6163      	str	r3, [r4, #20]
 800fd50:	2201      	movs	r2, #1
 800fd52:	6122      	str	r2, [r4, #16]
 800fd54:	3020      	adds	r0, #32
 800fd56:	e7e3      	b.n	800fd20 <__d2b+0x60>
 800fd58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd60:	f8c9 0000 	str.w	r0, [r9]
 800fd64:	6918      	ldr	r0, [r3, #16]
 800fd66:	f7ff fcaf 	bl	800f6c8 <__hi0bits>
 800fd6a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd6e:	e7df      	b.n	800fd30 <__d2b+0x70>
 800fd70:	08010c48 	.word	0x08010c48
 800fd74:	08010d38 	.word	0x08010d38

0800fd78 <__ratio>:
 800fd78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd7c:	4688      	mov	r8, r1
 800fd7e:	4669      	mov	r1, sp
 800fd80:	4681      	mov	r9, r0
 800fd82:	f7ff ff4d 	bl	800fc20 <__b2d>
 800fd86:	a901      	add	r1, sp, #4
 800fd88:	4640      	mov	r0, r8
 800fd8a:	ec55 4b10 	vmov	r4, r5, d0
 800fd8e:	f7ff ff47 	bl	800fc20 <__b2d>
 800fd92:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd96:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fd9a:	eba3 0c02 	sub.w	ip, r3, r2
 800fd9e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fda2:	1a9b      	subs	r3, r3, r2
 800fda4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fda8:	ec51 0b10 	vmov	r0, r1, d0
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	bfd6      	itet	le
 800fdb0:	460a      	movle	r2, r1
 800fdb2:	462a      	movgt	r2, r5
 800fdb4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fdb8:	468b      	mov	fp, r1
 800fdba:	462f      	mov	r7, r5
 800fdbc:	bfd4      	ite	le
 800fdbe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fdc2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fdc6:	4620      	mov	r0, r4
 800fdc8:	ee10 2a10 	vmov	r2, s0
 800fdcc:	465b      	mov	r3, fp
 800fdce:	4639      	mov	r1, r7
 800fdd0:	f7f0 fd54 	bl	800087c <__aeabi_ddiv>
 800fdd4:	ec41 0b10 	vmov	d0, r0, r1
 800fdd8:	b003      	add	sp, #12
 800fdda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdde <__copybits>:
 800fdde:	3901      	subs	r1, #1
 800fde0:	b570      	push	{r4, r5, r6, lr}
 800fde2:	1149      	asrs	r1, r1, #5
 800fde4:	6914      	ldr	r4, [r2, #16]
 800fde6:	3101      	adds	r1, #1
 800fde8:	f102 0314 	add.w	r3, r2, #20
 800fdec:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fdf0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fdf4:	1f05      	subs	r5, r0, #4
 800fdf6:	42a3      	cmp	r3, r4
 800fdf8:	d30c      	bcc.n	800fe14 <__copybits+0x36>
 800fdfa:	1aa3      	subs	r3, r4, r2
 800fdfc:	3b11      	subs	r3, #17
 800fdfe:	f023 0303 	bic.w	r3, r3, #3
 800fe02:	3211      	adds	r2, #17
 800fe04:	42a2      	cmp	r2, r4
 800fe06:	bf88      	it	hi
 800fe08:	2300      	movhi	r3, #0
 800fe0a:	4418      	add	r0, r3
 800fe0c:	2300      	movs	r3, #0
 800fe0e:	4288      	cmp	r0, r1
 800fe10:	d305      	bcc.n	800fe1e <__copybits+0x40>
 800fe12:	bd70      	pop	{r4, r5, r6, pc}
 800fe14:	f853 6b04 	ldr.w	r6, [r3], #4
 800fe18:	f845 6f04 	str.w	r6, [r5, #4]!
 800fe1c:	e7eb      	b.n	800fdf6 <__copybits+0x18>
 800fe1e:	f840 3b04 	str.w	r3, [r0], #4
 800fe22:	e7f4      	b.n	800fe0e <__copybits+0x30>

0800fe24 <__any_on>:
 800fe24:	f100 0214 	add.w	r2, r0, #20
 800fe28:	6900      	ldr	r0, [r0, #16]
 800fe2a:	114b      	asrs	r3, r1, #5
 800fe2c:	4298      	cmp	r0, r3
 800fe2e:	b510      	push	{r4, lr}
 800fe30:	db11      	blt.n	800fe56 <__any_on+0x32>
 800fe32:	dd0a      	ble.n	800fe4a <__any_on+0x26>
 800fe34:	f011 011f 	ands.w	r1, r1, #31
 800fe38:	d007      	beq.n	800fe4a <__any_on+0x26>
 800fe3a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fe3e:	fa24 f001 	lsr.w	r0, r4, r1
 800fe42:	fa00 f101 	lsl.w	r1, r0, r1
 800fe46:	428c      	cmp	r4, r1
 800fe48:	d10b      	bne.n	800fe62 <__any_on+0x3e>
 800fe4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe4e:	4293      	cmp	r3, r2
 800fe50:	d803      	bhi.n	800fe5a <__any_on+0x36>
 800fe52:	2000      	movs	r0, #0
 800fe54:	bd10      	pop	{r4, pc}
 800fe56:	4603      	mov	r3, r0
 800fe58:	e7f7      	b.n	800fe4a <__any_on+0x26>
 800fe5a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe5e:	2900      	cmp	r1, #0
 800fe60:	d0f5      	beq.n	800fe4e <__any_on+0x2a>
 800fe62:	2001      	movs	r0, #1
 800fe64:	e7f6      	b.n	800fe54 <__any_on+0x30>

0800fe66 <_calloc_r>:
 800fe66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe68:	fba1 2402 	umull	r2, r4, r1, r2
 800fe6c:	b94c      	cbnz	r4, 800fe82 <_calloc_r+0x1c>
 800fe6e:	4611      	mov	r1, r2
 800fe70:	9201      	str	r2, [sp, #4]
 800fe72:	f000 f87b 	bl	800ff6c <_malloc_r>
 800fe76:	9a01      	ldr	r2, [sp, #4]
 800fe78:	4605      	mov	r5, r0
 800fe7a:	b930      	cbnz	r0, 800fe8a <_calloc_r+0x24>
 800fe7c:	4628      	mov	r0, r5
 800fe7e:	b003      	add	sp, #12
 800fe80:	bd30      	pop	{r4, r5, pc}
 800fe82:	220c      	movs	r2, #12
 800fe84:	6002      	str	r2, [r0, #0]
 800fe86:	2500      	movs	r5, #0
 800fe88:	e7f8      	b.n	800fe7c <_calloc_r+0x16>
 800fe8a:	4621      	mov	r1, r4
 800fe8c:	f7fc f82c 	bl	800bee8 <memset>
 800fe90:	e7f4      	b.n	800fe7c <_calloc_r+0x16>
	...

0800fe94 <_free_r>:
 800fe94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe96:	2900      	cmp	r1, #0
 800fe98:	d044      	beq.n	800ff24 <_free_r+0x90>
 800fe9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe9e:	9001      	str	r0, [sp, #4]
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	f1a1 0404 	sub.w	r4, r1, #4
 800fea6:	bfb8      	it	lt
 800fea8:	18e4      	addlt	r4, r4, r3
 800feaa:	f000 fca5 	bl	80107f8 <__malloc_lock>
 800feae:	4a1e      	ldr	r2, [pc, #120]	; (800ff28 <_free_r+0x94>)
 800feb0:	9801      	ldr	r0, [sp, #4]
 800feb2:	6813      	ldr	r3, [r2, #0]
 800feb4:	b933      	cbnz	r3, 800fec4 <_free_r+0x30>
 800feb6:	6063      	str	r3, [r4, #4]
 800feb8:	6014      	str	r4, [r2, #0]
 800feba:	b003      	add	sp, #12
 800febc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fec0:	f000 bca0 	b.w	8010804 <__malloc_unlock>
 800fec4:	42a3      	cmp	r3, r4
 800fec6:	d908      	bls.n	800feda <_free_r+0x46>
 800fec8:	6825      	ldr	r5, [r4, #0]
 800feca:	1961      	adds	r1, r4, r5
 800fecc:	428b      	cmp	r3, r1
 800fece:	bf01      	itttt	eq
 800fed0:	6819      	ldreq	r1, [r3, #0]
 800fed2:	685b      	ldreq	r3, [r3, #4]
 800fed4:	1949      	addeq	r1, r1, r5
 800fed6:	6021      	streq	r1, [r4, #0]
 800fed8:	e7ed      	b.n	800feb6 <_free_r+0x22>
 800feda:	461a      	mov	r2, r3
 800fedc:	685b      	ldr	r3, [r3, #4]
 800fede:	b10b      	cbz	r3, 800fee4 <_free_r+0x50>
 800fee0:	42a3      	cmp	r3, r4
 800fee2:	d9fa      	bls.n	800feda <_free_r+0x46>
 800fee4:	6811      	ldr	r1, [r2, #0]
 800fee6:	1855      	adds	r5, r2, r1
 800fee8:	42a5      	cmp	r5, r4
 800feea:	d10b      	bne.n	800ff04 <_free_r+0x70>
 800feec:	6824      	ldr	r4, [r4, #0]
 800feee:	4421      	add	r1, r4
 800fef0:	1854      	adds	r4, r2, r1
 800fef2:	42a3      	cmp	r3, r4
 800fef4:	6011      	str	r1, [r2, #0]
 800fef6:	d1e0      	bne.n	800feba <_free_r+0x26>
 800fef8:	681c      	ldr	r4, [r3, #0]
 800fefa:	685b      	ldr	r3, [r3, #4]
 800fefc:	6053      	str	r3, [r2, #4]
 800fefe:	4421      	add	r1, r4
 800ff00:	6011      	str	r1, [r2, #0]
 800ff02:	e7da      	b.n	800feba <_free_r+0x26>
 800ff04:	d902      	bls.n	800ff0c <_free_r+0x78>
 800ff06:	230c      	movs	r3, #12
 800ff08:	6003      	str	r3, [r0, #0]
 800ff0a:	e7d6      	b.n	800feba <_free_r+0x26>
 800ff0c:	6825      	ldr	r5, [r4, #0]
 800ff0e:	1961      	adds	r1, r4, r5
 800ff10:	428b      	cmp	r3, r1
 800ff12:	bf04      	itt	eq
 800ff14:	6819      	ldreq	r1, [r3, #0]
 800ff16:	685b      	ldreq	r3, [r3, #4]
 800ff18:	6063      	str	r3, [r4, #4]
 800ff1a:	bf04      	itt	eq
 800ff1c:	1949      	addeq	r1, r1, r5
 800ff1e:	6021      	streq	r1, [r4, #0]
 800ff20:	6054      	str	r4, [r2, #4]
 800ff22:	e7ca      	b.n	800feba <_free_r+0x26>
 800ff24:	b003      	add	sp, #12
 800ff26:	bd30      	pop	{r4, r5, pc}
 800ff28:	2000458c 	.word	0x2000458c

0800ff2c <sbrk_aligned>:
 800ff2c:	b570      	push	{r4, r5, r6, lr}
 800ff2e:	4e0e      	ldr	r6, [pc, #56]	; (800ff68 <sbrk_aligned+0x3c>)
 800ff30:	460c      	mov	r4, r1
 800ff32:	6831      	ldr	r1, [r6, #0]
 800ff34:	4605      	mov	r5, r0
 800ff36:	b911      	cbnz	r1, 800ff3e <sbrk_aligned+0x12>
 800ff38:	f000 fb4a 	bl	80105d0 <_sbrk_r>
 800ff3c:	6030      	str	r0, [r6, #0]
 800ff3e:	4621      	mov	r1, r4
 800ff40:	4628      	mov	r0, r5
 800ff42:	f000 fb45 	bl	80105d0 <_sbrk_r>
 800ff46:	1c43      	adds	r3, r0, #1
 800ff48:	d00a      	beq.n	800ff60 <sbrk_aligned+0x34>
 800ff4a:	1cc4      	adds	r4, r0, #3
 800ff4c:	f024 0403 	bic.w	r4, r4, #3
 800ff50:	42a0      	cmp	r0, r4
 800ff52:	d007      	beq.n	800ff64 <sbrk_aligned+0x38>
 800ff54:	1a21      	subs	r1, r4, r0
 800ff56:	4628      	mov	r0, r5
 800ff58:	f000 fb3a 	bl	80105d0 <_sbrk_r>
 800ff5c:	3001      	adds	r0, #1
 800ff5e:	d101      	bne.n	800ff64 <sbrk_aligned+0x38>
 800ff60:	f04f 34ff 	mov.w	r4, #4294967295
 800ff64:	4620      	mov	r0, r4
 800ff66:	bd70      	pop	{r4, r5, r6, pc}
 800ff68:	20004590 	.word	0x20004590

0800ff6c <_malloc_r>:
 800ff6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff70:	1ccd      	adds	r5, r1, #3
 800ff72:	f025 0503 	bic.w	r5, r5, #3
 800ff76:	3508      	adds	r5, #8
 800ff78:	2d0c      	cmp	r5, #12
 800ff7a:	bf38      	it	cc
 800ff7c:	250c      	movcc	r5, #12
 800ff7e:	2d00      	cmp	r5, #0
 800ff80:	4607      	mov	r7, r0
 800ff82:	db01      	blt.n	800ff88 <_malloc_r+0x1c>
 800ff84:	42a9      	cmp	r1, r5
 800ff86:	d905      	bls.n	800ff94 <_malloc_r+0x28>
 800ff88:	230c      	movs	r3, #12
 800ff8a:	603b      	str	r3, [r7, #0]
 800ff8c:	2600      	movs	r6, #0
 800ff8e:	4630      	mov	r0, r6
 800ff90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff94:	4e2e      	ldr	r6, [pc, #184]	; (8010050 <_malloc_r+0xe4>)
 800ff96:	f000 fc2f 	bl	80107f8 <__malloc_lock>
 800ff9a:	6833      	ldr	r3, [r6, #0]
 800ff9c:	461c      	mov	r4, r3
 800ff9e:	bb34      	cbnz	r4, 800ffee <_malloc_r+0x82>
 800ffa0:	4629      	mov	r1, r5
 800ffa2:	4638      	mov	r0, r7
 800ffa4:	f7ff ffc2 	bl	800ff2c <sbrk_aligned>
 800ffa8:	1c43      	adds	r3, r0, #1
 800ffaa:	4604      	mov	r4, r0
 800ffac:	d14d      	bne.n	801004a <_malloc_r+0xde>
 800ffae:	6834      	ldr	r4, [r6, #0]
 800ffb0:	4626      	mov	r6, r4
 800ffb2:	2e00      	cmp	r6, #0
 800ffb4:	d140      	bne.n	8010038 <_malloc_r+0xcc>
 800ffb6:	6823      	ldr	r3, [r4, #0]
 800ffb8:	4631      	mov	r1, r6
 800ffba:	4638      	mov	r0, r7
 800ffbc:	eb04 0803 	add.w	r8, r4, r3
 800ffc0:	f000 fb06 	bl	80105d0 <_sbrk_r>
 800ffc4:	4580      	cmp	r8, r0
 800ffc6:	d13a      	bne.n	801003e <_malloc_r+0xd2>
 800ffc8:	6821      	ldr	r1, [r4, #0]
 800ffca:	3503      	adds	r5, #3
 800ffcc:	1a6d      	subs	r5, r5, r1
 800ffce:	f025 0503 	bic.w	r5, r5, #3
 800ffd2:	3508      	adds	r5, #8
 800ffd4:	2d0c      	cmp	r5, #12
 800ffd6:	bf38      	it	cc
 800ffd8:	250c      	movcc	r5, #12
 800ffda:	4629      	mov	r1, r5
 800ffdc:	4638      	mov	r0, r7
 800ffde:	f7ff ffa5 	bl	800ff2c <sbrk_aligned>
 800ffe2:	3001      	adds	r0, #1
 800ffe4:	d02b      	beq.n	801003e <_malloc_r+0xd2>
 800ffe6:	6823      	ldr	r3, [r4, #0]
 800ffe8:	442b      	add	r3, r5
 800ffea:	6023      	str	r3, [r4, #0]
 800ffec:	e00e      	b.n	801000c <_malloc_r+0xa0>
 800ffee:	6822      	ldr	r2, [r4, #0]
 800fff0:	1b52      	subs	r2, r2, r5
 800fff2:	d41e      	bmi.n	8010032 <_malloc_r+0xc6>
 800fff4:	2a0b      	cmp	r2, #11
 800fff6:	d916      	bls.n	8010026 <_malloc_r+0xba>
 800fff8:	1961      	adds	r1, r4, r5
 800fffa:	42a3      	cmp	r3, r4
 800fffc:	6025      	str	r5, [r4, #0]
 800fffe:	bf18      	it	ne
 8010000:	6059      	strne	r1, [r3, #4]
 8010002:	6863      	ldr	r3, [r4, #4]
 8010004:	bf08      	it	eq
 8010006:	6031      	streq	r1, [r6, #0]
 8010008:	5162      	str	r2, [r4, r5]
 801000a:	604b      	str	r3, [r1, #4]
 801000c:	4638      	mov	r0, r7
 801000e:	f104 060b 	add.w	r6, r4, #11
 8010012:	f000 fbf7 	bl	8010804 <__malloc_unlock>
 8010016:	f026 0607 	bic.w	r6, r6, #7
 801001a:	1d23      	adds	r3, r4, #4
 801001c:	1af2      	subs	r2, r6, r3
 801001e:	d0b6      	beq.n	800ff8e <_malloc_r+0x22>
 8010020:	1b9b      	subs	r3, r3, r6
 8010022:	50a3      	str	r3, [r4, r2]
 8010024:	e7b3      	b.n	800ff8e <_malloc_r+0x22>
 8010026:	6862      	ldr	r2, [r4, #4]
 8010028:	42a3      	cmp	r3, r4
 801002a:	bf0c      	ite	eq
 801002c:	6032      	streq	r2, [r6, #0]
 801002e:	605a      	strne	r2, [r3, #4]
 8010030:	e7ec      	b.n	801000c <_malloc_r+0xa0>
 8010032:	4623      	mov	r3, r4
 8010034:	6864      	ldr	r4, [r4, #4]
 8010036:	e7b2      	b.n	800ff9e <_malloc_r+0x32>
 8010038:	4634      	mov	r4, r6
 801003a:	6876      	ldr	r6, [r6, #4]
 801003c:	e7b9      	b.n	800ffb2 <_malloc_r+0x46>
 801003e:	230c      	movs	r3, #12
 8010040:	603b      	str	r3, [r7, #0]
 8010042:	4638      	mov	r0, r7
 8010044:	f000 fbde 	bl	8010804 <__malloc_unlock>
 8010048:	e7a1      	b.n	800ff8e <_malloc_r+0x22>
 801004a:	6025      	str	r5, [r4, #0]
 801004c:	e7de      	b.n	801000c <_malloc_r+0xa0>
 801004e:	bf00      	nop
 8010050:	2000458c 	.word	0x2000458c

08010054 <__ssputs_r>:
 8010054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010058:	688e      	ldr	r6, [r1, #8]
 801005a:	429e      	cmp	r6, r3
 801005c:	4682      	mov	sl, r0
 801005e:	460c      	mov	r4, r1
 8010060:	4690      	mov	r8, r2
 8010062:	461f      	mov	r7, r3
 8010064:	d838      	bhi.n	80100d8 <__ssputs_r+0x84>
 8010066:	898a      	ldrh	r2, [r1, #12]
 8010068:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801006c:	d032      	beq.n	80100d4 <__ssputs_r+0x80>
 801006e:	6825      	ldr	r5, [r4, #0]
 8010070:	6909      	ldr	r1, [r1, #16]
 8010072:	eba5 0901 	sub.w	r9, r5, r1
 8010076:	6965      	ldr	r5, [r4, #20]
 8010078:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801007c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010080:	3301      	adds	r3, #1
 8010082:	444b      	add	r3, r9
 8010084:	106d      	asrs	r5, r5, #1
 8010086:	429d      	cmp	r5, r3
 8010088:	bf38      	it	cc
 801008a:	461d      	movcc	r5, r3
 801008c:	0553      	lsls	r3, r2, #21
 801008e:	d531      	bpl.n	80100f4 <__ssputs_r+0xa0>
 8010090:	4629      	mov	r1, r5
 8010092:	f7ff ff6b 	bl	800ff6c <_malloc_r>
 8010096:	4606      	mov	r6, r0
 8010098:	b950      	cbnz	r0, 80100b0 <__ssputs_r+0x5c>
 801009a:	230c      	movs	r3, #12
 801009c:	f8ca 3000 	str.w	r3, [sl]
 80100a0:	89a3      	ldrh	r3, [r4, #12]
 80100a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80100a6:	81a3      	strh	r3, [r4, #12]
 80100a8:	f04f 30ff 	mov.w	r0, #4294967295
 80100ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100b0:	6921      	ldr	r1, [r4, #16]
 80100b2:	464a      	mov	r2, r9
 80100b4:	f7fb ff0a 	bl	800becc <memcpy>
 80100b8:	89a3      	ldrh	r3, [r4, #12]
 80100ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100c2:	81a3      	strh	r3, [r4, #12]
 80100c4:	6126      	str	r6, [r4, #16]
 80100c6:	6165      	str	r5, [r4, #20]
 80100c8:	444e      	add	r6, r9
 80100ca:	eba5 0509 	sub.w	r5, r5, r9
 80100ce:	6026      	str	r6, [r4, #0]
 80100d0:	60a5      	str	r5, [r4, #8]
 80100d2:	463e      	mov	r6, r7
 80100d4:	42be      	cmp	r6, r7
 80100d6:	d900      	bls.n	80100da <__ssputs_r+0x86>
 80100d8:	463e      	mov	r6, r7
 80100da:	6820      	ldr	r0, [r4, #0]
 80100dc:	4632      	mov	r2, r6
 80100de:	4641      	mov	r1, r8
 80100e0:	f000 fb70 	bl	80107c4 <memmove>
 80100e4:	68a3      	ldr	r3, [r4, #8]
 80100e6:	1b9b      	subs	r3, r3, r6
 80100e8:	60a3      	str	r3, [r4, #8]
 80100ea:	6823      	ldr	r3, [r4, #0]
 80100ec:	4433      	add	r3, r6
 80100ee:	6023      	str	r3, [r4, #0]
 80100f0:	2000      	movs	r0, #0
 80100f2:	e7db      	b.n	80100ac <__ssputs_r+0x58>
 80100f4:	462a      	mov	r2, r5
 80100f6:	f000 fb8b 	bl	8010810 <_realloc_r>
 80100fa:	4606      	mov	r6, r0
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d1e1      	bne.n	80100c4 <__ssputs_r+0x70>
 8010100:	6921      	ldr	r1, [r4, #16]
 8010102:	4650      	mov	r0, sl
 8010104:	f7ff fec6 	bl	800fe94 <_free_r>
 8010108:	e7c7      	b.n	801009a <__ssputs_r+0x46>
	...

0801010c <_svfiprintf_r>:
 801010c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010110:	4698      	mov	r8, r3
 8010112:	898b      	ldrh	r3, [r1, #12]
 8010114:	061b      	lsls	r3, r3, #24
 8010116:	b09d      	sub	sp, #116	; 0x74
 8010118:	4607      	mov	r7, r0
 801011a:	460d      	mov	r5, r1
 801011c:	4614      	mov	r4, r2
 801011e:	d50e      	bpl.n	801013e <_svfiprintf_r+0x32>
 8010120:	690b      	ldr	r3, [r1, #16]
 8010122:	b963      	cbnz	r3, 801013e <_svfiprintf_r+0x32>
 8010124:	2140      	movs	r1, #64	; 0x40
 8010126:	f7ff ff21 	bl	800ff6c <_malloc_r>
 801012a:	6028      	str	r0, [r5, #0]
 801012c:	6128      	str	r0, [r5, #16]
 801012e:	b920      	cbnz	r0, 801013a <_svfiprintf_r+0x2e>
 8010130:	230c      	movs	r3, #12
 8010132:	603b      	str	r3, [r7, #0]
 8010134:	f04f 30ff 	mov.w	r0, #4294967295
 8010138:	e0d1      	b.n	80102de <_svfiprintf_r+0x1d2>
 801013a:	2340      	movs	r3, #64	; 0x40
 801013c:	616b      	str	r3, [r5, #20]
 801013e:	2300      	movs	r3, #0
 8010140:	9309      	str	r3, [sp, #36]	; 0x24
 8010142:	2320      	movs	r3, #32
 8010144:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010148:	f8cd 800c 	str.w	r8, [sp, #12]
 801014c:	2330      	movs	r3, #48	; 0x30
 801014e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102f8 <_svfiprintf_r+0x1ec>
 8010152:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010156:	f04f 0901 	mov.w	r9, #1
 801015a:	4623      	mov	r3, r4
 801015c:	469a      	mov	sl, r3
 801015e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010162:	b10a      	cbz	r2, 8010168 <_svfiprintf_r+0x5c>
 8010164:	2a25      	cmp	r2, #37	; 0x25
 8010166:	d1f9      	bne.n	801015c <_svfiprintf_r+0x50>
 8010168:	ebba 0b04 	subs.w	fp, sl, r4
 801016c:	d00b      	beq.n	8010186 <_svfiprintf_r+0x7a>
 801016e:	465b      	mov	r3, fp
 8010170:	4622      	mov	r2, r4
 8010172:	4629      	mov	r1, r5
 8010174:	4638      	mov	r0, r7
 8010176:	f7ff ff6d 	bl	8010054 <__ssputs_r>
 801017a:	3001      	adds	r0, #1
 801017c:	f000 80aa 	beq.w	80102d4 <_svfiprintf_r+0x1c8>
 8010180:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010182:	445a      	add	r2, fp
 8010184:	9209      	str	r2, [sp, #36]	; 0x24
 8010186:	f89a 3000 	ldrb.w	r3, [sl]
 801018a:	2b00      	cmp	r3, #0
 801018c:	f000 80a2 	beq.w	80102d4 <_svfiprintf_r+0x1c8>
 8010190:	2300      	movs	r3, #0
 8010192:	f04f 32ff 	mov.w	r2, #4294967295
 8010196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801019a:	f10a 0a01 	add.w	sl, sl, #1
 801019e:	9304      	str	r3, [sp, #16]
 80101a0:	9307      	str	r3, [sp, #28]
 80101a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80101a6:	931a      	str	r3, [sp, #104]	; 0x68
 80101a8:	4654      	mov	r4, sl
 80101aa:	2205      	movs	r2, #5
 80101ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101b0:	4851      	ldr	r0, [pc, #324]	; (80102f8 <_svfiprintf_r+0x1ec>)
 80101b2:	f7f0 f82d 	bl	8000210 <memchr>
 80101b6:	9a04      	ldr	r2, [sp, #16]
 80101b8:	b9d8      	cbnz	r0, 80101f2 <_svfiprintf_r+0xe6>
 80101ba:	06d0      	lsls	r0, r2, #27
 80101bc:	bf44      	itt	mi
 80101be:	2320      	movmi	r3, #32
 80101c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101c4:	0711      	lsls	r1, r2, #28
 80101c6:	bf44      	itt	mi
 80101c8:	232b      	movmi	r3, #43	; 0x2b
 80101ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101ce:	f89a 3000 	ldrb.w	r3, [sl]
 80101d2:	2b2a      	cmp	r3, #42	; 0x2a
 80101d4:	d015      	beq.n	8010202 <_svfiprintf_r+0xf6>
 80101d6:	9a07      	ldr	r2, [sp, #28]
 80101d8:	4654      	mov	r4, sl
 80101da:	2000      	movs	r0, #0
 80101dc:	f04f 0c0a 	mov.w	ip, #10
 80101e0:	4621      	mov	r1, r4
 80101e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101e6:	3b30      	subs	r3, #48	; 0x30
 80101e8:	2b09      	cmp	r3, #9
 80101ea:	d94e      	bls.n	801028a <_svfiprintf_r+0x17e>
 80101ec:	b1b0      	cbz	r0, 801021c <_svfiprintf_r+0x110>
 80101ee:	9207      	str	r2, [sp, #28]
 80101f0:	e014      	b.n	801021c <_svfiprintf_r+0x110>
 80101f2:	eba0 0308 	sub.w	r3, r0, r8
 80101f6:	fa09 f303 	lsl.w	r3, r9, r3
 80101fa:	4313      	orrs	r3, r2
 80101fc:	9304      	str	r3, [sp, #16]
 80101fe:	46a2      	mov	sl, r4
 8010200:	e7d2      	b.n	80101a8 <_svfiprintf_r+0x9c>
 8010202:	9b03      	ldr	r3, [sp, #12]
 8010204:	1d19      	adds	r1, r3, #4
 8010206:	681b      	ldr	r3, [r3, #0]
 8010208:	9103      	str	r1, [sp, #12]
 801020a:	2b00      	cmp	r3, #0
 801020c:	bfbb      	ittet	lt
 801020e:	425b      	neglt	r3, r3
 8010210:	f042 0202 	orrlt.w	r2, r2, #2
 8010214:	9307      	strge	r3, [sp, #28]
 8010216:	9307      	strlt	r3, [sp, #28]
 8010218:	bfb8      	it	lt
 801021a:	9204      	strlt	r2, [sp, #16]
 801021c:	7823      	ldrb	r3, [r4, #0]
 801021e:	2b2e      	cmp	r3, #46	; 0x2e
 8010220:	d10c      	bne.n	801023c <_svfiprintf_r+0x130>
 8010222:	7863      	ldrb	r3, [r4, #1]
 8010224:	2b2a      	cmp	r3, #42	; 0x2a
 8010226:	d135      	bne.n	8010294 <_svfiprintf_r+0x188>
 8010228:	9b03      	ldr	r3, [sp, #12]
 801022a:	1d1a      	adds	r2, r3, #4
 801022c:	681b      	ldr	r3, [r3, #0]
 801022e:	9203      	str	r2, [sp, #12]
 8010230:	2b00      	cmp	r3, #0
 8010232:	bfb8      	it	lt
 8010234:	f04f 33ff 	movlt.w	r3, #4294967295
 8010238:	3402      	adds	r4, #2
 801023a:	9305      	str	r3, [sp, #20]
 801023c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010308 <_svfiprintf_r+0x1fc>
 8010240:	7821      	ldrb	r1, [r4, #0]
 8010242:	2203      	movs	r2, #3
 8010244:	4650      	mov	r0, sl
 8010246:	f7ef ffe3 	bl	8000210 <memchr>
 801024a:	b140      	cbz	r0, 801025e <_svfiprintf_r+0x152>
 801024c:	2340      	movs	r3, #64	; 0x40
 801024e:	eba0 000a 	sub.w	r0, r0, sl
 8010252:	fa03 f000 	lsl.w	r0, r3, r0
 8010256:	9b04      	ldr	r3, [sp, #16]
 8010258:	4303      	orrs	r3, r0
 801025a:	3401      	adds	r4, #1
 801025c:	9304      	str	r3, [sp, #16]
 801025e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010262:	4826      	ldr	r0, [pc, #152]	; (80102fc <_svfiprintf_r+0x1f0>)
 8010264:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010268:	2206      	movs	r2, #6
 801026a:	f7ef ffd1 	bl	8000210 <memchr>
 801026e:	2800      	cmp	r0, #0
 8010270:	d038      	beq.n	80102e4 <_svfiprintf_r+0x1d8>
 8010272:	4b23      	ldr	r3, [pc, #140]	; (8010300 <_svfiprintf_r+0x1f4>)
 8010274:	bb1b      	cbnz	r3, 80102be <_svfiprintf_r+0x1b2>
 8010276:	9b03      	ldr	r3, [sp, #12]
 8010278:	3307      	adds	r3, #7
 801027a:	f023 0307 	bic.w	r3, r3, #7
 801027e:	3308      	adds	r3, #8
 8010280:	9303      	str	r3, [sp, #12]
 8010282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010284:	4433      	add	r3, r6
 8010286:	9309      	str	r3, [sp, #36]	; 0x24
 8010288:	e767      	b.n	801015a <_svfiprintf_r+0x4e>
 801028a:	fb0c 3202 	mla	r2, ip, r2, r3
 801028e:	460c      	mov	r4, r1
 8010290:	2001      	movs	r0, #1
 8010292:	e7a5      	b.n	80101e0 <_svfiprintf_r+0xd4>
 8010294:	2300      	movs	r3, #0
 8010296:	3401      	adds	r4, #1
 8010298:	9305      	str	r3, [sp, #20]
 801029a:	4619      	mov	r1, r3
 801029c:	f04f 0c0a 	mov.w	ip, #10
 80102a0:	4620      	mov	r0, r4
 80102a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80102a6:	3a30      	subs	r2, #48	; 0x30
 80102a8:	2a09      	cmp	r2, #9
 80102aa:	d903      	bls.n	80102b4 <_svfiprintf_r+0x1a8>
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d0c5      	beq.n	801023c <_svfiprintf_r+0x130>
 80102b0:	9105      	str	r1, [sp, #20]
 80102b2:	e7c3      	b.n	801023c <_svfiprintf_r+0x130>
 80102b4:	fb0c 2101 	mla	r1, ip, r1, r2
 80102b8:	4604      	mov	r4, r0
 80102ba:	2301      	movs	r3, #1
 80102bc:	e7f0      	b.n	80102a0 <_svfiprintf_r+0x194>
 80102be:	ab03      	add	r3, sp, #12
 80102c0:	9300      	str	r3, [sp, #0]
 80102c2:	462a      	mov	r2, r5
 80102c4:	4b0f      	ldr	r3, [pc, #60]	; (8010304 <_svfiprintf_r+0x1f8>)
 80102c6:	a904      	add	r1, sp, #16
 80102c8:	4638      	mov	r0, r7
 80102ca:	f7fb feb5 	bl	800c038 <_printf_float>
 80102ce:	1c42      	adds	r2, r0, #1
 80102d0:	4606      	mov	r6, r0
 80102d2:	d1d6      	bne.n	8010282 <_svfiprintf_r+0x176>
 80102d4:	89ab      	ldrh	r3, [r5, #12]
 80102d6:	065b      	lsls	r3, r3, #25
 80102d8:	f53f af2c 	bmi.w	8010134 <_svfiprintf_r+0x28>
 80102dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102de:	b01d      	add	sp, #116	; 0x74
 80102e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102e4:	ab03      	add	r3, sp, #12
 80102e6:	9300      	str	r3, [sp, #0]
 80102e8:	462a      	mov	r2, r5
 80102ea:	4b06      	ldr	r3, [pc, #24]	; (8010304 <_svfiprintf_r+0x1f8>)
 80102ec:	a904      	add	r1, sp, #16
 80102ee:	4638      	mov	r0, r7
 80102f0:	f7fc f946 	bl	800c580 <_printf_i>
 80102f4:	e7eb      	b.n	80102ce <_svfiprintf_r+0x1c2>
 80102f6:	bf00      	nop
 80102f8:	08010e94 	.word	0x08010e94
 80102fc:	08010e9e 	.word	0x08010e9e
 8010300:	0800c039 	.word	0x0800c039
 8010304:	08010055 	.word	0x08010055
 8010308:	08010e9a 	.word	0x08010e9a

0801030c <__sfputc_r>:
 801030c:	6893      	ldr	r3, [r2, #8]
 801030e:	3b01      	subs	r3, #1
 8010310:	2b00      	cmp	r3, #0
 8010312:	b410      	push	{r4}
 8010314:	6093      	str	r3, [r2, #8]
 8010316:	da08      	bge.n	801032a <__sfputc_r+0x1e>
 8010318:	6994      	ldr	r4, [r2, #24]
 801031a:	42a3      	cmp	r3, r4
 801031c:	db01      	blt.n	8010322 <__sfputc_r+0x16>
 801031e:	290a      	cmp	r1, #10
 8010320:	d103      	bne.n	801032a <__sfputc_r+0x1e>
 8010322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010326:	f7fd bbf7 	b.w	800db18 <__swbuf_r>
 801032a:	6813      	ldr	r3, [r2, #0]
 801032c:	1c58      	adds	r0, r3, #1
 801032e:	6010      	str	r0, [r2, #0]
 8010330:	7019      	strb	r1, [r3, #0]
 8010332:	4608      	mov	r0, r1
 8010334:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010338:	4770      	bx	lr

0801033a <__sfputs_r>:
 801033a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801033c:	4606      	mov	r6, r0
 801033e:	460f      	mov	r7, r1
 8010340:	4614      	mov	r4, r2
 8010342:	18d5      	adds	r5, r2, r3
 8010344:	42ac      	cmp	r4, r5
 8010346:	d101      	bne.n	801034c <__sfputs_r+0x12>
 8010348:	2000      	movs	r0, #0
 801034a:	e007      	b.n	801035c <__sfputs_r+0x22>
 801034c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010350:	463a      	mov	r2, r7
 8010352:	4630      	mov	r0, r6
 8010354:	f7ff ffda 	bl	801030c <__sfputc_r>
 8010358:	1c43      	adds	r3, r0, #1
 801035a:	d1f3      	bne.n	8010344 <__sfputs_r+0xa>
 801035c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010360 <_vfiprintf_r>:
 8010360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010364:	460d      	mov	r5, r1
 8010366:	b09d      	sub	sp, #116	; 0x74
 8010368:	4614      	mov	r4, r2
 801036a:	4698      	mov	r8, r3
 801036c:	4606      	mov	r6, r0
 801036e:	b118      	cbz	r0, 8010378 <_vfiprintf_r+0x18>
 8010370:	6983      	ldr	r3, [r0, #24]
 8010372:	b90b      	cbnz	r3, 8010378 <_vfiprintf_r+0x18>
 8010374:	f7fe fc24 	bl	800ebc0 <__sinit>
 8010378:	4b89      	ldr	r3, [pc, #548]	; (80105a0 <_vfiprintf_r+0x240>)
 801037a:	429d      	cmp	r5, r3
 801037c:	d11b      	bne.n	80103b6 <_vfiprintf_r+0x56>
 801037e:	6875      	ldr	r5, [r6, #4]
 8010380:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010382:	07d9      	lsls	r1, r3, #31
 8010384:	d405      	bmi.n	8010392 <_vfiprintf_r+0x32>
 8010386:	89ab      	ldrh	r3, [r5, #12]
 8010388:	059a      	lsls	r2, r3, #22
 801038a:	d402      	bmi.n	8010392 <_vfiprintf_r+0x32>
 801038c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801038e:	f7ff f828 	bl	800f3e2 <__retarget_lock_acquire_recursive>
 8010392:	89ab      	ldrh	r3, [r5, #12]
 8010394:	071b      	lsls	r3, r3, #28
 8010396:	d501      	bpl.n	801039c <_vfiprintf_r+0x3c>
 8010398:	692b      	ldr	r3, [r5, #16]
 801039a:	b9eb      	cbnz	r3, 80103d8 <_vfiprintf_r+0x78>
 801039c:	4629      	mov	r1, r5
 801039e:	4630      	mov	r0, r6
 80103a0:	f7fd fc0c 	bl	800dbbc <__swsetup_r>
 80103a4:	b1c0      	cbz	r0, 80103d8 <_vfiprintf_r+0x78>
 80103a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80103a8:	07dc      	lsls	r4, r3, #31
 80103aa:	d50e      	bpl.n	80103ca <_vfiprintf_r+0x6a>
 80103ac:	f04f 30ff 	mov.w	r0, #4294967295
 80103b0:	b01d      	add	sp, #116	; 0x74
 80103b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b6:	4b7b      	ldr	r3, [pc, #492]	; (80105a4 <_vfiprintf_r+0x244>)
 80103b8:	429d      	cmp	r5, r3
 80103ba:	d101      	bne.n	80103c0 <_vfiprintf_r+0x60>
 80103bc:	68b5      	ldr	r5, [r6, #8]
 80103be:	e7df      	b.n	8010380 <_vfiprintf_r+0x20>
 80103c0:	4b79      	ldr	r3, [pc, #484]	; (80105a8 <_vfiprintf_r+0x248>)
 80103c2:	429d      	cmp	r5, r3
 80103c4:	bf08      	it	eq
 80103c6:	68f5      	ldreq	r5, [r6, #12]
 80103c8:	e7da      	b.n	8010380 <_vfiprintf_r+0x20>
 80103ca:	89ab      	ldrh	r3, [r5, #12]
 80103cc:	0598      	lsls	r0, r3, #22
 80103ce:	d4ed      	bmi.n	80103ac <_vfiprintf_r+0x4c>
 80103d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80103d2:	f7ff f807 	bl	800f3e4 <__retarget_lock_release_recursive>
 80103d6:	e7e9      	b.n	80103ac <_vfiprintf_r+0x4c>
 80103d8:	2300      	movs	r3, #0
 80103da:	9309      	str	r3, [sp, #36]	; 0x24
 80103dc:	2320      	movs	r3, #32
 80103de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80103e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80103e6:	2330      	movs	r3, #48	; 0x30
 80103e8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80105ac <_vfiprintf_r+0x24c>
 80103ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80103f0:	f04f 0901 	mov.w	r9, #1
 80103f4:	4623      	mov	r3, r4
 80103f6:	469a      	mov	sl, r3
 80103f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80103fc:	b10a      	cbz	r2, 8010402 <_vfiprintf_r+0xa2>
 80103fe:	2a25      	cmp	r2, #37	; 0x25
 8010400:	d1f9      	bne.n	80103f6 <_vfiprintf_r+0x96>
 8010402:	ebba 0b04 	subs.w	fp, sl, r4
 8010406:	d00b      	beq.n	8010420 <_vfiprintf_r+0xc0>
 8010408:	465b      	mov	r3, fp
 801040a:	4622      	mov	r2, r4
 801040c:	4629      	mov	r1, r5
 801040e:	4630      	mov	r0, r6
 8010410:	f7ff ff93 	bl	801033a <__sfputs_r>
 8010414:	3001      	adds	r0, #1
 8010416:	f000 80aa 	beq.w	801056e <_vfiprintf_r+0x20e>
 801041a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801041c:	445a      	add	r2, fp
 801041e:	9209      	str	r2, [sp, #36]	; 0x24
 8010420:	f89a 3000 	ldrb.w	r3, [sl]
 8010424:	2b00      	cmp	r3, #0
 8010426:	f000 80a2 	beq.w	801056e <_vfiprintf_r+0x20e>
 801042a:	2300      	movs	r3, #0
 801042c:	f04f 32ff 	mov.w	r2, #4294967295
 8010430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010434:	f10a 0a01 	add.w	sl, sl, #1
 8010438:	9304      	str	r3, [sp, #16]
 801043a:	9307      	str	r3, [sp, #28]
 801043c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010440:	931a      	str	r3, [sp, #104]	; 0x68
 8010442:	4654      	mov	r4, sl
 8010444:	2205      	movs	r2, #5
 8010446:	f814 1b01 	ldrb.w	r1, [r4], #1
 801044a:	4858      	ldr	r0, [pc, #352]	; (80105ac <_vfiprintf_r+0x24c>)
 801044c:	f7ef fee0 	bl	8000210 <memchr>
 8010450:	9a04      	ldr	r2, [sp, #16]
 8010452:	b9d8      	cbnz	r0, 801048c <_vfiprintf_r+0x12c>
 8010454:	06d1      	lsls	r1, r2, #27
 8010456:	bf44      	itt	mi
 8010458:	2320      	movmi	r3, #32
 801045a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801045e:	0713      	lsls	r3, r2, #28
 8010460:	bf44      	itt	mi
 8010462:	232b      	movmi	r3, #43	; 0x2b
 8010464:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010468:	f89a 3000 	ldrb.w	r3, [sl]
 801046c:	2b2a      	cmp	r3, #42	; 0x2a
 801046e:	d015      	beq.n	801049c <_vfiprintf_r+0x13c>
 8010470:	9a07      	ldr	r2, [sp, #28]
 8010472:	4654      	mov	r4, sl
 8010474:	2000      	movs	r0, #0
 8010476:	f04f 0c0a 	mov.w	ip, #10
 801047a:	4621      	mov	r1, r4
 801047c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010480:	3b30      	subs	r3, #48	; 0x30
 8010482:	2b09      	cmp	r3, #9
 8010484:	d94e      	bls.n	8010524 <_vfiprintf_r+0x1c4>
 8010486:	b1b0      	cbz	r0, 80104b6 <_vfiprintf_r+0x156>
 8010488:	9207      	str	r2, [sp, #28]
 801048a:	e014      	b.n	80104b6 <_vfiprintf_r+0x156>
 801048c:	eba0 0308 	sub.w	r3, r0, r8
 8010490:	fa09 f303 	lsl.w	r3, r9, r3
 8010494:	4313      	orrs	r3, r2
 8010496:	9304      	str	r3, [sp, #16]
 8010498:	46a2      	mov	sl, r4
 801049a:	e7d2      	b.n	8010442 <_vfiprintf_r+0xe2>
 801049c:	9b03      	ldr	r3, [sp, #12]
 801049e:	1d19      	adds	r1, r3, #4
 80104a0:	681b      	ldr	r3, [r3, #0]
 80104a2:	9103      	str	r1, [sp, #12]
 80104a4:	2b00      	cmp	r3, #0
 80104a6:	bfbb      	ittet	lt
 80104a8:	425b      	neglt	r3, r3
 80104aa:	f042 0202 	orrlt.w	r2, r2, #2
 80104ae:	9307      	strge	r3, [sp, #28]
 80104b0:	9307      	strlt	r3, [sp, #28]
 80104b2:	bfb8      	it	lt
 80104b4:	9204      	strlt	r2, [sp, #16]
 80104b6:	7823      	ldrb	r3, [r4, #0]
 80104b8:	2b2e      	cmp	r3, #46	; 0x2e
 80104ba:	d10c      	bne.n	80104d6 <_vfiprintf_r+0x176>
 80104bc:	7863      	ldrb	r3, [r4, #1]
 80104be:	2b2a      	cmp	r3, #42	; 0x2a
 80104c0:	d135      	bne.n	801052e <_vfiprintf_r+0x1ce>
 80104c2:	9b03      	ldr	r3, [sp, #12]
 80104c4:	1d1a      	adds	r2, r3, #4
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	9203      	str	r2, [sp, #12]
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	bfb8      	it	lt
 80104ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80104d2:	3402      	adds	r4, #2
 80104d4:	9305      	str	r3, [sp, #20]
 80104d6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80105bc <_vfiprintf_r+0x25c>
 80104da:	7821      	ldrb	r1, [r4, #0]
 80104dc:	2203      	movs	r2, #3
 80104de:	4650      	mov	r0, sl
 80104e0:	f7ef fe96 	bl	8000210 <memchr>
 80104e4:	b140      	cbz	r0, 80104f8 <_vfiprintf_r+0x198>
 80104e6:	2340      	movs	r3, #64	; 0x40
 80104e8:	eba0 000a 	sub.w	r0, r0, sl
 80104ec:	fa03 f000 	lsl.w	r0, r3, r0
 80104f0:	9b04      	ldr	r3, [sp, #16]
 80104f2:	4303      	orrs	r3, r0
 80104f4:	3401      	adds	r4, #1
 80104f6:	9304      	str	r3, [sp, #16]
 80104f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104fc:	482c      	ldr	r0, [pc, #176]	; (80105b0 <_vfiprintf_r+0x250>)
 80104fe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010502:	2206      	movs	r2, #6
 8010504:	f7ef fe84 	bl	8000210 <memchr>
 8010508:	2800      	cmp	r0, #0
 801050a:	d03f      	beq.n	801058c <_vfiprintf_r+0x22c>
 801050c:	4b29      	ldr	r3, [pc, #164]	; (80105b4 <_vfiprintf_r+0x254>)
 801050e:	bb1b      	cbnz	r3, 8010558 <_vfiprintf_r+0x1f8>
 8010510:	9b03      	ldr	r3, [sp, #12]
 8010512:	3307      	adds	r3, #7
 8010514:	f023 0307 	bic.w	r3, r3, #7
 8010518:	3308      	adds	r3, #8
 801051a:	9303      	str	r3, [sp, #12]
 801051c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801051e:	443b      	add	r3, r7
 8010520:	9309      	str	r3, [sp, #36]	; 0x24
 8010522:	e767      	b.n	80103f4 <_vfiprintf_r+0x94>
 8010524:	fb0c 3202 	mla	r2, ip, r2, r3
 8010528:	460c      	mov	r4, r1
 801052a:	2001      	movs	r0, #1
 801052c:	e7a5      	b.n	801047a <_vfiprintf_r+0x11a>
 801052e:	2300      	movs	r3, #0
 8010530:	3401      	adds	r4, #1
 8010532:	9305      	str	r3, [sp, #20]
 8010534:	4619      	mov	r1, r3
 8010536:	f04f 0c0a 	mov.w	ip, #10
 801053a:	4620      	mov	r0, r4
 801053c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010540:	3a30      	subs	r2, #48	; 0x30
 8010542:	2a09      	cmp	r2, #9
 8010544:	d903      	bls.n	801054e <_vfiprintf_r+0x1ee>
 8010546:	2b00      	cmp	r3, #0
 8010548:	d0c5      	beq.n	80104d6 <_vfiprintf_r+0x176>
 801054a:	9105      	str	r1, [sp, #20]
 801054c:	e7c3      	b.n	80104d6 <_vfiprintf_r+0x176>
 801054e:	fb0c 2101 	mla	r1, ip, r1, r2
 8010552:	4604      	mov	r4, r0
 8010554:	2301      	movs	r3, #1
 8010556:	e7f0      	b.n	801053a <_vfiprintf_r+0x1da>
 8010558:	ab03      	add	r3, sp, #12
 801055a:	9300      	str	r3, [sp, #0]
 801055c:	462a      	mov	r2, r5
 801055e:	4b16      	ldr	r3, [pc, #88]	; (80105b8 <_vfiprintf_r+0x258>)
 8010560:	a904      	add	r1, sp, #16
 8010562:	4630      	mov	r0, r6
 8010564:	f7fb fd68 	bl	800c038 <_printf_float>
 8010568:	4607      	mov	r7, r0
 801056a:	1c78      	adds	r0, r7, #1
 801056c:	d1d6      	bne.n	801051c <_vfiprintf_r+0x1bc>
 801056e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010570:	07d9      	lsls	r1, r3, #31
 8010572:	d405      	bmi.n	8010580 <_vfiprintf_r+0x220>
 8010574:	89ab      	ldrh	r3, [r5, #12]
 8010576:	059a      	lsls	r2, r3, #22
 8010578:	d402      	bmi.n	8010580 <_vfiprintf_r+0x220>
 801057a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801057c:	f7fe ff32 	bl	800f3e4 <__retarget_lock_release_recursive>
 8010580:	89ab      	ldrh	r3, [r5, #12]
 8010582:	065b      	lsls	r3, r3, #25
 8010584:	f53f af12 	bmi.w	80103ac <_vfiprintf_r+0x4c>
 8010588:	9809      	ldr	r0, [sp, #36]	; 0x24
 801058a:	e711      	b.n	80103b0 <_vfiprintf_r+0x50>
 801058c:	ab03      	add	r3, sp, #12
 801058e:	9300      	str	r3, [sp, #0]
 8010590:	462a      	mov	r2, r5
 8010592:	4b09      	ldr	r3, [pc, #36]	; (80105b8 <_vfiprintf_r+0x258>)
 8010594:	a904      	add	r1, sp, #16
 8010596:	4630      	mov	r0, r6
 8010598:	f7fb fff2 	bl	800c580 <_printf_i>
 801059c:	e7e4      	b.n	8010568 <_vfiprintf_r+0x208>
 801059e:	bf00      	nop
 80105a0:	08010c7c 	.word	0x08010c7c
 80105a4:	08010c9c 	.word	0x08010c9c
 80105a8:	08010c5c 	.word	0x08010c5c
 80105ac:	08010e94 	.word	0x08010e94
 80105b0:	08010e9e 	.word	0x08010e9e
 80105b4:	0800c039 	.word	0x0800c039
 80105b8:	0801033b 	.word	0x0801033b
 80105bc:	08010e9a 	.word	0x08010e9a

080105c0 <nan>:
 80105c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80105c8 <nan+0x8>
 80105c4:	4770      	bx	lr
 80105c6:	bf00      	nop
 80105c8:	00000000 	.word	0x00000000
 80105cc:	7ff80000 	.word	0x7ff80000

080105d0 <_sbrk_r>:
 80105d0:	b538      	push	{r3, r4, r5, lr}
 80105d2:	4d06      	ldr	r5, [pc, #24]	; (80105ec <_sbrk_r+0x1c>)
 80105d4:	2300      	movs	r3, #0
 80105d6:	4604      	mov	r4, r0
 80105d8:	4608      	mov	r0, r1
 80105da:	602b      	str	r3, [r5, #0]
 80105dc:	f7f1 fc42 	bl	8001e64 <_sbrk>
 80105e0:	1c43      	adds	r3, r0, #1
 80105e2:	d102      	bne.n	80105ea <_sbrk_r+0x1a>
 80105e4:	682b      	ldr	r3, [r5, #0]
 80105e6:	b103      	cbz	r3, 80105ea <_sbrk_r+0x1a>
 80105e8:	6023      	str	r3, [r4, #0]
 80105ea:	bd38      	pop	{r3, r4, r5, pc}
 80105ec:	20004594 	.word	0x20004594

080105f0 <__sread>:
 80105f0:	b510      	push	{r4, lr}
 80105f2:	460c      	mov	r4, r1
 80105f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80105f8:	f000 f93a 	bl	8010870 <_read_r>
 80105fc:	2800      	cmp	r0, #0
 80105fe:	bfab      	itete	ge
 8010600:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010602:	89a3      	ldrhlt	r3, [r4, #12]
 8010604:	181b      	addge	r3, r3, r0
 8010606:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801060a:	bfac      	ite	ge
 801060c:	6563      	strge	r3, [r4, #84]	; 0x54
 801060e:	81a3      	strhlt	r3, [r4, #12]
 8010610:	bd10      	pop	{r4, pc}

08010612 <__swrite>:
 8010612:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010616:	461f      	mov	r7, r3
 8010618:	898b      	ldrh	r3, [r1, #12]
 801061a:	05db      	lsls	r3, r3, #23
 801061c:	4605      	mov	r5, r0
 801061e:	460c      	mov	r4, r1
 8010620:	4616      	mov	r6, r2
 8010622:	d505      	bpl.n	8010630 <__swrite+0x1e>
 8010624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010628:	2302      	movs	r3, #2
 801062a:	2200      	movs	r2, #0
 801062c:	f000 f8b8 	bl	80107a0 <_lseek_r>
 8010630:	89a3      	ldrh	r3, [r4, #12]
 8010632:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010636:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801063a:	81a3      	strh	r3, [r4, #12]
 801063c:	4632      	mov	r2, r6
 801063e:	463b      	mov	r3, r7
 8010640:	4628      	mov	r0, r5
 8010642:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010646:	f000 b837 	b.w	80106b8 <_write_r>

0801064a <__sseek>:
 801064a:	b510      	push	{r4, lr}
 801064c:	460c      	mov	r4, r1
 801064e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010652:	f000 f8a5 	bl	80107a0 <_lseek_r>
 8010656:	1c43      	adds	r3, r0, #1
 8010658:	89a3      	ldrh	r3, [r4, #12]
 801065a:	bf15      	itete	ne
 801065c:	6560      	strne	r0, [r4, #84]	; 0x54
 801065e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010662:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010666:	81a3      	strheq	r3, [r4, #12]
 8010668:	bf18      	it	ne
 801066a:	81a3      	strhne	r3, [r4, #12]
 801066c:	bd10      	pop	{r4, pc}

0801066e <__sclose>:
 801066e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010672:	f000 b851 	b.w	8010718 <_close_r>

08010676 <strncmp>:
 8010676:	b510      	push	{r4, lr}
 8010678:	b17a      	cbz	r2, 801069a <strncmp+0x24>
 801067a:	4603      	mov	r3, r0
 801067c:	3901      	subs	r1, #1
 801067e:	1884      	adds	r4, r0, r2
 8010680:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010684:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010688:	4290      	cmp	r0, r2
 801068a:	d101      	bne.n	8010690 <strncmp+0x1a>
 801068c:	42a3      	cmp	r3, r4
 801068e:	d101      	bne.n	8010694 <strncmp+0x1e>
 8010690:	1a80      	subs	r0, r0, r2
 8010692:	bd10      	pop	{r4, pc}
 8010694:	2800      	cmp	r0, #0
 8010696:	d1f3      	bne.n	8010680 <strncmp+0xa>
 8010698:	e7fa      	b.n	8010690 <strncmp+0x1a>
 801069a:	4610      	mov	r0, r2
 801069c:	e7f9      	b.n	8010692 <strncmp+0x1c>

0801069e <__ascii_wctomb>:
 801069e:	b149      	cbz	r1, 80106b4 <__ascii_wctomb+0x16>
 80106a0:	2aff      	cmp	r2, #255	; 0xff
 80106a2:	bf85      	ittet	hi
 80106a4:	238a      	movhi	r3, #138	; 0x8a
 80106a6:	6003      	strhi	r3, [r0, #0]
 80106a8:	700a      	strbls	r2, [r1, #0]
 80106aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80106ae:	bf98      	it	ls
 80106b0:	2001      	movls	r0, #1
 80106b2:	4770      	bx	lr
 80106b4:	4608      	mov	r0, r1
 80106b6:	4770      	bx	lr

080106b8 <_write_r>:
 80106b8:	b538      	push	{r3, r4, r5, lr}
 80106ba:	4d07      	ldr	r5, [pc, #28]	; (80106d8 <_write_r+0x20>)
 80106bc:	4604      	mov	r4, r0
 80106be:	4608      	mov	r0, r1
 80106c0:	4611      	mov	r1, r2
 80106c2:	2200      	movs	r2, #0
 80106c4:	602a      	str	r2, [r5, #0]
 80106c6:	461a      	mov	r2, r3
 80106c8:	f7f1 fb7b 	bl	8001dc2 <_write>
 80106cc:	1c43      	adds	r3, r0, #1
 80106ce:	d102      	bne.n	80106d6 <_write_r+0x1e>
 80106d0:	682b      	ldr	r3, [r5, #0]
 80106d2:	b103      	cbz	r3, 80106d6 <_write_r+0x1e>
 80106d4:	6023      	str	r3, [r4, #0]
 80106d6:	bd38      	pop	{r3, r4, r5, pc}
 80106d8:	20004594 	.word	0x20004594

080106dc <__assert_func>:
 80106dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80106de:	4614      	mov	r4, r2
 80106e0:	461a      	mov	r2, r3
 80106e2:	4b09      	ldr	r3, [pc, #36]	; (8010708 <__assert_func+0x2c>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	4605      	mov	r5, r0
 80106e8:	68d8      	ldr	r0, [r3, #12]
 80106ea:	b14c      	cbz	r4, 8010700 <__assert_func+0x24>
 80106ec:	4b07      	ldr	r3, [pc, #28]	; (801070c <__assert_func+0x30>)
 80106ee:	9100      	str	r1, [sp, #0]
 80106f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80106f4:	4906      	ldr	r1, [pc, #24]	; (8010710 <__assert_func+0x34>)
 80106f6:	462b      	mov	r3, r5
 80106f8:	f000 f81e 	bl	8010738 <fiprintf>
 80106fc:	f000 f8ca 	bl	8010894 <abort>
 8010700:	4b04      	ldr	r3, [pc, #16]	; (8010714 <__assert_func+0x38>)
 8010702:	461c      	mov	r4, r3
 8010704:	e7f3      	b.n	80106ee <__assert_func+0x12>
 8010706:	bf00      	nop
 8010708:	20000194 	.word	0x20000194
 801070c:	08010ea5 	.word	0x08010ea5
 8010710:	08010eb2 	.word	0x08010eb2
 8010714:	08010ee0 	.word	0x08010ee0

08010718 <_close_r>:
 8010718:	b538      	push	{r3, r4, r5, lr}
 801071a:	4d06      	ldr	r5, [pc, #24]	; (8010734 <_close_r+0x1c>)
 801071c:	2300      	movs	r3, #0
 801071e:	4604      	mov	r4, r0
 8010720:	4608      	mov	r0, r1
 8010722:	602b      	str	r3, [r5, #0]
 8010724:	f7f1 fb69 	bl	8001dfa <_close>
 8010728:	1c43      	adds	r3, r0, #1
 801072a:	d102      	bne.n	8010732 <_close_r+0x1a>
 801072c:	682b      	ldr	r3, [r5, #0]
 801072e:	b103      	cbz	r3, 8010732 <_close_r+0x1a>
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	bd38      	pop	{r3, r4, r5, pc}
 8010734:	20004594 	.word	0x20004594

08010738 <fiprintf>:
 8010738:	b40e      	push	{r1, r2, r3}
 801073a:	b503      	push	{r0, r1, lr}
 801073c:	4601      	mov	r1, r0
 801073e:	ab03      	add	r3, sp, #12
 8010740:	4805      	ldr	r0, [pc, #20]	; (8010758 <fiprintf+0x20>)
 8010742:	f853 2b04 	ldr.w	r2, [r3], #4
 8010746:	6800      	ldr	r0, [r0, #0]
 8010748:	9301      	str	r3, [sp, #4]
 801074a:	f7ff fe09 	bl	8010360 <_vfiprintf_r>
 801074e:	b002      	add	sp, #8
 8010750:	f85d eb04 	ldr.w	lr, [sp], #4
 8010754:	b003      	add	sp, #12
 8010756:	4770      	bx	lr
 8010758:	20000194 	.word	0x20000194

0801075c <_fstat_r>:
 801075c:	b538      	push	{r3, r4, r5, lr}
 801075e:	4d07      	ldr	r5, [pc, #28]	; (801077c <_fstat_r+0x20>)
 8010760:	2300      	movs	r3, #0
 8010762:	4604      	mov	r4, r0
 8010764:	4608      	mov	r0, r1
 8010766:	4611      	mov	r1, r2
 8010768:	602b      	str	r3, [r5, #0]
 801076a:	f7f1 fb52 	bl	8001e12 <_fstat>
 801076e:	1c43      	adds	r3, r0, #1
 8010770:	d102      	bne.n	8010778 <_fstat_r+0x1c>
 8010772:	682b      	ldr	r3, [r5, #0]
 8010774:	b103      	cbz	r3, 8010778 <_fstat_r+0x1c>
 8010776:	6023      	str	r3, [r4, #0]
 8010778:	bd38      	pop	{r3, r4, r5, pc}
 801077a:	bf00      	nop
 801077c:	20004594 	.word	0x20004594

08010780 <_isatty_r>:
 8010780:	b538      	push	{r3, r4, r5, lr}
 8010782:	4d06      	ldr	r5, [pc, #24]	; (801079c <_isatty_r+0x1c>)
 8010784:	2300      	movs	r3, #0
 8010786:	4604      	mov	r4, r0
 8010788:	4608      	mov	r0, r1
 801078a:	602b      	str	r3, [r5, #0]
 801078c:	f7f1 fb51 	bl	8001e32 <_isatty>
 8010790:	1c43      	adds	r3, r0, #1
 8010792:	d102      	bne.n	801079a <_isatty_r+0x1a>
 8010794:	682b      	ldr	r3, [r5, #0]
 8010796:	b103      	cbz	r3, 801079a <_isatty_r+0x1a>
 8010798:	6023      	str	r3, [r4, #0]
 801079a:	bd38      	pop	{r3, r4, r5, pc}
 801079c:	20004594 	.word	0x20004594

080107a0 <_lseek_r>:
 80107a0:	b538      	push	{r3, r4, r5, lr}
 80107a2:	4d07      	ldr	r5, [pc, #28]	; (80107c0 <_lseek_r+0x20>)
 80107a4:	4604      	mov	r4, r0
 80107a6:	4608      	mov	r0, r1
 80107a8:	4611      	mov	r1, r2
 80107aa:	2200      	movs	r2, #0
 80107ac:	602a      	str	r2, [r5, #0]
 80107ae:	461a      	mov	r2, r3
 80107b0:	f7f1 fb4a 	bl	8001e48 <_lseek>
 80107b4:	1c43      	adds	r3, r0, #1
 80107b6:	d102      	bne.n	80107be <_lseek_r+0x1e>
 80107b8:	682b      	ldr	r3, [r5, #0]
 80107ba:	b103      	cbz	r3, 80107be <_lseek_r+0x1e>
 80107bc:	6023      	str	r3, [r4, #0]
 80107be:	bd38      	pop	{r3, r4, r5, pc}
 80107c0:	20004594 	.word	0x20004594

080107c4 <memmove>:
 80107c4:	4288      	cmp	r0, r1
 80107c6:	b510      	push	{r4, lr}
 80107c8:	eb01 0402 	add.w	r4, r1, r2
 80107cc:	d902      	bls.n	80107d4 <memmove+0x10>
 80107ce:	4284      	cmp	r4, r0
 80107d0:	4623      	mov	r3, r4
 80107d2:	d807      	bhi.n	80107e4 <memmove+0x20>
 80107d4:	1e43      	subs	r3, r0, #1
 80107d6:	42a1      	cmp	r1, r4
 80107d8:	d008      	beq.n	80107ec <memmove+0x28>
 80107da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107e2:	e7f8      	b.n	80107d6 <memmove+0x12>
 80107e4:	4402      	add	r2, r0
 80107e6:	4601      	mov	r1, r0
 80107e8:	428a      	cmp	r2, r1
 80107ea:	d100      	bne.n	80107ee <memmove+0x2a>
 80107ec:	bd10      	pop	{r4, pc}
 80107ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80107f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80107f6:	e7f7      	b.n	80107e8 <memmove+0x24>

080107f8 <__malloc_lock>:
 80107f8:	4801      	ldr	r0, [pc, #4]	; (8010800 <__malloc_lock+0x8>)
 80107fa:	f7fe bdf2 	b.w	800f3e2 <__retarget_lock_acquire_recursive>
 80107fe:	bf00      	nop
 8010800:	20004588 	.word	0x20004588

08010804 <__malloc_unlock>:
 8010804:	4801      	ldr	r0, [pc, #4]	; (801080c <__malloc_unlock+0x8>)
 8010806:	f7fe bded 	b.w	800f3e4 <__retarget_lock_release_recursive>
 801080a:	bf00      	nop
 801080c:	20004588 	.word	0x20004588

08010810 <_realloc_r>:
 8010810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010814:	4680      	mov	r8, r0
 8010816:	4614      	mov	r4, r2
 8010818:	460e      	mov	r6, r1
 801081a:	b921      	cbnz	r1, 8010826 <_realloc_r+0x16>
 801081c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010820:	4611      	mov	r1, r2
 8010822:	f7ff bba3 	b.w	800ff6c <_malloc_r>
 8010826:	b92a      	cbnz	r2, 8010834 <_realloc_r+0x24>
 8010828:	f7ff fb34 	bl	800fe94 <_free_r>
 801082c:	4625      	mov	r5, r4
 801082e:	4628      	mov	r0, r5
 8010830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010834:	f000 f835 	bl	80108a2 <_malloc_usable_size_r>
 8010838:	4284      	cmp	r4, r0
 801083a:	4607      	mov	r7, r0
 801083c:	d802      	bhi.n	8010844 <_realloc_r+0x34>
 801083e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010842:	d812      	bhi.n	801086a <_realloc_r+0x5a>
 8010844:	4621      	mov	r1, r4
 8010846:	4640      	mov	r0, r8
 8010848:	f7ff fb90 	bl	800ff6c <_malloc_r>
 801084c:	4605      	mov	r5, r0
 801084e:	2800      	cmp	r0, #0
 8010850:	d0ed      	beq.n	801082e <_realloc_r+0x1e>
 8010852:	42bc      	cmp	r4, r7
 8010854:	4622      	mov	r2, r4
 8010856:	4631      	mov	r1, r6
 8010858:	bf28      	it	cs
 801085a:	463a      	movcs	r2, r7
 801085c:	f7fb fb36 	bl	800becc <memcpy>
 8010860:	4631      	mov	r1, r6
 8010862:	4640      	mov	r0, r8
 8010864:	f7ff fb16 	bl	800fe94 <_free_r>
 8010868:	e7e1      	b.n	801082e <_realloc_r+0x1e>
 801086a:	4635      	mov	r5, r6
 801086c:	e7df      	b.n	801082e <_realloc_r+0x1e>
	...

08010870 <_read_r>:
 8010870:	b538      	push	{r3, r4, r5, lr}
 8010872:	4d07      	ldr	r5, [pc, #28]	; (8010890 <_read_r+0x20>)
 8010874:	4604      	mov	r4, r0
 8010876:	4608      	mov	r0, r1
 8010878:	4611      	mov	r1, r2
 801087a:	2200      	movs	r2, #0
 801087c:	602a      	str	r2, [r5, #0]
 801087e:	461a      	mov	r2, r3
 8010880:	f7f1 fa82 	bl	8001d88 <_read>
 8010884:	1c43      	adds	r3, r0, #1
 8010886:	d102      	bne.n	801088e <_read_r+0x1e>
 8010888:	682b      	ldr	r3, [r5, #0]
 801088a:	b103      	cbz	r3, 801088e <_read_r+0x1e>
 801088c:	6023      	str	r3, [r4, #0]
 801088e:	bd38      	pop	{r3, r4, r5, pc}
 8010890:	20004594 	.word	0x20004594

08010894 <abort>:
 8010894:	b508      	push	{r3, lr}
 8010896:	2006      	movs	r0, #6
 8010898:	f000 f834 	bl	8010904 <raise>
 801089c:	2001      	movs	r0, #1
 801089e:	f7f1 fa69 	bl	8001d74 <_exit>

080108a2 <_malloc_usable_size_r>:
 80108a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108a6:	1f18      	subs	r0, r3, #4
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	bfbc      	itt	lt
 80108ac:	580b      	ldrlt	r3, [r1, r0]
 80108ae:	18c0      	addlt	r0, r0, r3
 80108b0:	4770      	bx	lr

080108b2 <_raise_r>:
 80108b2:	291f      	cmp	r1, #31
 80108b4:	b538      	push	{r3, r4, r5, lr}
 80108b6:	4604      	mov	r4, r0
 80108b8:	460d      	mov	r5, r1
 80108ba:	d904      	bls.n	80108c6 <_raise_r+0x14>
 80108bc:	2316      	movs	r3, #22
 80108be:	6003      	str	r3, [r0, #0]
 80108c0:	f04f 30ff 	mov.w	r0, #4294967295
 80108c4:	bd38      	pop	{r3, r4, r5, pc}
 80108c6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80108c8:	b112      	cbz	r2, 80108d0 <_raise_r+0x1e>
 80108ca:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108ce:	b94b      	cbnz	r3, 80108e4 <_raise_r+0x32>
 80108d0:	4620      	mov	r0, r4
 80108d2:	f000 f831 	bl	8010938 <_getpid_r>
 80108d6:	462a      	mov	r2, r5
 80108d8:	4601      	mov	r1, r0
 80108da:	4620      	mov	r0, r4
 80108dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108e0:	f000 b818 	b.w	8010914 <_kill_r>
 80108e4:	2b01      	cmp	r3, #1
 80108e6:	d00a      	beq.n	80108fe <_raise_r+0x4c>
 80108e8:	1c59      	adds	r1, r3, #1
 80108ea:	d103      	bne.n	80108f4 <_raise_r+0x42>
 80108ec:	2316      	movs	r3, #22
 80108ee:	6003      	str	r3, [r0, #0]
 80108f0:	2001      	movs	r0, #1
 80108f2:	e7e7      	b.n	80108c4 <_raise_r+0x12>
 80108f4:	2400      	movs	r4, #0
 80108f6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80108fa:	4628      	mov	r0, r5
 80108fc:	4798      	blx	r3
 80108fe:	2000      	movs	r0, #0
 8010900:	e7e0      	b.n	80108c4 <_raise_r+0x12>
	...

08010904 <raise>:
 8010904:	4b02      	ldr	r3, [pc, #8]	; (8010910 <raise+0xc>)
 8010906:	4601      	mov	r1, r0
 8010908:	6818      	ldr	r0, [r3, #0]
 801090a:	f7ff bfd2 	b.w	80108b2 <_raise_r>
 801090e:	bf00      	nop
 8010910:	20000194 	.word	0x20000194

08010914 <_kill_r>:
 8010914:	b538      	push	{r3, r4, r5, lr}
 8010916:	4d07      	ldr	r5, [pc, #28]	; (8010934 <_kill_r+0x20>)
 8010918:	2300      	movs	r3, #0
 801091a:	4604      	mov	r4, r0
 801091c:	4608      	mov	r0, r1
 801091e:	4611      	mov	r1, r2
 8010920:	602b      	str	r3, [r5, #0]
 8010922:	f7f1 fa17 	bl	8001d54 <_kill>
 8010926:	1c43      	adds	r3, r0, #1
 8010928:	d102      	bne.n	8010930 <_kill_r+0x1c>
 801092a:	682b      	ldr	r3, [r5, #0]
 801092c:	b103      	cbz	r3, 8010930 <_kill_r+0x1c>
 801092e:	6023      	str	r3, [r4, #0]
 8010930:	bd38      	pop	{r3, r4, r5, pc}
 8010932:	bf00      	nop
 8010934:	20004594 	.word	0x20004594

08010938 <_getpid_r>:
 8010938:	f7f1 ba04 	b.w	8001d44 <_getpid>

0801093c <_init>:
 801093c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801093e:	bf00      	nop
 8010940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010942:	bc08      	pop	{r3}
 8010944:	469e      	mov	lr, r3
 8010946:	4770      	bx	lr

08010948 <_fini>:
 8010948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094a:	bf00      	nop
 801094c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801094e:	bc08      	pop	{r3}
 8010950:	469e      	mov	lr, r3
 8010952:	4770      	bx	lr
